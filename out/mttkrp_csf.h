// 'mttkrp_csf' code generated by 'edavis' at 09/04/2019 15:43:50
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <math.h>
#include <string.h>
#include <omp.h>

#define min(x,y) (((x)<(y))?(x):(y))
#define max(x,y) (((x)>(y))?(x):(y))
#define abs(x) ((x)<0?-(x):(x))
#define absmin(x,y) ((x)=min(abs((x)),abs((y))))
#define absmax(x,y) ((x)=max(abs((x)),abs((y))))
#define floord(x,y) ((x)/(y))
#define sgn(x) ((x)<0?-1:1)
#define offset2(i,j,M) ((j)+(i)*(M))
#define offset3(i,j,k,M,N) ((k)+((j)+(i)*(M))*(N))
#define offset4(i,j,k,l,M,N,P) ((l)+((k)+((j)+(i)*(M))*(N))*(P))
#define arrinit(ptr,val,size) for(unsigned __i__=0;__i__<(size);__i__++) (ptr)[__i__]=(val)
#define arrprnt(name,arr,size) {\
fprintf(stderr,"%s={",(name));\
for(unsigned __i__=0;__i__<(size);__i__++) fprintf(stderr,"%lg,",(arr)[__i__]);\
fprintf(stderr,"}\n");}
#define tid omp_get_thread_num()
#define A(i,r) A[offset2((i),(r),(R))]
#define B(j,r) B[offset2((j),(r),(R))]
#define C(k,r) C[offset2((k),(r),(R))]
#define X(n) X[(n)]
#define ind0(p) ind0[(p)]
#define ind1(p,i,q) ind1[(q)]
#define ind2(p,i,q,j,n) ind2[(n)]
#define pos0(p) pos0[(p)]
#define pos0_1(p) pos0[(p+1)]
#define pos1(p,i,q) pos1[(q)]
#define pos1_1(p,i,q) pos1[(q+1)]

void mttkrp_csf(const float* B, const float* C, const float* X, const unsigned F, const unsigned R, const unsigned* ind0, const unsigned* ind1, const unsigned* ind2, const unsigned* pos0, const unsigned* pos1, float* A);
inline void mttkrp_csf(const float* B, const float* C, const float* X, const unsigned F, const unsigned R, const unsigned* ind0, const unsigned* ind1, const unsigned* ind2, const unsigned* pos0, const unsigned* pos1, float* A) {
    unsigned t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15;
// krp
#undef s0
#define s0(p,i,q,j,n,k,r) A((i),(r))+=X((n))*C((k),(r))*B((j),(r))

#pragma omp parallel for schedule(auto) private(t1,t2,t4,t6,t8,t10,t12,t14)
for(t2 = 0; t2 <= F-1; t2++) {
  t4=ind0(t2);
  for(t6 = pos0(t2); t6 <= pos0_1(t2)-1; t6++) {
    t8=ind1(t2,t4,t6);
    for(t10 = pos1(t2,t4,t6); t10 <= pos1_1(t2,t4,t6)-1; t10++) {
      t12=ind2(t2,t4,t6,t8,t10);
      #pragma omp simd
      for(t14 = 0; t14 <= R-1; t14++) {
        s0(t2,t4,t6,t8,t10,t12,t14);
      }
    }
  }
}

}    // mttkrp_csf

#undef min
#undef max
#undef abs
#undef absmin
#undef absmax
#undef floord
#undef sgn
#undef offset2
#undef offset3
#undef offset4
#undef arrinit
#undef arrprnt
#undef tid
#undef A
#undef B
#undef C
#undef X
#undef ind0
#undef ind1
#undef ind2
#undef pos0
#undef pos0_1
#undef pos1
#undef pos1_1

