// 'coo_dia_insp' code generated by 'edavis' at 10/01/2019 14:42:43
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <string.h>
#include <limits.h>
#include <math.h>
//#include <assert.h>

#define min(x,y) (((x)<(y))?(x):(y))
#define max(x,y) (((x)>(y))?(x):(y))
#define abs(x) ((x)<0?-(x):(x))
#define floord(x,y) ((x)/(y))
#define offset2(i,j,M) ((j)+(i)*(M))
#define offset3(i,j,k,M,N) ((k)+((j)+(i)*(M))*(N))
#define offset4(i,j,k,l,M,N,P) ((l)+((k)+((j)+(i)*(M))*(N))*(P))
#define arrinit(ptr,val,size) for(unsigned __i__=0;__i__<(size);__i__++) (ptr)[__i__]=(val)
#define arrprnt(name,arr,size) {\
fprintf(stderr,"%s={",(name));\
for(unsigned __i__=0;__i__<(size);__i__++) fprintf(stderr,"%lg,",(arr)[__i__]);\
fprintf(stderr,"}\n");}
#define val(n) val[(n)]
#define doff(d) (*doff)[(d)]
#define dval(d,i) (*dval)[offset2((d),(i),N)]
//#define col(n) col[(n)]
//#define row(n) row[(n)]

int coo_dia_insp(const double* val, const unsigned M, const unsigned* col, const unsigned* row, double** dval, int** doff);
inline int coo_dia_insp(const double* val, const unsigned M, const unsigned* col, const unsigned* row, double** dval, int** doff) {
    unsigned i, j, k, n;
    int d, D = 0;
    unsigned N = row[M-1] + 1;
    unsigned dmax = N+N-1;
    unsigned size = (N/2) * N;

    unsigned* __restrict dset = (unsigned*) malloc(dmax * sizeof(int));
    memset(dset, UINT_MAX, dmax * sizeof(int));
    *doff = (int*) calloc(dmax, sizeof(int));
    
    *dval = (double*) calloc(size, sizeof(double));
    for (i = 0; i < UINT_MAX && *dval == NULL; i++) {
      size = (3 * size) / 4;
      *dval = (double*) calloc(size, sizeof(double));
    }

#define did(d,i,j) {\
(k)=(j)-(i)+(N-1);\
if(dset[(k)]==UINT_MAX)dset[(k)]=D;\
(d)=dset[(k)];\
}

    for (n = 0; n < M; n++) {
        i = row[n];
        j = col[n];
        did(d,i,j);
        if (d >= D) D=d+1;
        (*doff)[d] = (int) j - i;
        k = offset2(d,i,N);
        (*dval)[k] = val[n];
    }

    *doff = (int*) realloc(*doff, D * sizeof(int));
    *dval = (double*) realloc(*dval, D * N * sizeof(double));
    fprintf(stderr, "N=%u,M=%u,D=%u,size=%u\n", N,M,D,D*N);
    assert(*dval != NULL);

    return (D);
}    // coo_dia_insp

#undef min
#undef max
#undef abs
#undef floord
#undef offset2
#undef offset3
#undef offset4
#undef arrinit
#undef arrprnt
#undef val
#undef dval
#undef col
#undef row
#undef doff
