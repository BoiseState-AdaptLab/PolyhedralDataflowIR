// 'cp_als_coo' code generated by 'edavis' at 09/09/2019 16:48:16
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <math.h>
#include <string.h>
#include <float.h>
#include <time.h>
#include <linalg.h>

#define min(x,y) (((x)<(y))?(x):(y))
#define max(x,y) (((x)>(y))?(x):(y))
#define abs(x) ((x)<0?-(x):(x))
#define floord(x,y) ((x)/(y))
#define offset2(i,j,M) ((j)+(i)*(M))
#define offset3(i,j,k,M,N) ((k)+((j)+(i)*(M))*(N))
#define offset4(i,j,k,l,M,N,P) ((l)+((k)+((j)+(i)*(M))*(N))*(P))
#define arrinit(ptr,val,size) for(unsigned __i__=0;__i__<(size);__i__++) (ptr)[__i__]=(val)
#define arrprnt(name,arr,size) {\
fprintf(stderr,"%s={",(name));\
for(unsigned __i__=0;__i__<(size);__i__++) fprintf(stderr,"%lg,",(arr)[__i__]);\
fprintf(stderr,"}\n");}
#define urand(m) (rand()/nextafter(RAND_MAX,DBL_MAX)+(m))
#define pinv(A,Ainv) (mp_pinv((A),(Ainv),R))
#define A(i,r) A[offset2((i),(r),(R))]
#define B(j,r) B[offset2((j),(r),(R))]
#define C(k,r) C[offset2((k),(r),(R))]
#define Y(q,r) Y[offset2((q),(r),(R))]
#define V(q,r) V[offset2((q),(r),(R))]
#define Anew(i,r) Anew[offset2((i),(r),(R))]
#define X(m) X[(m)]
#define Vinv(q,r) Vinv[offset2((q),(r),(R))]
#define sums(r) sums[(r)]
#define lmbda(r) lmbda[(r)]
#define Bnew(j,r) Bnew[offset2((j),(r),(R))]
#define Cnew(k,r) Cnew[offset2((k),(r),(R))]
#define ind0(m) ind0[(m)]
#define ind1(m) ind1[(m)]
#define ind2(m) ind2[(m)]

void cp_als_coo(const float* X, const unsigned I, const unsigned J, const unsigned K, const unsigned M, const unsigned R, const unsigned* ind0, const unsigned* ind1, const unsigned* ind2, float* A, float* B, float* C, float* lmbda);
inline void cp_als_coo(const float* X, const unsigned I, const unsigned J, const unsigned K, const unsigned M, const unsigned R, const unsigned* ind0, const unsigned* ind1, const unsigned* ind2, float* A, float* B, float* C, float* lmbda) {
    unsigned t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15;
    float* __restrict__ Y = (float*) calloc((R)*(R),sizeof(float));
    float* __restrict__ V = (float*) calloc((R)*(R),sizeof(float));
    float* __restrict__ Anew = (float*) calloc((I)*(R),sizeof(float));
    float* __restrict__ Vinv = (float*) calloc((R)*(R),sizeof(float));
    float* __restrict__ sums = (float*) calloc((R),sizeof(float));
    float* __restrict__ Bnew = (float*) calloc((J)*(R),sizeof(float));
    float* __restrict__ Cnew = (float*) calloc((K)*(R),sizeof(float));

    srand(1568224077); //time(0));

// Ainit
#undef s0
#define s0(i,r) A((i),(r))=urand(0)

for(t2 = 0; t2 <= I-1; t2++) {
  for(t4 = 0; t4 <= R-1; t4++) {
    s0(t2,t4);
  }
}

// Binit
#undef s0
#define s0(j,r) B((j),(r))=urand(0)

for(t2 = 0; t2 <= J-1; t2++) {
  for(t4 = 0; t4 <= R-1; t4++) {
    s0(t2,t4);
  }
}

// Cinit
#undef s0
#define s0(k,r) C((k),(r))=urand(0)

for(t2 = 0; t2 <= K-1; t2++) {
  for(t4 = 0; t4 <= R-1; t4++) {
    s0(t2,t4);
  }
}

// Vinit
#undef s0
#define s0() {\
arrinit(V,1.000000,(R)*(R));\
}

s0();

// Yinit1
#undef s0
#define s0() {\
memset(Y,0,(R)*(R)*sizeof(float));\
}

s0();

// Bmm
#undef s0
#define s0(q,r,j) Y((q),(r))+=B((q),(j))*B((j),(r))

for(t2 = 0; t2 <= R-1; t2++) {
  for(t4 = 0; t4 <= R-1; t4++) {
    for(t6 = 0; t6 <= J-1; t6++) {
      s0(t2,t4,t6);
    }
  }
}

// Ahp1
#undef s0
#define s0(q,r) V((q),(r))*=Y((q),(r))

for(t2 = 0; t2 <= R-1; t2++) {
  for(t4 = 0; t4 <= R-1; t4++) {
    s0(t2,t4);
  }
}

// Yinit2
#undef s0
#define s0() {\
memset(Y,0,(R)*(R)*sizeof(float));\
}

s0();

// Cmm
#undef s0
#define s0(q,r,k) Y((q),(r))+=C((q),(k))*C((k),(r))

for(t2 = 0; t2 <= R-1; t2++) {
  for(t4 = 0; t4 <= R-1; t4++) {
    for(t6 = 0; t6 <= K-1; t6++) {
      s0(t2,t4,t6);
    }
  }
}

// Ahp2
#undef s0
#define s0(q,r) V((q),(r))*=Y((q),(r))

for(t2 = 0; t2 <= R-1; t2++) {
  for(t4 = 0; t4 <= R-1; t4++) {
    s0(t2,t4);
  }
}

// Akrp
#undef s0
#define s0(m,i,j,k,r) Anew((i),(r))+=X((m))*C((k),(r))*B((j),(r))

for(t2 = 0; t2 <= M-1; t2++) {
  t4=ind0(t2);
  t6=ind1(t2);
  t8=ind2(t2);
  for(t10 = 0; t10 <= R-1; t10++) {
    s0(t2,t4,t6,t8,t10);
  }
}

// Apinv
#undef s0
#define s0() Vinv=pinv(V,Vinv)

s0();

// Ammp
#undef s0
#define s0(i,q,r) Anew((i),(q))+=Anew((i),(r))*Vinv((q),(r))

for(t2 = 0; t2 <= I-1; t2++) {
  for(t4 = 0; t4 <= R-1; t4++) {
    for(t6 = 0; t6 <= R-1; t6++) {
      s0(t2,t4,t6);
    }
  }
}

// Assq
#undef s0
#define s0(i,r) sums((r))+=Anew((i),(r))*Anew((i),(r))

for(t2 = 0; t2 <= I-1; t2++) {
  for(t4 = 0; t4 <= R-1; t4++) {
    s0(t2,t4);
  }
}

// Anorm
#undef s0
#define s0(r) lmbda((r))=sqrt(sums((r)))

for(t2 = 0; t2 <= R-1; t2++) {
  s0(t2);
}

// Adiv
#undef s0
#define s0(i,r) A((i),(r))=Anew((i),(r))/lmbda((r))

for(t2 = 0; t2 <= I-1; t2++) {
  for(t4 = 0; t4 <= R-1; t4++) {
    s0(t2,t4);
  }
}

// Yinit0
#undef s0
#define s0() {\
memset(Y,0,(R)*(R)*sizeof(float));\
}

s0();

// Amm
#undef s0
#define s0(q,r,i) Y((q),(r))+=A((q),(i))*A((i),(r))

for(t2 = 0; t2 <= R-1; t2++) {
  for(t4 = 0; t4 <= R-1; t4++) {
    for(t6 = 0; t6 <= I-1; t6++) {
      s0(t2,t4,t6);
    }
  }
}

// Bhp0
#undef s0
#define s0(q,r) V((q),(r))*=Y((q),(r))

for(t2 = 0; t2 <= R-1; t2++) {
  for(t4 = 0; t4 <= R-1; t4++) {
    s0(t2,t4);
  }
}

// Bhp2
#undef s0
#define s0(q,r) V((q),(r))*=Y((q),(r))

for(t2 = 0; t2 <= R-1; t2++) {
  for(t4 = 0; t4 <= R-1; t4++) {
    s0(t2,t4);
  }
}

// Bkrp
#undef s0
#define s0(m,i,j,k,r) Bnew((j),(r))+=X((m))*C((k),(r))*A((i),(r))

for(t2 = 0; t2 <= M-1; t2++) {
  t4=ind0(t2);
  t6=ind1(t2);
  t8=ind2(t2);
  for(t10 = 0; t10 <= R-1; t10++) {
    s0(t2,t4,t6,t8,t10);
  }
}

// Bpinv
#undef s0
#define s0() Vinv=pinv(V,Vinv)

s0();

// Bmmp
#undef s0
#define s0(j,q,r) Bnew((j),(q))+=Bnew((j),(r))*Vinv((q),(r))

for(t2 = 0; t2 <= J-1; t2++) {
  for(t4 = 0; t4 <= R-1; t4++) {
    for(t6 = 0; t6 <= R-1; t6++) {
      s0(t2,t4,t6);
    }
  }
}

// Bssq
#undef s0
#define s0(j,r) sums((r))+=Bnew((j),(r))*Bnew((j),(r))

for(t2 = 0; t2 <= J-1; t2++) {
  for(t4 = 0; t4 <= R-1; t4++) {
    s0(t2,t4);
  }
}

// Bnorm
#undef s0
#define s0(r) lmbda((r))=sqrt(sums((r)))

for(t2 = 0; t2 <= R-1; t2++) {
  s0(t2);
}

// Bdiv
#undef s0
#define s0(j,r) B((j),(r))=Bnew((j),(r))/lmbda((r))

for(t2 = 0; t2 <= J-1; t2++) {
  for(t4 = 0; t4 <= R-1; t4++) {
    s0(t2,t4);
  }
}

// Chp0
#undef s0
#define s0(q,r) V((q),(r))*=Y((q),(r))

for(t2 = 0; t2 <= R-1; t2++) {
  for(t4 = 0; t4 <= R-1; t4++) {
    s0(t2,t4);
  }
}

// Chp1
#undef s0
#define s0(q,r) V((q),(r))*=Y((q),(r))

for(t2 = 0; t2 <= R-1; t2++) {
  for(t4 = 0; t4 <= R-1; t4++) {
    s0(t2,t4);
  }
}

// Ckrp
#undef s0
#define s0(m,i,j,k,r) Cnew((k),(r))+=X((m))*B((j),(r))*A((i),(r))

for(t2 = 0; t2 <= M-1; t2++) {
  t4=ind0(t2);
  t6=ind1(t2);
  t8=ind2(t2);
  for(t10 = 0; t10 <= R-1; t10++) {
    s0(t2,t4,t6,t8,t10);
  }
}

// Cpinv
#undef s0
#define s0() Vinv=pinv(V,Vinv)

s0();

// Cmmp
#undef s0
#define s0(k,q,r) Cnew((k),(q))+=Cnew((k),(r))*Vinv((q),(r))

for(t2 = 0; t2 <= K-1; t2++) {
  for(t4 = 0; t4 <= R-1; t4++) {
    for(t6 = 0; t6 <= R-1; t6++) {
      s0(t2,t4,t6);
    }
  }
}

// Cssq
#undef s0
#define s0(k,r) sums((r))+=Cnew((k),(r))*Cnew((k),(r))

for(t2 = 0; t2 <= K-1; t2++) {
  for(t4 = 0; t4 <= R-1; t4++) {
    s0(t2,t4);
  }
}

// Cnorm
#undef s0
#define s0(r) lmbda((r))=sqrt(sums((r)))

for(t2 = 0; t2 <= R-1; t2++) {
  s0(t2);
}

// Cdiv
#undef s0
#define s0(k,r) C((k),(r))=Cnew((k),(r))/lmbda((r))

for(t2 = 0; t2 <= K-1; t2++) {
  for(t4 = 0; t4 <= R-1; t4++) {
    s0(t2,t4);
  }
}

    free(Y);
    free(V);
    free(Anew);
    free(Vinv);
    free(sums);
    free(Bnew);
    free(Cnew);
}    // cp_als_coo

#undef min
#undef max
#undef abs
#undef floord
#undef offset2
#undef offset3
#undef offset4
#undef arrinit
#undef arrprnt
#undef urand
#undef pinv
#undef A
#undef B
#undef C
#undef Y
#undef V
#undef Anew
#undef X
#undef Vinv
#undef sums
#undef lmbda
#undef Bnew
#undef Cnew
#undef ind0
#undef ind1
#undef ind2

