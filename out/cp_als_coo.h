// 'cp_als_coo' code generated by 'edavis' at 09/13/2019 12:03:19
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <math.h>
#include <string.h>
#include <float.h>
#include <time.h>
#include <linalg.h>

#define min(x,y) (((x)<(y))?(x):(y))
#define max(x,y) (((x)>(y))?(x):(y))
#define abs(x) ((x)<0?-(x):(x))
#define floord(x,y) ((x)/(y))
#define offset2(i,j,M) ((j)+(i)*(M))
#define offset3(i,j,k,M,N) ((k)+((j)+(i)*(M))*(N))
#define offset4(i,j,k,l,M,N,P) ((l)+((k)+((j)+(i)*(M))*(N))*(P))
#define arrinit(ptr,val,size) for(unsigned __i__=0;__i__<(size);__i__++) (ptr)[__i__]=(val)
#define arrprnt(name,arr,size) {\
fprintf(stderr,"%s={",(name));\
for(unsigned __i__=0;__i__<(size);__i__++) fprintf(stderr,"%lg,",(arr)[__i__]);\
fprintf(stderr,"}\n");}
#define urand(m) (rand()/nextafter(RAND_MAX,DBL_MAX)+(m))
#define pinv(A,Ainv) (mp_pinv((A),(Ainv),R))
#define A(i,r) A[offset2((i),(r),(R))]
#define B(j,r) B[offset2((j),(r),(R))]
#define C(k,r) C[offset2((k),(r),(R))]
#define V(r,q) V[offset2((r),(q),(R))]
#define Y(r,q) Y[offset2((r),(q),(R))]
#define Anew(i,r) Anew[offset2((i),(r),(R))]
#define X(m) X[(m)]
#define Vinv(r,q) Vinv[offset2((r),(q),(R))]
#define sums(r) sums[(r)]
#define lmbda(r) lmbda[(r)]
#define Bnew(j,r) Bnew[offset2((j),(r),(R))]
#define Cnew(k,r) Cnew[offset2((k),(r),(R))]
#define ind0(m) ind0[(m)]
#define ind1(m) ind1[(m)]
#define ind2(m) ind2[(m)]

void cp_als_coo(const float* X, const unsigned I, const unsigned J, const unsigned K, const unsigned M, const unsigned R, const unsigned* ind0, const unsigned* ind1, const unsigned* ind2, float* A, float* B, float* C, float* lmbda);
inline void cp_als_coo(const float* X, const unsigned I, const unsigned J, const unsigned K, const unsigned M, const unsigned R, const unsigned* ind0, const unsigned* ind1, const unsigned* ind2, float* A, float* B, float* C, float* lmbda) {
    unsigned t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15;
    float* __restrict__ V = (float*) calloc((R)*(R),sizeof(float));
    float* __restrict__ Y = (float*) calloc((R)*(R),sizeof(float));
    float* __restrict__ Anew = (float*) calloc((I)*(R),sizeof(float));
    float* __restrict__ Vinv = (float*) calloc((R)*(R),sizeof(float));
    float* __restrict__ sums = (float*) calloc((R),sizeof(float));
    float* __restrict__ Bnew = (float*) calloc((J)*(R),sizeof(float));
    float* __restrict__ Cnew = (float*) calloc((K)*(R),sizeof(float));

    srand(1568224077);

// Ainit+Binit+Cinit+Vinit0+Yinit0+BYmm0+VYhp0+Yinit1+CYmm1+VYhp1+Akrp+Apinv+Ammp+Assq+Anorm+Adiv+Vinit1+Yinit2+AYmm2+VYhp2+Yinit3+CYmm3+VYhp3+Bkrp+Bpinv+Bmmp+Bssq+Bnorm+Bdiv+Vinit2+Yinit4+AYmm4+VYhp4+Yinit5+BYmm5+VYhp5+Ckrp+Cpinv+Cmmp+Cssq+Cnorm+Cdiv
#undef s0
#define s0(r,i) A((i),(r))=urand(0)
#undef s1
#define s1(r,j) B((j),(r))=urand(0)
#undef s2
#define s2(r,k) C((k),(r))=urand(0)
#undef s3
#define s3(r,q) V((r),(q))=1.000000
#undef s4
#define s4(r,q) Y((r),(q))=0.000000
#undef s5
#define s5(r,q,j) Y((r),(q))+=B((j),(r))*B((q),(j))
#undef s6
#define s6(r,q) V((r),(q))*=Y((r),(q))
#undef s7
#define s7(r,q) Y((r),(q))=0.000000
#undef s8
#define s8(r,q,k) Y((r),(q))+=C((k),(r))*C((q),(k))
#undef s9
#define s9(r,q) V((r),(q))*=Y((r),(q))
#undef s10
#define s10(m,i,j,k,r) Anew((i),(r))+=X((m))*C((k),(r))*B((j),(r))
#undef s11
#define s11() Vinv=pinv(V,Vinv)
#undef s12
#define s12(i,r,q) Anew((i),(r))+=Anew((i),(q))*Vinv((r),(q))
#undef s13
#define s13(r,i) sums((r))+=Anew((i),(r))*Anew((i),(r))
#undef s14
#define s14(r) lmbda((r))=sqrt(sums((r)))
#undef s15
#define s15(r,i) A((i),(r))=Anew((i),(r))/lmbda((r))
#undef s16
#define s16(r,q) V((r),(q))=1.000000
#undef s17
#define s17(r,q) Y((r),(q))=0.000000
#undef s18
#define s18(r,q,i) Y((r),(q))+=A((i),(r))*A((q),(i))
#undef s19
#define s19(r,q) V((r),(q))*=Y((r),(q))
#undef s20
#define s20(r,q) Y((r),(q))=0.000000
#undef s21
#define s21(r,q,k) Y((r),(q))+=C((k),(r))*C((q),(k))
#undef s22
#define s22(r,q) V((r),(q))*=Y((r),(q))
#undef s23
#define s23(m,i,j,k,r) Bnew((j),(r))+=X((m))*C((k),(r))*A((i),(r))
#undef s24
#define s24() Vinv=pinv(V,Vinv)
#undef s25
#define s25(j,r,q) Bnew((j),(r))+=Bnew((j),(q))*Vinv((r),(q))
#undef s26
#define s26(r,j) sums((r))+=Bnew((j),(r))*Bnew((j),(r))
#undef s27
#define s27(r) lmbda((r))=sqrt(sums((r)))
#undef s28
#define s28(r,j) B((j),(r))=Bnew((j),(r))/lmbda((r))
#undef s29
#define s29(r,q) V((r),(q))=1.000000
#undef s30
#define s30(r,q) Y((r),(q))=0.000000
#undef s31
#define s31(r,q,i) Y((r),(q))+=A((i),(r))*A((q),(i))
#undef s32
#define s32(r,q) V((r),(q))*=Y((r),(q))
#undef s33
#define s33(r,q) Y((r),(q))=0.000000
#undef s34
#define s34(r,q,j) Y((r),(q))+=B((j),(r))*B((q),(j))
#undef s35
#define s35(r,q) V((r),(q))*=Y((r),(q))
#undef s36
#define s36(m,i,j,k,r) Cnew((k),(r))+=X((m))*B((j),(r))*A((i),(r))
#undef s37
#define s37() Vinv=pinv(V,Vinv)
#undef s38
#define s38(k,r,q) Cnew((k),(r))+=Cnew((k),(q))*Vinv((r),(q))
#undef s39
#define s39(r,k) sums((r))+=Cnew((k),(r))*Cnew((k),(r))
#undef s40
#define s40(r) lmbda((r))=sqrt(sums((r)))
#undef s41
#define s41(r,k) C((k),(r))=Cnew((k),(r))/lmbda((r))

    for(t2 = 0; t2 <= R-1; t2++) {
        for(t4 = 0; t4 <= I-1; t4++) {
            s0(t2,t4);
        }
        for(t4 = 0; t4 <= J-1; t4++) {
            s1(t2,t4);
        }
        for(t4 = 0; t4 <= K-1; t4++) {
            s2(t2,t4);
        }
        for(t4 = 0; t4 <= R-1; t4++) {
            s3(t2,t4);
            s4(t2,t4);
            for(t6 = 0; t6 <= J-1; t6++) {
                s5(t2,t4,t6);
            }
            s6(t2,t4);
            s7(t2,t4);
            for(t6 = 0; t6 <= K-1; t6++) {
                s8(t2,t4,t6);
            }
            s9(t2,t4);
        }
    }
    for(t2 = 0; t2 <= M-1; t2++) {
        t4=ind0(t2);
        t6=ind1(t2);
        t8=ind2(t2);
        for(t10 = 0; t10 <= R-1; t10++) {
            s10(t2,t4,t6,t8,t10);
        }
    }
    s11();
    for(t2 = 0; t2 <= I-1; t2++) {
        for(t4 = 0; t4 <= R-1; t4++) {
            for(t6 = 0; t6 <= R-1; t6++) {
                s12(t2,t4,t6);
            }
        }
    }
    for(t2 = 0; t2 <= R-1; t2++) {
        for(t4 = 0; t4 <= I-1; t4++) {
            s13(t2,t4);
        }
        s14(t2);
        for(t4 = 0; t4 <= I-1; t4++) {
            s15(t2,t4);
        }
    }
    for(t2 = 0; t2 <= R-1; t2++) {
        for(t4 = 0; t4 <= R-1; t4++) {
            s16(t2,t4);
            s17(t2,t4);
            for(t6 = 0; t6 <= I-1; t6++) {
                s18(t2,t4,t6);
            }
            s19(t2,t4);
            s20(t2,t4);
            for(t6 = 0; t6 <= K-1; t6++) {
                s21(t2,t4,t6);
            }
            s22(t2,t4);
        }
    }
    for(t2 = 0; t2 <= M-1; t2++) {
        t4=ind0(t2);
        t6=ind1(t2);
        t8=ind2(t2);
        for(t10 = 0; t10 <= R-1; t10++) {
            s23(t2,t4,t6,t8,t10);
        }
    }
    s24();
    for(t2 = 0; t2 <= J-1; t2++) {
        for(t4 = 0; t4 <= R-1; t4++) {
            for(t6 = 0; t6 <= R-1; t6++) {
                s25(t2,t4,t6);
            }
        }
    }
    for(t2 = 0; t2 <= R-1; t2++) {
        for(t4 = 0; t4 <= J-1; t4++) {
            s26(t2,t4);
        }
        s27(t2);
        for(t4 = 0; t4 <= J-1; t4++) {
            s28(t2,t4);
        }
    }
    for(t2 = 0; t2 <= R-1; t2++) {
        for(t4 = 0; t4 <= R-1; t4++) {
            s29(t2,t4);
            s30(t2,t4);
            for(t6 = 0; t6 <= I-1; t6++) {
                s31(t2,t4,t6);
            }
            s32(t2,t4);
            s33(t2,t4);
            for(t6 = 0; t6 <= J-1; t6++) {
                s34(t2,t4,t6);
            }
            s35(t2,t4);
        }
    }
    for(t2 = 0; t2 <= M-1; t2++) {
        t4=ind0(t2);
        t6=ind1(t2);
        t8=ind2(t2);
        for(t10 = 0; t10 <= R-1; t10++) {
            s36(t2,t4,t6,t8,t10);
        }
    }
    s37();
    for(t2 = 0; t2 <= K-1; t2++) {
        for(t4 = 0; t4 <= R-1; t4++) {
            for(t6 = 0; t6 <= R-1; t6++) {
                s38(t2,t4,t6);
            }
        }
    }
    for(t2 = 0; t2 <= R-1; t2++) {
        for(t4 = 0; t4 <= K-1; t4++) {
            s39(t2,t4);
        }
        s40(t2);
        for(t4 = 0; t4 <= K-1; t4++) {
            s41(t2,t4);
        }
    }

    free(V);
    free(Y);
    free(Anew);
    free(Vinv);
    free(sums);
    free(Bnew);
    free(Cnew);
}    // cp_als_coo

#undef min
#undef max
#undef abs
#undef floord
#undef offset2
#undef offset3
#undef offset4
#undef arrinit
#undef arrprnt
#undef urand
#undef pinv
#undef A
#undef B
#undef C
#undef V
#undef Y
#undef Anew
#undef X
#undef Vinv
#undef sums
#undef lmbda
#undef Bnew
#undef Cnew
#undef ind0
#undef ind1
#undef ind2

