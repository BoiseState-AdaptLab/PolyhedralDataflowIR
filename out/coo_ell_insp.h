// 'coo_csr_insp' code generated by 'edavis' at 09/03/2019 10:24:54
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <math.h>
#include <string.h>
#include <assert.h>

#define min(x,y) (((x)<(y))?(x):(y))
#define max(x,y) (((x)>(y))?(x):(y))
#define abs(x) ((x)<0?-(x):(x))
#define absmin(x,y) ((x)=min(abs((x)),abs((y))))
#define absmax(x,y) ((x)=max(abs((x)),abs((y))))
#define floord(x,y) ((x)/(y))
#define sgn(x) ((x)<0?-1:1)
#define offset2(i,j,M) ((j)+(i)*(M))
#define offset3(i,j,k,M,N) ((k)+((j)+(i)*(M))*(N))
#define offset4(i,j,k,l,M,N,P) ((l)+((k)+((j)+(i)*(M))*(N))*(P))
#define arrinit(ptr,val,size) for(unsigned __i__=0;__i__<(size);__i__++) (ptr)[__i__]=(val)
#define arrprnt(name,arr,size) {\
fprintf(stderr,"%s={",(name));\
for(unsigned __i__=0;__i__<(size);__i__++) fprintf(stderr,"%lg,",(arr)[__i__]);\
fprintf(stderr,"}\n");}
#define row(n) row[(n)]
#define col(n) col[(n)]
#define val(n) val[(n)]

unsigned coo_ell_insp(const unsigned M, const unsigned* row, const unsigned* col, const double* val, unsigned* N, unsigned** lcol, double** lval);
inline unsigned coo_ell_insp(const unsigned M, const unsigned* row, const unsigned* col, const double* val, unsigned* N, unsigned** lcol, double** lval) {
    unsigned t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15;
    unsigned K=0,Kest;
    unsigned k=0,p=0; //,n=0;
    unsigned size;

// inspN+inspK
#undef s0
#define s0() *N=row(M-1)+1

s0();

//Kest = (9 * (*N)) / 10;
Kest = *N / 2;
*lcol = NULL; //(unsigned*) malloc(size * sizeof(unsigned));
*lval = NULL; //(double*) malloc(size * sizeof(double));
for (t1 = 0; t1 < 32768 && (*lcol == NULL || *lval == NULL); t1++) {
  size = Kest * (*N);
  if (*lcol)
    *lcol = (unsigned*) realloc(*lcol, size * sizeof(unsigned));
  else
    *lcol = (unsigned*) malloc(size * sizeof(unsigned));
  *lval = (double*) malloc(size * sizeof(double));
  //Kest = (9 * Kest) / 10;
  Kest /= 2;
}

//fprintf(stderr,"N=%u,Kest=%u,size=%u\n",*N,Kest,size);

#undef s1
#define s1(n,i) if ((i) > p) { K=max(k+1,K); k=0; }
#undef s2
#define s2(n,i) (*lcol)[offset2((k),(i),(*N))]=col((n))
#undef s3
#define s3(n,i) (*lval)[offset2((k),(i),(*N))]=val((n))
#undef s4
#define s4(n,i) k+=1
#undef s5
#define s5(n,i) p=(i)

//#pragma omp parallel for schedule(auto) private(t2,t4)
#pragma omp simd private(t4)
for(t2 = 0; t2 <= M-1; t2++) {
  t4=row(t2);
//  t6=offset2((k),(t4),(*N));
//  if(t6>=size) fprintf(stderr,"m=%u,k=%u,i=%u,n=%u\n",t2,k,t4,t6);
  s1(t2,t4);
  s2(t2,t4);
  s3(t2,t4);
  s4(t2,t4);
  s5(t2,t4);
}

size = K * (*N);
//fprintf(stderr,"N=%u,K=%u,size=%u\n",*N,K,size);
*lcol = (unsigned*) realloc(*lcol, size * sizeof(unsigned));
*lval = (double*)  realloc(*lval, size * sizeof(double));
//assert(*lcol != NULL);
//assert(*lval != NULL);

    return (K);
}    // coo_ell_insp

#undef min
#undef max
#undef abs
#undef absmin
#undef absmax
#undef floord
#undef sgn
#undef offset2
#undef offset3
#undef offset4
#undef arrinit
#undef arrprnt
#undef row
#undef col
#undef val
