.TH "chillAST_CompoundStmt" 3 "Sun Jul 12 2020" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
chillAST_CompoundStmt
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <chill_ast\&.hh>\fP
.PP
Inherits \fBchillAST_node\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBCHILL_ASTNODE_TYPE\fP \fBgetType\fP () override"
.br
.ti -1c
.RI "bool \fBhasSymbolTable\fP () override"
.br
.ti -1c
.RI "bool \fBhasTypeDefTable\fP ()"
.br
.ti -1c
.RI "\fBchillAST_node\fP * \fBfindDatatype\fP (char *\fBt\fP) override"
.br
.ti -1c
.RI "\fBchillAST_SymbolTable\fP * \fBgetSymbolTable\fP () override"
.br
.ti -1c
.RI "\fBchillAST_SymbolTable\fP * \fBaddVariableToSymbolTable\fP (\fBchillAST_VarDecl\fP *vd) override"
.br
.ti -1c
.RI "void \fBaddTypedefToTypedefTable\fP (\fBchillAST_TypedefDecl\fP *tdd) override"
.br
.ti -1c
.RI "\fBchillAST_CompoundStmt\fP ()"
.br
.ti -1c
.RI "void \fBreplaceChild\fP (\fBchillAST_node\fP *old, \fBchillAST_node\fP *newchild) override"
.br
.ti -1c
.RI "\fBchillAST_node\fP * \fBconstantFold\fP () override"
.br
.RI "Folding constant, to some degree\&. "
.ti -1c
.RI "\fBchillAST_node\fP * \fBclone\fP () override"
.br
.ti -1c
.RI "void \fBgatherVarDeclsMore\fP (vector< \fBchillAST_VarDecl\fP * > &decls) override"
.br
.ti -1c
.RI "void \fBgatherArrayRefs\fP (std::vector< \fBchillAST_ArraySubscriptExpr\fP * > &refs, bool writtento) override"
.br
.ti -1c
.RI "void \fBgatherScalarRefs\fP (std::vector< \fBchillAST_DeclRefExpr\fP * > &refs, bool writtento) override"
.br
.ti -1c
.RI "void \fBreplaceVarDecls\fP (\fBchillAST_VarDecl\fP *olddecl, \fBchillAST_VarDecl\fP *newdecl) override"
.br
.ti -1c
.RI "bool \fBfindLoopIndexesToReplace\fP (\fBchillAST_SymbolTable\fP *symtab, bool forcesync=false) override"
.br
.RI "this just looks for ForStmts with preferred index metacomment attached "
.ti -1c
.RI "void \fBloseLoopWithLoopVar\fP (char *\fBvar\fP) override"
.br
.RI "Replace the loop with the loop body, if loop is with this variable\&. "
.ti -1c
.RI "void \fBgatherStatements\fP (std::vector< \fBchillAST_node\fP * > &statements) override"
.br
.RI "Get a vector of statements\&. "
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBchillAST_SymbolTable\fP * \fBsymbol_table\fP"
.br
.ti -1c
.RI "\fBchillAST_TypedefTable\fP * \fBtypedef_table\fP"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Constructor & Destructor Documentation"
.PP 
.SS "chillAST_CompoundStmt::chillAST_CompoundStmt ()"

.SH "Member Function Documentation"
.PP 
.SS "void chillAST_CompoundStmt::addTypedefToTypedefTable (\fBchillAST_TypedefDecl\fP * tdd)\fC [inline]\fP, \fC [override]\fP, \fC [virtual]\fP"

.PP
Reimplemented from \fBchillAST_node\fP\&.
.SS "\fBchillAST_SymbolTable\fP* chillAST_CompoundStmt::addVariableToSymbolTable (\fBchillAST_VarDecl\fP * vd)\fC [inline]\fP, \fC [override]\fP, \fC [virtual]\fP"

.PP
Reimplemented from \fBchillAST_node\fP\&.
.SS "\fBchillAST_node\fP * chillAST_CompoundStmt::clone ()\fC [override]\fP, \fC [virtual]\fP"

.PP
Reimplemented from \fBchillAST_node\fP\&.
.SS "\fBchillAST_node\fP * chillAST_CompoundStmt::constantFold ()\fC [override]\fP, \fC [virtual]\fP"

.PP
Folding constant, to some degree\&. We should need to delegate this to the backend compiler 
.PP
\fBReturns\fP
.RS 4
This node 
.RE
.PP

.PP
Reimplemented from \fBchillAST_node\fP\&.
.SS "\fBchillAST_node\fP* chillAST_CompoundStmt::findDatatype (char * t)\fC [inline]\fP, \fC [override]\fP, \fC [virtual]\fP"

.PP
Reimplemented from \fBchillAST_node\fP\&.
.SS "bool chillAST_CompoundStmt::findLoopIndexesToReplace (\fBchillAST_SymbolTable\fP * symtab, bool forcesync = \fCfalse\fP)\fC [override]\fP, \fC [virtual]\fP"

.PP
this just looks for ForStmts with preferred index metacomment attached 
.PP
Reimplemented from \fBchillAST_node\fP\&.
.SS "void chillAST_CompoundStmt::gatherArrayRefs (std::vector< \fBchillAST_ArraySubscriptExpr\fP * > & refs, bool writtento)\fC [override]\fP, \fC [virtual]\fP"

.PP
Reimplemented from \fBchillAST_node\fP\&.
.SS "void chillAST_CompoundStmt::gatherScalarRefs (std::vector< \fBchillAST_DeclRefExpr\fP * > & refs, bool writtento)\fC [override]\fP, \fC [virtual]\fP"

.PP
Reimplemented from \fBchillAST_node\fP\&.
.SS "void chillAST_CompoundStmt::gatherStatements (std::vector< \fBchillAST_node\fP * > & statements)\fC [override]\fP, \fC [virtual]\fP"

.PP
Get a vector of statements\&. 
.PP
Reimplemented from \fBchillAST_node\fP\&.
.SS "void chillAST_CompoundStmt::gatherVarDeclsMore (vector< \fBchillAST_VarDecl\fP * > & decls)\fC [inline]\fP, \fC [override]\fP, \fC [virtual]\fP"

.PP
Reimplemented from \fBchillAST_node\fP\&.
.SS "\fBchillAST_SymbolTable\fP* chillAST_CompoundStmt::getSymbolTable ()\fC [inline]\fP, \fC [override]\fP, \fC [virtual]\fP"

.PP
Reimplemented from \fBchillAST_node\fP\&.
.SS "\fBCHILL_ASTNODE_TYPE\fP chillAST_CompoundStmt::getType ()\fC [inline]\fP, \fC [override]\fP, \fC [virtual]\fP"

.PP
Reimplemented from \fBchillAST_node\fP\&.
.SS "bool chillAST_CompoundStmt::hasSymbolTable ()\fC [inline]\fP, \fC [override]\fP, \fC [virtual]\fP"

.PP
Reimplemented from \fBchillAST_node\fP\&.
.SS "bool chillAST_CompoundStmt::hasTypeDefTable ()\fC [inline]\fP"

.SS "void chillAST_CompoundStmt::loseLoopWithLoopVar (char * var)\fC [override]\fP, \fC [virtual]\fP"

.PP
Replace the loop with the loop body, if loop is with this variable\&. The loop will be spread across a bunch of cores that will each calculate their own loop variable\&.
.PP
\fBParameters\fP
.RS 4
\fIvar\fP 
.RE
.PP

.PP
Reimplemented from \fBchillAST_node\fP\&.
.SS "void chillAST_CompoundStmt::replaceChild (\fBchillAST_node\fP * old, \fBchillAST_node\fP * newchild)\fC [override]\fP, \fC [virtual]\fP"

.PP
Reimplemented from \fBchillAST_node\fP\&.
.SS "void chillAST_CompoundStmt::replaceVarDecls (\fBchillAST_VarDecl\fP * olddecl, \fBchillAST_VarDecl\fP * newdecl)\fC [override]\fP, \fC [virtual]\fP"

.PP
Reimplemented from \fBchillAST_node\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "\fBchillAST_SymbolTable\fP* chillAST_CompoundStmt::symbol_table"

.SS "\fBchillAST_TypedefTable\fP* chillAST_CompoundStmt::typedef_table"


.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
