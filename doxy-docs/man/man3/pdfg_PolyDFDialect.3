.TH "pdfg::PolyDFDialect" 3 "Sun Jul 12 2020" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
pdfg::PolyDFDialect
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Dialect\&.h>\fP
.PP
Inherits Dialect\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBPolyDFDialect\fP (mlir::MLIRContext *\fBcontext\fP)"
.br
.ti -1c
.RI "\fBmlir::Type\fP \fBparseType\fP (llvm::StringRef spec, mlir::Location \fBloc\fP) \fBconst\fP override"
.br
.RI "Parse a type registered to this dialect\&. "
.ti -1c
.RI "void \fBprintType\fP (\fBmlir::Type\fP type, llvm::raw_ostream &os) \fBconst\fP override"
.br
.RI "Print a type registered to this dialect\&. "
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static llvm::StringRef \fBgetDialectNamespace\fP ()"
.br
.in -1c
.SH "Detailed Description"
.PP 
The PolyDF Dialect is not exposed to the outside world\&. It is registered by linking and accessed via generic MLIR accessors\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "pdfg::PolyDFDialect::PolyDFDialect (mlir::MLIRContext * context)\fC [explicit]\fP"
Create a new Dialect that is registered on construction and adds the relevant types and operations\&. 
.SH "Member Function Documentation"
.PP 
.SS "static llvm::StringRef pdfg::PolyDFDialect::getDialectNamespace ()\fC [inline]\fP, \fC [static]\fP"

.SS "\fBmlir::Type\fP pdfg::PolyDFDialect::parseType (llvm::StringRef spec, mlir::Location loc) const\fC [override]\fP"

.PP
Parse a type registered to this dialect\&. 
.SS "void pdfg::PolyDFDialect::printType (\fBmlir::Type\fP type, llvm::raw_ostream & os) const\fC [override]\fP"

.PP
Print a type registered to this dialect\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
