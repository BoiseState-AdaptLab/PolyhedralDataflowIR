.TH "lib/isl/imath/gmp_compat.c" 3 "Sun Jul 12 2020" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
lib/isl/imath/gmp_compat.c
.SH SYNOPSIS
.br
.PP
\fC#include 'gmp_compat\&.h'\fP
.br
\fC#include <stdlib\&.h>\fP
.br
\fC#include <assert\&.h>\fP
.br
\fC#include <ctype\&.h>\fP
.br
\fC#include <string\&.h>\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBCHECK\fP(\fBres\fP)   assert(((\fBres\fP) == \fBMP_OK\fP) && 'expected \fBMP_OK\fP')"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBGMPQAPI\fP() \fBclear\fP (\fBmp_rat\fP \fBx\fP)"
.br
.ti -1c
.RI "int \fBGMPQAPI\fP() \fBcmp\fP (\fBmp_rat\fP op1, \fBmp_rat\fP op2)"
.br
.ti -1c
.RI "void \fBGMPQAPI\fP() \fBinit\fP (\fBmp_rat\fP \fBx\fP)"
.br
.ti -1c
.RI "void \fBGMPQAPI\fP() \fBmul\fP (\fBmp_rat\fP product, \fBmp_rat\fP multiplier, \fBmp_rat\fP multiplicand)"
.br
.ti -1c
.RI "void \fBGMPQAPI\fP() \fBset\fP (\fBmp_rat\fP rop, \fBmp_rat\fP \fBop\fP)"
.br
.ti -1c
.RI "void \fBGMPZAPI\fP() \fBabs\fP (\fBmp_int\fP rop, \fBmp_int\fP \fBop\fP)"
.br
.ti -1c
.RI "void \fBGMPZAPI\fP() \fBadd\fP (\fBmp_int\fP rop, \fBmp_int\fP op1, \fBmp_int\fP op2)"
.br
.ti -1c
.RI "void \fBGMPZAPI\fP() \fBclear\fP (\fBmp_int\fP \fBx\fP)"
.br
.ti -1c
.RI "int \fBGMPZAPI\fP() \fBcmp_si\fP (\fBmp_int\fP op1, long op2)"
.br
.ti -1c
.RI "int \fBGMPZAPI\fP() \fBcmpabs\fP (\fBmp_int\fP op1, \fBmp_int\fP op2)"
.br
.ti -1c
.RI "int \fBGMPZAPI\fP() \fBcmp\fP (\fBmp_int\fP op1, \fBmp_int\fP op2)"
.br
.ti -1c
.RI "void \fBGMPZAPI\fP() \fBinit\fP (\fBmp_int\fP \fBx\fP)"
.br
.ti -1c
.RI "void \fBGMPZAPI\fP() \fBmul\fP (\fBmp_int\fP rop, \fBmp_int\fP op1, \fBmp_int\fP op2)"
.br
.ti -1c
.RI "void \fBGMPZAPI\fP() \fBneg\fP (\fBmp_int\fP rop, \fBmp_int\fP \fBop\fP)"
.br
.ti -1c
.RI "void \fBGMPZAPI\fP() \fBset_si\fP (\fBmp_int\fP rop, long \fBop\fP)"
.br
.ti -1c
.RI "void \fBGMPZAPI\fP() \fBset\fP (\fBmp_int\fP rop, \fBmp_int\fP \fBop\fP)"
.br
.ti -1c
.RI "void \fBGMPZAPI\fP() \fBsub\fP (\fBmp_int\fP rop, \fBmp_int\fP op1, \fBmp_int\fP op2)"
.br
.ti -1c
.RI "void \fBGMPZAPI\fP() \fBswap\fP (\fBmp_int\fP rop1, \fBmp_int\fP rop2)"
.br
.ti -1c
.RI "int \fBGMPQAPI\fP() \fBsgn\fP (\fBmp_rat\fP \fBop\fP)"
.br
.ti -1c
.RI "int \fBGMPZAPI\fP() \fBsgn\fP (\fBmp_int\fP \fBop\fP)"
.br
.ti -1c
.RI "void \fBGMPQAPI\fP() \fBset_ui\fP (\fBmp_rat\fP rop, unsigned long op1, unsigned long op2)"
.br
.ti -1c
.RI "void \fBGMPZAPI\fP() \fBset_ui\fP (\fBmp_int\fP rop, unsigned long \fBop\fP)"
.br
.ti -1c
.RI "\fBmp_int\fP \fBGMPQAPI\fP() \fBdenref\fP (\fBmp_rat\fP \fBop\fP)"
.br
.ti -1c
.RI "\fBmp_int\fP \fBGMPQAPI\fP() \fBnumref\fP (\fBmp_rat\fP \fBop\fP)"
.br
.ti -1c
.RI "void \fBGMPQAPI\fP() \fBcanonicalize\fP (\fBmp_rat\fP \fBop\fP)"
.br
.ti -1c
.RI "void \fBGMPZAPI\fP() \fBaddmul\fP (\fBmp_int\fP rop, \fBmp_int\fP op1, \fBmp_int\fP op2)"
.br
.ti -1c
.RI "void \fBGMPZAPI\fP() \fBdivexact\fP (\fBmp_int\fP q, \fBmp_int\fP \fBn\fP, \fBmp_int\fP d)"
.br
.ti -1c
.RI "int \fBGMPZAPI\fP() \fBdivisible_p\fP (\fBmp_int\fP \fBn\fP, \fBmp_int\fP d)"
.br
.ti -1c
.RI "void \fBGMPZAPI\fP() \fBsubmul\fP (\fBmp_int\fP rop, \fBmp_int\fP op1, \fBmp_int\fP op2)"
.br
.ti -1c
.RI "void \fBGMPZAPI\fP() \fBadd_ui\fP (\fBmp_int\fP rop, \fBmp_int\fP op1, unsigned long op2)"
.br
.ti -1c
.RI "void \fBGMPZAPI\fP() \fBdivexact_ui\fP (\fBmp_int\fP q, \fBmp_int\fP \fBn\fP, unsigned long d)"
.br
.ti -1c
.RI "void \fBGMPZAPI\fP() \fBmul_ui\fP (\fBmp_int\fP rop, \fBmp_int\fP op1, unsigned long op2)"
.br
.ti -1c
.RI "void \fBGMPZAPI\fP() \fBpow_ui\fP (\fBmp_int\fP rop, \fBmp_int\fP base, unsigned long exp)"
.br
.ti -1c
.RI "void \fBGMPZAPI\fP() \fBsub_ui\fP (\fBmp_int\fP rop, \fBmp_int\fP op1, unsigned long op2)"
.br
.ti -1c
.RI "void \fBGMPZAPI\fP() \fBgcd\fP (\fBmp_int\fP rop, \fBmp_int\fP op1, \fBmp_int\fP op2)"
.br
.ti -1c
.RI "char *\fBGMPZAPI\fP() \fBget_str\fP (char *\fBstr\fP, int radix, \fBmp_int\fP \fBop\fP)"
.br
.ti -1c
.RI "char *\fBGMPQAPI\fP() \fBget_str\fP (char *\fBstr\fP, int radix, \fBmp_rat\fP \fBop\fP)"
.br
.ti -1c
.RI "int \fBGMPZAPI\fP() \fBset_str\fP (\fBmp_int\fP rop, char *\fBstr\fP, int base)"
.br
.ti -1c
.RI "int \fBGMPQAPI\fP() \fBset_str\fP (\fBmp_rat\fP rop, char *s, int base)"
.br
.ti -1c
.RI "unsigned long \fBGMPZAPI\fP() \fBget_ui\fP (\fBmp_int\fP \fBop\fP)"
.br
.ti -1c
.RI "long \fBGMPZAPI\fP() \fBget_si\fP (\fBmp_int\fP \fBop\fP)"
.br
.ti -1c
.RI "void \fBGMPZAPI\fP() \fBlcm\fP (\fBmp_int\fP rop, \fBmp_int\fP op1, \fBmp_int\fP op2)"
.br
.ti -1c
.RI "void \fBGMPZAPI\fP() \fBmul_2exp\fP (\fBmp_int\fP rop, \fBmp_int\fP op1, unsigned long op2)"
.br
.ti -1c
.RI "void \fBGMPZAPI\fP() \fBcdiv_q\fP (\fBmp_int\fP q, \fBmp_int\fP \fBn\fP, \fBmp_int\fP d)"
.br
.ti -1c
.RI "void \fBGMPZAPI\fP() \fBfdiv_q\fP (\fBmp_int\fP q, \fBmp_int\fP \fBn\fP, \fBmp_int\fP d)"
.br
.ti -1c
.RI "void \fBGMPZAPI\fP() \fBfdiv_r\fP (\fBmp_int\fP r, \fBmp_int\fP \fBn\fP, \fBmp_int\fP d)"
.br
.ti -1c
.RI "void \fBGMPZAPI\fP() \fBtdiv_q\fP (\fBmp_int\fP q, \fBmp_int\fP \fBn\fP, \fBmp_int\fP d)"
.br
.ti -1c
.RI "unsigned long \fBGMPZAPI\fP() \fBfdiv_q_ui\fP (\fBmp_int\fP q, \fBmp_int\fP \fBn\fP, unsigned long d)"
.br
.ti -1c
.RI "void *\fBGMPZAPI\fP() \fBexport\fP (void *rop, size_t *countp, int order, size_t \fBsize\fP, int endian, size_t nails, \fBmp_int\fP \fBop\fP)"
.br
.ti -1c
.RI "void \fBGMPZAPI\fP() \fBimport\fP (\fBmp_int\fP rop, size_t \fBcount\fP, int order, size_t \fBsize\fP, int endian, size_t nails, \fBconst\fP void *\fBop\fP)"
.br
.ti -1c
.RI "size_t \fBGMPZAPI\fP() \fBsizeinbase\fP (\fBmp_int\fP \fBop\fP, int base)"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define CHECK(\fBres\fP)   assert(((\fBres\fP) == \fBMP_OK\fP) && 'expected \fBMP_OK\fP')"

.SH "Function Documentation"
.PP 
.SS "void \fBGMPZAPI\fP() abs (\fBmp_int\fP rop, \fBmp_int\fP op)"

.SS "void \fBGMPZAPI\fP() add (\fBmp_int\fP rop, \fBmp_int\fP op1, \fBmp_int\fP op2)"

.SS "void \fBGMPZAPI\fP() add_ui (\fBmp_int\fP rop, \fBmp_int\fP op1, unsigned long op2)"

.SS "void \fBGMPZAPI\fP() addmul (\fBmp_int\fP rop, \fBmp_int\fP op1, \fBmp_int\fP op2)"

.SS "void \fBGMPQAPI\fP() canonicalize (\fBmp_rat\fP op)"

.SS "void \fBGMPZAPI\fP() cdiv_q (\fBmp_int\fP q, \fBmp_int\fP n, \fBmp_int\fP d)"

.SS "void \fBGMPZAPI\fP() clear (\fBmp_int\fP x)"

.SS "void \fBGMPQAPI\fP() clear (\fBmp_rat\fP x)"

.SS "int \fBGMPZAPI\fP() cmp (\fBmp_int\fP op1, \fBmp_int\fP op2)"

.SS "int \fBGMPQAPI\fP() cmp (\fBmp_rat\fP op1, \fBmp_rat\fP op2)"

.SS "int \fBGMPZAPI\fP() cmp_si (\fBmp_int\fP op1, long op2)"

.SS "int \fBGMPZAPI\fP() cmpabs (\fBmp_int\fP op1, \fBmp_int\fP op2)"

.SS "\fBmp_int\fP \fBGMPQAPI\fP() denref (\fBmp_rat\fP op)"

.SS "void \fBGMPZAPI\fP() divexact (\fBmp_int\fP q, \fBmp_int\fP n, \fBmp_int\fP d)"

.SS "void \fBGMPZAPI\fP() divexact_ui (\fBmp_int\fP q, \fBmp_int\fP n, unsigned long d)"

.SS "int \fBGMPZAPI\fP() divisible_p (\fBmp_int\fP n, \fBmp_int\fP d)"

.SS "void* \fBGMPZAPI\fP() export (void * rop, size_t * countp, int order, size_t size, int endian, size_t nails, \fBmp_int\fP op)"

.SS "void \fBGMPZAPI\fP() fdiv_q (\fBmp_int\fP q, \fBmp_int\fP n, \fBmp_int\fP d)"

.SS "unsigned long \fBGMPZAPI\fP() fdiv_q_ui (\fBmp_int\fP q, \fBmp_int\fP n, unsigned long d)"

.SS "void \fBGMPZAPI\fP() fdiv_r (\fBmp_int\fP r, \fBmp_int\fP n, \fBmp_int\fP d)"

.SS "void \fBGMPZAPI\fP() gcd (\fBmp_int\fP rop, \fBmp_int\fP op1, \fBmp_int\fP op2)"

.SS "long \fBGMPZAPI\fP() get_si (\fBmp_int\fP op)"

.SS "char* \fBGMPZAPI\fP() get_str (char * str, int radix, \fBmp_int\fP op)"

.SS "char* \fBGMPQAPI\fP() get_str (char * str, int radix, \fBmp_rat\fP op)"

.SS "unsigned long \fBGMPZAPI\fP() get_ui (\fBmp_int\fP op)"

.SS "void \fBGMPZAPI\fP() import (\fBmp_int\fP rop, size_t count, int order, size_t size, int endian, size_t nails, \fBconst\fP void * op)"

.SS "void \fBGMPZAPI\fP() init (\fBmp_int\fP x)"

.SS "void \fBGMPQAPI\fP() init (\fBmp_rat\fP x)"

.SS "void \fBGMPZAPI\fP() lcm (\fBmp_int\fP rop, \fBmp_int\fP op1, \fBmp_int\fP op2)"

.SS "void \fBGMPZAPI\fP() mul (\fBmp_int\fP rop, \fBmp_int\fP op1, \fBmp_int\fP op2)"

.SS "void \fBGMPQAPI\fP() mul (\fBmp_rat\fP product, \fBmp_rat\fP multiplier, \fBmp_rat\fP multiplicand)"

.SS "void \fBGMPZAPI\fP() mul_2exp (\fBmp_int\fP rop, \fBmp_int\fP op1, unsigned long op2)"

.SS "void \fBGMPZAPI\fP() mul_ui (\fBmp_int\fP rop, \fBmp_int\fP op1, unsigned long op2)"

.SS "void \fBGMPZAPI\fP() neg (\fBmp_int\fP rop, \fBmp_int\fP op)"

.SS "\fBmp_int\fP \fBGMPQAPI\fP() numref (\fBmp_rat\fP op)"

.SS "void \fBGMPZAPI\fP() pow_ui (\fBmp_int\fP rop, \fBmp_int\fP base, unsigned long exp)"

.SS "void \fBGMPZAPI\fP() set (\fBmp_int\fP rop, \fBmp_int\fP op)"

.SS "void \fBGMPQAPI\fP() set (\fBmp_rat\fP rop, \fBmp_rat\fP op)"

.SS "void \fBGMPZAPI\fP() set_si (\fBmp_int\fP rop, long op)"

.SS "int \fBGMPZAPI\fP() set_str (\fBmp_int\fP rop, char * str, int base)"

.SS "int \fBGMPQAPI\fP() set_str (\fBmp_rat\fP rop, char * s, int base)"

.SS "void \fBGMPZAPI\fP() set_ui (\fBmp_int\fP rop, unsigned long op)"

.SS "void \fBGMPQAPI\fP() set_ui (\fBmp_rat\fP rop, unsigned long op1, unsigned long op2)"

.SS "int \fBGMPZAPI\fP() sgn (\fBmp_int\fP op)"

.SS "int \fBGMPQAPI\fP() sgn (\fBmp_rat\fP op)"

.SS "size_t \fBGMPZAPI\fP() sizeinbase (\fBmp_int\fP op, int base)"

.SS "void \fBGMPZAPI\fP() sub (\fBmp_int\fP rop, \fBmp_int\fP op1, \fBmp_int\fP op2)"

.SS "void \fBGMPZAPI\fP() sub_ui (\fBmp_int\fP rop, \fBmp_int\fP op1, unsigned long op2)"

.SS "void \fBGMPZAPI\fP() submul (\fBmp_int\fP rop, \fBmp_int\fP op1, \fBmp_int\fP op2)"

.SS "void \fBGMPZAPI\fP() swap (\fBmp_int\fP rop1, \fBmp_int\fP rop2)"

.SS "void \fBGMPZAPI\fP() tdiv_q (\fBmp_int\fP q, \fBmp_int\fP n, \fBmp_int\fP d)"

.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
