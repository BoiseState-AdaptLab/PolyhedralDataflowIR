.TH "lib/isl/isl_int_sioimath.h" 3 "Sun Jul 12 2020" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
lib/isl/isl_int_sioimath.h
.SH SYNOPSIS
.br
.PP
\fC#include <inttypes\&.h>\fP
.br
\fC#include <limits\&.h>\fP
.br
\fC#include <stdint\&.h>\fP
.br
\fC#include <stdlib\&.h>\fP
.br
\fC#include <isl_imath\&.h>\fP
.br
\fC#include <isl/hash\&.h>\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBisl_sioimath_scratchspace_t\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBARRAY_SIZE\fP(array)   (sizeof(array)/sizeof(*array))"
.br
.ti -1c
.RI "#define \fBISL_SIOIMATH_SMALL_MIN\fP   (\-\fBINT32_MAX\fP)"
.br
.ti -1c
.RI "#define \fBISL_SIOIMATH_SMALL_MAX\fP   \fBINT32_MAX\fP"
.br
.ti -1c
.RI "#define \fBISL_SIOIMATH_TO_DIGITS\fP(\fBnum\fP,  digits,  used)"
.br
.ti -1c
.RI "#define \fBisl_int_init\fP(\fBi\fP)   \fBisl_sioimath_init\fP((\fBi\fP))"
.br
.ti -1c
.RI "#define \fBisl_int_clear\fP(\fBi\fP)   \fBisl_sioimath_clear\fP((\fBi\fP))"
.br
.ti -1c
.RI "#define \fBisl_int_set\fP(r,  \fBi\fP)   \fBisl_sioimath_set\fP((r), *(\fBi\fP))"
.br
.ti -1c
.RI "#define \fBisl_int_set_si\fP(r,  \fBi\fP)   \fBisl_sioimath_set_si\fP((r), \fBi\fP)"
.br
.ti -1c
.RI "#define \fBisl_int_set_ui\fP(r,  \fBi\fP)   \fBisl_sioimath_set_ui\fP((r), \fBi\fP)"
.br
.ti -1c
.RI "#define \fBisl_int_fits_slong\fP(r)   \fBisl_sioimath_fits_slong\fP(*(r))"
.br
.ti -1c
.RI "#define \fBisl_int_get_si\fP(r)   \fBisl_sioimath_get_si\fP(*(r))"
.br
.ti -1c
.RI "#define \fBisl_int_fits_ulong\fP(r)   \fBisl_sioimath_fits_ulong\fP(*(r))"
.br
.ti -1c
.RI "#define \fBisl_int_get_ui\fP(r)   \fBisl_sioimath_get_ui\fP(*(r))"
.br
.ti -1c
.RI "#define \fBisl_int_get_d\fP(r)   \fBisl_sioimath_get_d\fP(*(r))"
.br
.ti -1c
.RI "#define \fBisl_int_get_str\fP(r)   \fBisl_sioimath_get_str\fP(*(r))"
.br
.ti -1c
.RI "#define \fBisl_int_abs\fP(r,  \fBi\fP)   \fBisl_sioimath_abs\fP((r), *(\fBi\fP))"
.br
.ti -1c
.RI "#define \fBisl_int_neg\fP(r,  \fBi\fP)   \fBisl_sioimath_neg\fP((r), *(\fBi\fP))"
.br
.ti -1c
.RI "#define \fBisl_int_swap\fP(\fBi\fP,  \fBj\fP)   \fBisl_sioimath_swap\fP((\fBi\fP), (\fBj\fP))"
.br
.ti -1c
.RI "#define \fBisl_int_swap_or_set\fP(\fBi\fP,  \fBj\fP)   \fBisl_sioimath_swap\fP((\fBi\fP), (\fBj\fP))"
.br
.ti -1c
.RI "#define \fBisl_int_add_ui\fP(r,  \fBi\fP,  \fBj\fP)   \fBisl_sioimath_add_ui\fP((r), *(\fBi\fP), \fBj\fP)"
.br
.ti -1c
.RI "#define \fBisl_int_sub_ui\fP(r,  \fBi\fP,  \fBj\fP)   \fBisl_sioimath_sub_ui\fP((r), *(\fBi\fP), \fBj\fP)"
.br
.ti -1c
.RI "#define \fBisl_int_add\fP(r,  \fBi\fP,  \fBj\fP)   \fBisl_sioimath_add\fP((r), *(\fBi\fP), *(\fBj\fP))"
.br
.ti -1c
.RI "#define \fBisl_int_sub\fP(r,  \fBi\fP,  \fBj\fP)   \fBisl_sioimath_sub\fP((r), *(\fBi\fP), *(\fBj\fP))"
.br
.ti -1c
.RI "#define \fBisl_int_mul\fP(r,  \fBi\fP,  \fBj\fP)   \fBisl_sioimath_mul\fP((r), *(\fBi\fP), *(\fBj\fP))"
.br
.ti -1c
.RI "#define \fBisl_int_mul_2exp\fP(r,  \fBi\fP,  \fBj\fP)   \fBisl_sioimath_mul_2exp\fP((r), *(\fBi\fP), \fBj\fP)"
.br
.ti -1c
.RI "#define \fBisl_int_mul_si\fP(r,  \fBi\fP,  \fBj\fP)   \fBisl_sioimath_mul_si\fP((r), *(\fBi\fP), \fBj\fP)"
.br
.ti -1c
.RI "#define \fBisl_int_mul_ui\fP(r,  \fBi\fP,  \fBj\fP)   \fBisl_sioimath_mul_ui\fP((r), *(\fBi\fP), \fBj\fP)"
.br
.ti -1c
.RI "#define \fBisl_int_pow_ui\fP(r,  \fBi\fP,  \fBj\fP)   \fBisl_sioimath_pow_ui\fP((r), *(\fBi\fP), \fBj\fP)"
.br
.ti -1c
.RI "#define \fBisl_int_addmul\fP(r,  \fBi\fP,  \fBj\fP)   \fBisl_sioimath_addmul\fP((r), *(\fBi\fP), *(\fBj\fP))"
.br
.ti -1c
.RI "#define \fBisl_int_addmul_ui\fP(r,  \fBi\fP,  \fBj\fP)   \fBisl_sioimath_addmul_ui\fP((r), *(\fBi\fP), \fBj\fP)"
.br
.ti -1c
.RI "#define \fBisl_int_submul\fP(r,  \fBi\fP,  \fBj\fP)   \fBisl_sioimath_submul\fP((r), *(\fBi\fP), *(\fBj\fP))"
.br
.ti -1c
.RI "#define \fBisl_int_submul_ui\fP(r,  \fBi\fP,  \fBj\fP)   \fBisl_sioimath_submul_ui\fP((r), *(\fBi\fP), \fBj\fP)"
.br
.ti -1c
.RI "#define \fBisl_int_gcd\fP(r,  \fBi\fP,  \fBj\fP)   \fBisl_sioimath_gcd\fP((r), *(\fBi\fP), *(\fBj\fP))"
.br
.ti -1c
.RI "#define \fBisl_int_lcm\fP(r,  \fBi\fP,  \fBj\fP)   \fBisl_sioimath_lcm\fP((r), *(\fBi\fP), *(\fBj\fP))"
.br
.ti -1c
.RI "#define \fBisl_int_divexact\fP(r,  \fBi\fP,  \fBj\fP)   \fBisl_sioimath_tdiv_q\fP((r), *(\fBi\fP), *(\fBj\fP))"
.br
.ti -1c
.RI "#define \fBisl_int_divexact_ui\fP(r,  \fBi\fP,  \fBj\fP)   \fBisl_sioimath_tdiv_q_ui\fP((r), *(\fBi\fP), \fBj\fP)"
.br
.ti -1c
.RI "#define \fBisl_int_tdiv_q\fP(r,  \fBi\fP,  \fBj\fP)   \fBisl_sioimath_tdiv_q\fP((r), *(\fBi\fP), *(\fBj\fP))"
.br
.ti -1c
.RI "#define \fBisl_int_cdiv_q\fP(r,  \fBi\fP,  \fBj\fP)   \fBisl_sioimath_cdiv_q\fP((r), *(\fBi\fP), *(\fBj\fP))"
.br
.ti -1c
.RI "#define \fBisl_int_fdiv_q\fP(r,  \fBi\fP,  \fBj\fP)   \fBisl_sioimath_fdiv_q\fP((r), *(\fBi\fP), *(\fBj\fP))"
.br
.ti -1c
.RI "#define \fBisl_int_fdiv_r\fP(r,  \fBi\fP,  \fBj\fP)   \fBisl_sioimath_fdiv_r\fP((r), *(\fBi\fP), *(\fBj\fP))"
.br
.ti -1c
.RI "#define \fBisl_int_fdiv_q_ui\fP(r,  \fBi\fP,  \fBj\fP)   \fBisl_sioimath_fdiv_q_ui\fP((r), *(\fBi\fP), \fBj\fP)"
.br
.ti -1c
.RI "#define \fBisl_int_read\fP(r,  s)   \fBisl_sioimath_read\fP((r), s)"
.br
.ti -1c
.RI "#define \fBisl_int_sgn\fP(\fBi\fP)   \fBisl_sioimath_sgn\fP(*(\fBi\fP))"
.br
.ti -1c
.RI "#define \fBisl_int_cmp\fP(\fBi\fP,  \fBj\fP)   \fBisl_sioimath_cmp\fP(*(\fBi\fP), *(\fBj\fP))"
.br
.ti -1c
.RI "#define \fBisl_int_cmp_si\fP(\fBi\fP,  si)   \fBisl_sioimath_cmp_si\fP(*(\fBi\fP), si)"
.br
.ti -1c
.RI "#define \fBisl_int_eq\fP(\fBi\fP,  \fBj\fP)   (\fBisl_sioimath_cmp\fP(*(\fBi\fP), *(\fBj\fP)) == 0)"
.br
.ti -1c
.RI "#define \fBisl_int_ne\fP(\fBi\fP,  \fBj\fP)   (\fBisl_sioimath_cmp\fP(*(\fBi\fP), *(\fBj\fP)) != 0)"
.br
.ti -1c
.RI "#define \fBisl_int_lt\fP(\fBi\fP,  \fBj\fP)   (\fBisl_sioimath_cmp\fP(*(\fBi\fP), *(\fBj\fP)) < 0)"
.br
.ti -1c
.RI "#define \fBisl_int_le\fP(\fBi\fP,  \fBj\fP)   (\fBisl_sioimath_cmp\fP(*(\fBi\fP), *(\fBj\fP)) <= 0)"
.br
.ti -1c
.RI "#define \fBisl_int_gt\fP(\fBi\fP,  \fBj\fP)   (\fBisl_sioimath_cmp\fP(*(\fBi\fP), *(\fBj\fP)) > 0)"
.br
.ti -1c
.RI "#define \fBisl_int_ge\fP(\fBi\fP,  \fBj\fP)   (\fBisl_sioimath_cmp\fP(*(\fBi\fP), *(\fBj\fP)) >= 0)"
.br
.ti -1c
.RI "#define \fBisl_int_abs_cmp\fP(\fBi\fP,  \fBj\fP)   \fBisl_sioimath_abs_cmp\fP(*(\fBi\fP), *(\fBj\fP))"
.br
.ti -1c
.RI "#define \fBisl_int_abs_eq\fP(\fBi\fP,  \fBj\fP)   (\fBisl_sioimath_abs_cmp\fP(*(\fBi\fP), *(\fBj\fP)) == 0)"
.br
.ti -1c
.RI "#define \fBisl_int_abs_ne\fP(\fBi\fP,  \fBj\fP)   (\fBisl_sioimath_abs_cmp\fP(*(\fBi\fP), *(\fBj\fP)) != 0)"
.br
.ti -1c
.RI "#define \fBisl_int_abs_lt\fP(\fBi\fP,  \fBj\fP)   (\fBisl_sioimath_abs_cmp\fP(*(\fBi\fP), *(\fBj\fP)) < 0)"
.br
.ti -1c
.RI "#define \fBisl_int_abs_gt\fP(\fBi\fP,  \fBj\fP)   (\fBisl_sioimath_abs_cmp\fP(*(\fBi\fP), *(\fBj\fP)) > 0)"
.br
.ti -1c
.RI "#define \fBisl_int_abs_ge\fP(\fBi\fP,  \fBj\fP)   (\fBisl_sioimath_abs_cmp\fP(*(\fBi\fP), *(\fBj\fP)) >= 0)"
.br
.ti -1c
.RI "#define \fBisl_int_is_divisible_by\fP(\fBi\fP,  \fBj\fP)   \fBisl_sioimath_is_divisible_by\fP(*(\fBi\fP), *(\fBj\fP))"
.br
.ti -1c
.RI "#define \fBisl_int_hash\fP(v,  h)   \fBisl_sioimath_hash\fP(*(v), h)"
.br
.ti -1c
.RI "#define \fBisl_int_free_str\fP(s)   \fBfree\fP(s)"
.br
.ti -1c
.RI "#define \fBisl_int_print\fP(out,  \fBi\fP,  width)   \fBisl_sioimath_print\fP(out, *(\fBi\fP), width)"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef uintptr_t \fBisl_sioimath\fP"
.br
.ti -1c
.RI "typedef \fBisl_sioimath\fP * \fBisl_sioimath_ptr\fP"
.br
.ti -1c
.RI "typedef \fBisl_sioimath\fP \fBisl_sioimath_src\fP"
.br
.ti -1c
.RI "typedef \fBisl_sioimath\fP \fBisl_int\fP[1]"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBisl_sioimath_is_small\fP (\fBisl_sioimath\fP \fBval\fP)"
.br
.ti -1c
.RI "int \fBisl_sioimath_is_big\fP (\fBisl_sioimath\fP \fBval\fP)"
.br
.ti -1c
.RI "int32_t \fBisl_sioimath_get_small\fP (\fBisl_sioimath\fP \fBval\fP)"
.br
.ti -1c
.RI "\fBmp_int\fP \fBisl_sioimath_get_big\fP (\fBisl_sioimath\fP \fBval\fP)"
.br
.ti -1c
.RI "int \fBisl_sioimath_decode_small\fP (\fBisl_sioimath\fP \fBval\fP, int32_t *small)"
.br
.ti -1c
.RI "int \fBisl_sioimath_decode_big\fP (\fBisl_sioimath\fP \fBval\fP, \fBmp_int\fP *big)"
.br
.ti -1c
.RI "\fBisl_sioimath\fP \fBisl_sioimath_encode_small\fP (int32_t \fBval\fP)"
.br
.ti -1c
.RI "\fBisl_sioimath\fP \fBisl_sioimath_encode_big\fP (\fBmp_int\fP \fBval\fP)"
.br
.ti -1c
.RI "void \fBisl_siomath_uint32_to_digits\fP (uint32_t \fBnum\fP, \fBmp_digit\fP *digits, \fBmp_size\fP *used)"
.br
.ti -1c
.RI "void \fBisl_siomath_ulong_to_digits\fP (unsigned long \fBnum\fP, \fBmp_digit\fP *digits, \fBmp_size\fP *used)"
.br
.ti -1c
.RI "void \fBisl_siomath_uint64_to_digits\fP (uint64_t \fBnum\fP, \fBmp_digit\fP *digits, \fBmp_size\fP *used)"
.br
.ti -1c
.RI "\fBmp_int\fP \fBisl_sioimath_bigarg_src\fP (\fBisl_sioimath\fP \fBarg\fP, \fBisl_sioimath_scratchspace_t\fP *scratch)"
.br
.ti -1c
.RI "\fBmp_int\fP \fBisl_sioimath_siarg_src\fP (signed long \fBarg\fP, \fBisl_sioimath_scratchspace_t\fP *scratch)"
.br
.ti -1c
.RI "\fBmp_int\fP \fBisl_sioimath_si64arg_src\fP (int64_t \fBarg\fP, \fBisl_sioimath_scratchspace_t\fP *scratch)"
.br
.ti -1c
.RI "\fBmp_int\fP \fBisl_sioimath_uiarg_src\fP (unsigned long \fBarg\fP, \fBisl_sioimath_scratchspace_t\fP *scratch)"
.br
.ti -1c
.RI "\fBmp_int\fP \fBisl_sioimath_reinit_big\fP (\fBisl_sioimath_ptr\fP ptr)"
.br
.ti -1c
.RI "void \fBisl_sioimath_set_small\fP (\fBisl_sioimath_ptr\fP ptr, int32_t \fBval\fP)"
.br
.ti -1c
.RI "void \fBisl_sioimath_set_int32\fP (\fBisl_sioimath_ptr\fP ptr, int32_t \fBval\fP)"
.br
.ti -1c
.RI "void \fBisl_sioimath_set_int64\fP (\fBisl_sioimath_ptr\fP ptr, int64_t \fBval\fP)"
.br
.ti -1c
.RI "void \fBisl_sioimath_promote\fP (\fBisl_sioimath_ptr\fP dst)"
.br
.ti -1c
.RI "void \fBisl_sioimath_try_demote\fP (\fBisl_sioimath_ptr\fP dst)"
.br
.ti -1c
.RI "void \fBisl_sioimath_init\fP (\fBisl_sioimath_ptr\fP dst)"
.br
.ti -1c
.RI "void \fBisl_sioimath_clear\fP (\fBisl_sioimath_ptr\fP dst)"
.br
.ti -1c
.RI "void \fBisl_sioimath_set\fP (\fBisl_sioimath_ptr\fP dst, \fBisl_sioimath_src\fP \fBval\fP)"
.br
.ti -1c
.RI "void \fBisl_sioimath_set_si\fP (\fBisl_sioimath_ptr\fP dst, long \fBval\fP)"
.br
.ti -1c
.RI "void \fBisl_sioimath_set_ui\fP (\fBisl_sioimath_ptr\fP dst, unsigned long \fBval\fP)"
.br
.ti -1c
.RI "int \fBisl_sioimath_fits_slong\fP (\fBisl_sioimath_src\fP \fBval\fP)"
.br
.ti -1c
.RI "long \fBisl_sioimath_get_si\fP (\fBisl_sioimath_src\fP \fBval\fP)"
.br
.ti -1c
.RI "int \fBisl_sioimath_fits_ulong\fP (\fBisl_sioimath_src\fP \fBval\fP)"
.br
.ti -1c
.RI "unsigned long \fBisl_sioimath_get_ui\fP (\fBisl_sioimath_src\fP \fBval\fP)"
.br
.ti -1c
.RI "double \fBisl_sioimath_get_d\fP (\fBisl_sioimath_src\fP \fBval\fP)"
.br
.ti -1c
.RI "char * \fBisl_sioimath_get_str\fP (\fBisl_sioimath_src\fP \fBval\fP)"
.br
.ti -1c
.RI "void \fBisl_sioimath_abs\fP (\fBisl_sioimath_ptr\fP dst, \fBisl_sioimath_src\fP \fBarg\fP)"
.br
.ti -1c
.RI "void \fBisl_sioimath_neg\fP (\fBisl_sioimath_ptr\fP dst, \fBisl_sioimath_src\fP \fBarg\fP)"
.br
.ti -1c
.RI "void \fBisl_sioimath_swap\fP (\fBisl_sioimath_ptr\fP \fBlhs\fP, \fBisl_sioimath_ptr\fP \fBrhs\fP)"
.br
.ti -1c
.RI "void \fBisl_sioimath_add_ui\fP (\fBisl_sioimath_ptr\fP dst, \fBisl_sioimath\fP \fBlhs\fP, unsigned long \fBrhs\fP)"
.br
.ti -1c
.RI "void \fBisl_sioimath_sub_ui\fP (\fBisl_sioimath_ptr\fP dst, \fBisl_sioimath\fP \fBlhs\fP, unsigned long \fBrhs\fP)"
.br
.ti -1c
.RI "void \fBisl_sioimath_add\fP (\fBisl_sioimath_ptr\fP dst, \fBisl_sioimath_src\fP \fBlhs\fP, \fBisl_sioimath_src\fP \fBrhs\fP)"
.br
.ti -1c
.RI "void \fBisl_sioimath_sub\fP (\fBisl_sioimath_ptr\fP dst, \fBisl_sioimath_src\fP \fBlhs\fP, \fBisl_sioimath_src\fP \fBrhs\fP)"
.br
.ti -1c
.RI "void \fBisl_sioimath_mul\fP (\fBisl_sioimath_ptr\fP dst, \fBisl_sioimath_src\fP \fBlhs\fP, \fBisl_sioimath_src\fP \fBrhs\fP)"
.br
.ti -1c
.RI "void \fBisl_sioimath_mul_2exp\fP (\fBisl_sioimath_ptr\fP dst, \fBisl_sioimath\fP \fBlhs\fP, unsigned long \fBrhs\fP)"
.br
.ti -1c
.RI "void \fBisl_sioimath_mul_si\fP (\fBisl_sioimath_ptr\fP dst, \fBisl_sioimath\fP \fBlhs\fP, signed long \fBrhs\fP)"
.br
.ti -1c
.RI "void \fBisl_sioimath_mul_ui\fP (\fBisl_sioimath_ptr\fP dst, \fBisl_sioimath\fP \fBlhs\fP, unsigned long \fBrhs\fP)"
.br
.ti -1c
.RI "void \fBisl_sioimath_pow_ui\fP (\fBisl_sioimath_ptr\fP dst, \fBisl_sioimath_src\fP \fBlhs\fP, unsigned long \fBrhs\fP)"
.br
.ti -1c
.RI "void \fBisl_sioimath_addmul\fP (\fBisl_sioimath_ptr\fP dst, \fBisl_sioimath_src\fP \fBlhs\fP, \fBisl_sioimath_src\fP \fBrhs\fP)"
.br
.ti -1c
.RI "void \fBisl_sioimath_addmul_ui\fP (\fBisl_sioimath_ptr\fP dst, \fBisl_sioimath_src\fP \fBlhs\fP, unsigned long \fBrhs\fP)"
.br
.ti -1c
.RI "void \fBisl_sioimath_submul\fP (\fBisl_sioimath_ptr\fP dst, \fBisl_sioimath_src\fP \fBlhs\fP, \fBisl_sioimath_src\fP \fBrhs\fP)"
.br
.ti -1c
.RI "void \fBisl_sioimath_submul_ui\fP (\fBisl_sioimath_ptr\fP dst, \fBisl_sioimath_src\fP \fBlhs\fP, unsigned long \fBrhs\fP)"
.br
.ti -1c
.RI "void \fBisl_sioimath_gcd\fP (\fBisl_sioimath_ptr\fP dst, \fBisl_sioimath_src\fP \fBlhs\fP, \fBisl_sioimath_src\fP \fBrhs\fP)"
.br
.ti -1c
.RI "void \fBisl_sioimath_lcm\fP (\fBisl_sioimath_ptr\fP dst, \fBisl_sioimath_src\fP \fBlhs\fP, \fBisl_sioimath_src\fP \fBrhs\fP)"
.br
.ti -1c
.RI "void \fBisl_sioimath_tdiv_q\fP (\fBisl_sioimath_ptr\fP dst, \fBisl_sioimath_src\fP \fBlhs\fP, \fBisl_sioimath_src\fP \fBrhs\fP)"
.br
.ti -1c
.RI "void \fBisl_sioimath_tdiv_q_ui\fP (\fBisl_sioimath_ptr\fP dst, \fBisl_sioimath_src\fP \fBlhs\fP, unsigned long \fBrhs\fP)"
.br
.ti -1c
.RI "void \fBisl_sioimath_cdiv_q\fP (\fBisl_sioimath_ptr\fP dst, \fBisl_sioimath_src\fP \fBlhs\fP, \fBisl_sioimath_src\fP \fBrhs\fP)"
.br
.ti -1c
.RI "void \fBisl_sioimath_fdiv_q\fP (\fBisl_sioimath_ptr\fP dst, \fBisl_sioimath_src\fP \fBlhs\fP, \fBisl_sioimath_src\fP \fBrhs\fP)"
.br
.ti -1c
.RI "void \fBisl_sioimath_fdiv_q_ui\fP (\fBisl_sioimath_ptr\fP dst, \fBisl_sioimath_src\fP \fBlhs\fP, unsigned long \fBrhs\fP)"
.br
.ti -1c
.RI "void \fBisl_sioimath_fdiv_r\fP (\fBisl_sioimath_ptr\fP dst, \fBisl_sioimath_src\fP \fBlhs\fP, \fBisl_sioimath_src\fP \fBrhs\fP)"
.br
.ti -1c
.RI "void \fBisl_sioimath_read\fP (\fBisl_sioimath_ptr\fP dst, \fBconst\fP char *\fBstr\fP)"
.br
.ti -1c
.RI "int \fBisl_sioimath_sgn\fP (\fBisl_sioimath_src\fP \fBarg\fP)"
.br
.ti -1c
.RI "int \fBisl_sioimath_cmp\fP (\fBisl_sioimath_src\fP \fBlhs\fP, \fBisl_sioimath_src\fP \fBrhs\fP)"
.br
.ti -1c
.RI "int \fBisl_sioimath_cmp_si\fP (\fBisl_sioimath_src\fP \fBlhs\fP, signed long \fBrhs\fP)"
.br
.ti -1c
.RI "int \fBisl_sioimath_abs_cmp\fP (\fBisl_sioimath_src\fP \fBlhs\fP, \fBisl_sioimath_src\fP \fBrhs\fP)"
.br
.ti -1c
.RI "int \fBisl_sioimath_is_divisible_by\fP (\fBisl_sioimath_src\fP \fBlhs\fP, \fBisl_sioimath_src\fP \fBrhs\fP)"
.br
.ti -1c
.RI "uint32_t \fBisl_sioimath_hash\fP (\fBisl_sioimath_src\fP \fBarg\fP, uint32_t hash)"
.br
.ti -1c
.RI "size_t \fBisl_sioimath_sizeinbase\fP (\fBisl_sioimath_src\fP \fBarg\fP, int base)"
.br
.ti -1c
.RI "void \fBisl_sioimath_print\fP (FILE *out, \fBisl_sioimath_src\fP \fBi\fP, int width)"
.br
.ti -1c
.RI "void \fBisl_sioimath_dump\fP (\fBisl_sioimath_src\fP \fBarg\fP)"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define ARRAY_SIZE(array)   (sizeof(array)/sizeof(*array))"

.SS "#define isl_int_abs(r, \fBi\fP)   \fBisl_sioimath_abs\fP((r), *(\fBi\fP))"

.SS "#define isl_int_abs_cmp(\fBi\fP, \fBj\fP)   \fBisl_sioimath_abs_cmp\fP(*(\fBi\fP), *(\fBj\fP))"

.SS "#define isl_int_abs_eq(\fBi\fP, \fBj\fP)   (\fBisl_sioimath_abs_cmp\fP(*(\fBi\fP), *(\fBj\fP)) == 0)"

.SS "#define isl_int_abs_ge(\fBi\fP, \fBj\fP)   (\fBisl_sioimath_abs_cmp\fP(*(\fBi\fP), *(\fBj\fP)) >= 0)"

.SS "#define isl_int_abs_gt(\fBi\fP, \fBj\fP)   (\fBisl_sioimath_abs_cmp\fP(*(\fBi\fP), *(\fBj\fP)) > 0)"

.SS "#define isl_int_abs_lt(\fBi\fP, \fBj\fP)   (\fBisl_sioimath_abs_cmp\fP(*(\fBi\fP), *(\fBj\fP)) < 0)"

.SS "#define isl_int_abs_ne(\fBi\fP, \fBj\fP)   (\fBisl_sioimath_abs_cmp\fP(*(\fBi\fP), *(\fBj\fP)) != 0)"

.SS "#define isl_int_add(r, \fBi\fP, \fBj\fP)   \fBisl_sioimath_add\fP((r), *(\fBi\fP), *(\fBj\fP))"

.SS "#define isl_int_add_ui(r, \fBi\fP, \fBj\fP)   \fBisl_sioimath_add_ui\fP((r), *(\fBi\fP), \fBj\fP)"

.SS "#define isl_int_addmul(r, \fBi\fP, \fBj\fP)   \fBisl_sioimath_addmul\fP((r), *(\fBi\fP), *(\fBj\fP))"

.SS "#define isl_int_addmul_ui(r, \fBi\fP, \fBj\fP)   \fBisl_sioimath_addmul_ui\fP((r), *(\fBi\fP), \fBj\fP)"

.SS "#define isl_int_cdiv_q(r, \fBi\fP, \fBj\fP)   \fBisl_sioimath_cdiv_q\fP((r), *(\fBi\fP), *(\fBj\fP))"

.SS "#define isl_int_clear(\fBi\fP)   \fBisl_sioimath_clear\fP((\fBi\fP))"

.SS "#define isl_int_cmp(\fBi\fP, \fBj\fP)   \fBisl_sioimath_cmp\fP(*(\fBi\fP), *(\fBj\fP))"

.SS "#define isl_int_cmp_si(\fBi\fP, si)   \fBisl_sioimath_cmp_si\fP(*(\fBi\fP), si)"

.SS "#define isl_int_divexact(r, \fBi\fP, \fBj\fP)   \fBisl_sioimath_tdiv_q\fP((r), *(\fBi\fP), *(\fBj\fP))"

.SS "#define isl_int_divexact_ui(r, \fBi\fP, \fBj\fP)   \fBisl_sioimath_tdiv_q_ui\fP((r), *(\fBi\fP), \fBj\fP)"

.SS "#define isl_int_eq(\fBi\fP, \fBj\fP)   (\fBisl_sioimath_cmp\fP(*(\fBi\fP), *(\fBj\fP)) == 0)"

.SS "#define isl_int_fdiv_q(r, \fBi\fP, \fBj\fP)   \fBisl_sioimath_fdiv_q\fP((r), *(\fBi\fP), *(\fBj\fP))"

.SS "#define isl_int_fdiv_q_ui(r, \fBi\fP, \fBj\fP)   \fBisl_sioimath_fdiv_q_ui\fP((r), *(\fBi\fP), \fBj\fP)"

.SS "#define isl_int_fdiv_r(r, \fBi\fP, \fBj\fP)   \fBisl_sioimath_fdiv_r\fP((r), *(\fBi\fP), *(\fBj\fP))"

.SS "#define isl_int_fits_slong(r)   \fBisl_sioimath_fits_slong\fP(*(r))"

.SS "#define isl_int_fits_ulong(r)   \fBisl_sioimath_fits_ulong\fP(*(r))"

.SS "#define isl_int_free_str(s)   \fBfree\fP(s)"

.SS "#define isl_int_gcd(r, \fBi\fP, \fBj\fP)   \fBisl_sioimath_gcd\fP((r), *(\fBi\fP), *(\fBj\fP))"

.SS "#define isl_int_ge(\fBi\fP, \fBj\fP)   (\fBisl_sioimath_cmp\fP(*(\fBi\fP), *(\fBj\fP)) >= 0)"

.SS "#define isl_int_get_d(r)   \fBisl_sioimath_get_d\fP(*(r))"

.SS "#define isl_int_get_si(r)   \fBisl_sioimath_get_si\fP(*(r))"

.SS "#define isl_int_get_str(r)   \fBisl_sioimath_get_str\fP(*(r))"

.SS "#define isl_int_get_ui(r)   \fBisl_sioimath_get_ui\fP(*(r))"

.SS "#define isl_int_gt(\fBi\fP, \fBj\fP)   (\fBisl_sioimath_cmp\fP(*(\fBi\fP), *(\fBj\fP)) > 0)"

.SS "#define isl_int_hash(v, h)   \fBisl_sioimath_hash\fP(*(v), h)"

.SS "#define isl_int_init(\fBi\fP)   \fBisl_sioimath_init\fP((\fBi\fP))"

.SS "#define isl_int_is_divisible_by(\fBi\fP, \fBj\fP)   \fBisl_sioimath_is_divisible_by\fP(*(\fBi\fP), *(\fBj\fP))"

.SS "#define isl_int_lcm(r, \fBi\fP, \fBj\fP)   \fBisl_sioimath_lcm\fP((r), *(\fBi\fP), *(\fBj\fP))"

.SS "#define isl_int_le(\fBi\fP, \fBj\fP)   (\fBisl_sioimath_cmp\fP(*(\fBi\fP), *(\fBj\fP)) <= 0)"

.SS "#define isl_int_lt(\fBi\fP, \fBj\fP)   (\fBisl_sioimath_cmp\fP(*(\fBi\fP), *(\fBj\fP)) < 0)"

.SS "#define isl_int_mul(r, \fBi\fP, \fBj\fP)   \fBisl_sioimath_mul\fP((r), *(\fBi\fP), *(\fBj\fP))"

.SS "#define isl_int_mul_2exp(r, \fBi\fP, \fBj\fP)   \fBisl_sioimath_mul_2exp\fP((r), *(\fBi\fP), \fBj\fP)"

.SS "#define isl_int_mul_si(r, \fBi\fP, \fBj\fP)   \fBisl_sioimath_mul_si\fP((r), *(\fBi\fP), \fBj\fP)"

.SS "#define isl_int_mul_ui(r, \fBi\fP, \fBj\fP)   \fBisl_sioimath_mul_ui\fP((r), *(\fBi\fP), \fBj\fP)"

.SS "#define isl_int_ne(\fBi\fP, \fBj\fP)   (\fBisl_sioimath_cmp\fP(*(\fBi\fP), *(\fBj\fP)) != 0)"

.SS "#define isl_int_neg(r, \fBi\fP)   \fBisl_sioimath_neg\fP((r), *(\fBi\fP))"

.SS "#define isl_int_pow_ui(r, \fBi\fP, \fBj\fP)   \fBisl_sioimath_pow_ui\fP((r), *(\fBi\fP), \fBj\fP)"

.SS "#define isl_int_print(out, \fBi\fP, width)   \fBisl_sioimath_print\fP(out, *(\fBi\fP), width)"

.SS "#define isl_int_read(r, s)   \fBisl_sioimath_read\fP((r), s)"

.SS "#define isl_int_set(r, \fBi\fP)   \fBisl_sioimath_set\fP((r), *(\fBi\fP))"

.SS "#define isl_int_set_si(r, \fBi\fP)   \fBisl_sioimath_set_si\fP((r), \fBi\fP)"

.SS "#define isl_int_set_ui(r, \fBi\fP)   \fBisl_sioimath_set_ui\fP((r), \fBi\fP)"

.SS "#define isl_int_sgn(\fBi\fP)   \fBisl_sioimath_sgn\fP(*(\fBi\fP))"

.SS "#define isl_int_sub(r, \fBi\fP, \fBj\fP)   \fBisl_sioimath_sub\fP((r), *(\fBi\fP), *(\fBj\fP))"

.SS "#define isl_int_sub_ui(r, \fBi\fP, \fBj\fP)   \fBisl_sioimath_sub_ui\fP((r), *(\fBi\fP), \fBj\fP)"

.SS "#define isl_int_submul(r, \fBi\fP, \fBj\fP)   \fBisl_sioimath_submul\fP((r), *(\fBi\fP), *(\fBj\fP))"

.SS "#define isl_int_submul_ui(r, \fBi\fP, \fBj\fP)   \fBisl_sioimath_submul_ui\fP((r), *(\fBi\fP), \fBj\fP)"

.SS "#define isl_int_swap(\fBi\fP, \fBj\fP)   \fBisl_sioimath_swap\fP((\fBi\fP), (\fBj\fP))"

.SS "#define isl_int_swap_or_set(\fBi\fP, \fBj\fP)   \fBisl_sioimath_swap\fP((\fBi\fP), (\fBj\fP))"

.SS "#define isl_int_tdiv_q(r, \fBi\fP, \fBj\fP)   \fBisl_sioimath_tdiv_q\fP((r), *(\fBi\fP), *(\fBj\fP))"

.SS "#define ISL_SIOIMATH_SMALL_MAX   \fBINT32_MAX\fP"

.SS "#define ISL_SIOIMATH_SMALL_MIN   (\-\fBINT32_MAX\fP)"

.SS "#define ISL_SIOIMATH_TO_DIGITS(\fBnum\fP, digits, used)"
\fBValue:\fP
.PP
.nf
  do {                                                                   \
        int i = 0;                                                     \
        do {                                                           \
            (digits)[i] =                                          \
                ((num) >> (sizeof(mp_digit) * CHAR_BIT * i));      \
            i += 1;                                                \
            if (i >= (sizeof(num) + sizeof(mp_digit) - 1) /        \
                         sizeof(mp_digit))                         \
                break;                                         \
            if (((num) >> (sizeof(mp_digit) * CHAR_BIT * i)) == 0) \
                break;                                         \
        } while (1);                                                   \
        (used) = i;                                                    \
    } while (0)
.fi
.SH "Typedef Documentation"
.PP 
.SS "typedef \fBisl_sioimath\fP \fBisl_int\fP[1]"

.SS "typedef uintptr_t \fBisl_sioimath\fP"

.SS "typedef \fBisl_sioimath\fP* \fBisl_sioimath_ptr\fP"

.SS "typedef \fBisl_sioimath\fP \fBisl_sioimath_src\fP"

.SH "Function Documentation"
.PP 
.SS "void isl_sioimath_abs (\fBisl_sioimath_ptr\fP dst, \fBisl_sioimath_src\fP arg)\fC [inline]\fP"

.SS "int isl_sioimath_abs_cmp (\fBisl_sioimath_src\fP lhs, \fBisl_sioimath_src\fP rhs)\fC [inline]\fP"

.SS "void isl_sioimath_add (\fBisl_sioimath_ptr\fP dst, \fBisl_sioimath_src\fP lhs, \fBisl_sioimath_src\fP rhs)\fC [inline]\fP"

.SS "void isl_sioimath_add_ui (\fBisl_sioimath_ptr\fP dst, \fBisl_sioimath\fP lhs, unsigned long rhs)\fC [inline]\fP"

.SS "void isl_sioimath_addmul (\fBisl_sioimath_ptr\fP dst, \fBisl_sioimath_src\fP lhs, \fBisl_sioimath_src\fP rhs)\fC [inline]\fP"

.SS "void isl_sioimath_addmul_ui (\fBisl_sioimath_ptr\fP dst, \fBisl_sioimath_src\fP lhs, unsigned long rhs)\fC [inline]\fP"

.SS "\fBmp_int\fP isl_sioimath_bigarg_src (\fBisl_sioimath\fP arg, \fBisl_sioimath_scratchspace_t\fP * scratch)\fC [inline]\fP"

.SS "void isl_sioimath_cdiv_q (\fBisl_sioimath_ptr\fP dst, \fBisl_sioimath_src\fP lhs, \fBisl_sioimath_src\fP rhs)\fC [inline]\fP"

.SS "void isl_sioimath_clear (\fBisl_sioimath_ptr\fP dst)\fC [inline]\fP"

.SS "int isl_sioimath_cmp (\fBisl_sioimath_src\fP lhs, \fBisl_sioimath_src\fP rhs)\fC [inline]\fP"

.SS "int isl_sioimath_cmp_si (\fBisl_sioimath_src\fP lhs, signed long rhs)\fC [inline]\fP"

.SS "int isl_sioimath_decode_big (\fBisl_sioimath\fP val, \fBmp_int\fP * big)\fC [inline]\fP"

.SS "int isl_sioimath_decode_small (\fBisl_sioimath\fP val, int32_t * small)\fC [inline]\fP"

.SS "void isl_sioimath_dump (\fBisl_sioimath_src\fP arg)"

.SS "\fBisl_sioimath\fP isl_sioimath_encode_big (\fBmp_int\fP val)\fC [inline]\fP"

.SS "\fBisl_sioimath\fP isl_sioimath_encode_small (int32_t val)\fC [inline]\fP"

.SS "void isl_sioimath_fdiv_q (\fBisl_sioimath_ptr\fP dst, \fBisl_sioimath_src\fP lhs, \fBisl_sioimath_src\fP rhs)\fC [inline]\fP"

.SS "void isl_sioimath_fdiv_q_ui (\fBisl_sioimath_ptr\fP dst, \fBisl_sioimath_src\fP lhs, unsigned long rhs)\fC [inline]\fP"

.SS "void isl_sioimath_fdiv_r (\fBisl_sioimath_ptr\fP dst, \fBisl_sioimath_src\fP lhs, \fBisl_sioimath_src\fP rhs)\fC [inline]\fP"

.SS "int isl_sioimath_fits_slong (\fBisl_sioimath_src\fP val)\fC [inline]\fP"

.SS "int isl_sioimath_fits_ulong (\fBisl_sioimath_src\fP val)\fC [inline]\fP"

.SS "void isl_sioimath_gcd (\fBisl_sioimath_ptr\fP dst, \fBisl_sioimath_src\fP lhs, \fBisl_sioimath_src\fP rhs)"

.SS "\fBmp_int\fP isl_sioimath_get_big (\fBisl_sioimath\fP val)\fC [inline]\fP"

.SS "double isl_sioimath_get_d (\fBisl_sioimath_src\fP val)\fC [inline]\fP"

.SS "long isl_sioimath_get_si (\fBisl_sioimath_src\fP val)\fC [inline]\fP"

.SS "int32_t isl_sioimath_get_small (\fBisl_sioimath\fP val)\fC [inline]\fP"

.SS "char* isl_sioimath_get_str (\fBisl_sioimath_src\fP val)\fC [inline]\fP"

.SS "unsigned long isl_sioimath_get_ui (\fBisl_sioimath_src\fP val)\fC [inline]\fP"

.SS "uint32_t isl_sioimath_hash (\fBisl_sioimath_src\fP arg, uint32_t hash)\fC [inline]\fP"

.SS "void isl_sioimath_init (\fBisl_sioimath_ptr\fP dst)\fC [inline]\fP"

.SS "int isl_sioimath_is_big (\fBisl_sioimath\fP val)\fC [inline]\fP"

.SS "int isl_sioimath_is_divisible_by (\fBisl_sioimath_src\fP lhs, \fBisl_sioimath_src\fP rhs)\fC [inline]\fP"

.SS "int isl_sioimath_is_small (\fBisl_sioimath\fP val)\fC [inline]\fP"

.SS "void isl_sioimath_lcm (\fBisl_sioimath_ptr\fP dst, \fBisl_sioimath_src\fP lhs, \fBisl_sioimath_src\fP rhs)"

.SS "void isl_sioimath_mul (\fBisl_sioimath_ptr\fP dst, \fBisl_sioimath_src\fP lhs, \fBisl_sioimath_src\fP rhs)\fC [inline]\fP"

.SS "void isl_sioimath_mul_2exp (\fBisl_sioimath_ptr\fP dst, \fBisl_sioimath\fP lhs, unsigned long rhs)\fC [inline]\fP"

.SS "void isl_sioimath_mul_si (\fBisl_sioimath_ptr\fP dst, \fBisl_sioimath\fP lhs, signed long rhs)\fC [inline]\fP"

.SS "void isl_sioimath_mul_ui (\fBisl_sioimath_ptr\fP dst, \fBisl_sioimath\fP lhs, unsigned long rhs)\fC [inline]\fP"

.SS "void isl_sioimath_neg (\fBisl_sioimath_ptr\fP dst, \fBisl_sioimath_src\fP arg)\fC [inline]\fP"

.SS "void isl_sioimath_pow_ui (\fBisl_sioimath_ptr\fP dst, \fBisl_sioimath_src\fP lhs, unsigned long rhs)\fC [inline]\fP"

.SS "void isl_sioimath_print (FILE * out, \fBisl_sioimath_src\fP i, int width)"

.SS "void isl_sioimath_promote (\fBisl_sioimath_ptr\fP dst)\fC [inline]\fP"

.SS "void isl_sioimath_read (\fBisl_sioimath_ptr\fP dst, \fBconst\fP char * str)"

.SS "\fBmp_int\fP isl_sioimath_reinit_big (\fBisl_sioimath_ptr\fP ptr)\fC [inline]\fP"

.SS "void isl_sioimath_set (\fBisl_sioimath_ptr\fP dst, \fBisl_sioimath_src\fP val)\fC [inline]\fP"

.SS "void isl_sioimath_set_int32 (\fBisl_sioimath_ptr\fP ptr, int32_t val)\fC [inline]\fP"

.SS "void isl_sioimath_set_int64 (\fBisl_sioimath_ptr\fP ptr, int64_t val)\fC [inline]\fP"

.SS "void isl_sioimath_set_si (\fBisl_sioimath_ptr\fP dst, long val)\fC [inline]\fP"

.SS "void isl_sioimath_set_small (\fBisl_sioimath_ptr\fP ptr, int32_t val)\fC [inline]\fP"

.SS "void isl_sioimath_set_ui (\fBisl_sioimath_ptr\fP dst, unsigned long val)\fC [inline]\fP"

.SS "int isl_sioimath_sgn (\fBisl_sioimath_src\fP arg)\fC [inline]\fP"

.SS "\fBmp_int\fP isl_sioimath_si64arg_src (int64_t arg, \fBisl_sioimath_scratchspace_t\fP * scratch)\fC [inline]\fP"

.SS "\fBmp_int\fP isl_sioimath_siarg_src (signed long arg, \fBisl_sioimath_scratchspace_t\fP * scratch)\fC [inline]\fP"

.SS "size_t isl_sioimath_sizeinbase (\fBisl_sioimath_src\fP arg, int base)\fC [inline]\fP"

.SS "void isl_sioimath_sub (\fBisl_sioimath_ptr\fP dst, \fBisl_sioimath_src\fP lhs, \fBisl_sioimath_src\fP rhs)\fC [inline]\fP"

.SS "void isl_sioimath_sub_ui (\fBisl_sioimath_ptr\fP dst, \fBisl_sioimath\fP lhs, unsigned long rhs)\fC [inline]\fP"

.SS "void isl_sioimath_submul (\fBisl_sioimath_ptr\fP dst, \fBisl_sioimath_src\fP lhs, \fBisl_sioimath_src\fP rhs)\fC [inline]\fP"

.SS "void isl_sioimath_submul_ui (\fBisl_sioimath_ptr\fP dst, \fBisl_sioimath_src\fP lhs, unsigned long rhs)\fC [inline]\fP"

.SS "void isl_sioimath_swap (\fBisl_sioimath_ptr\fP lhs, \fBisl_sioimath_ptr\fP rhs)\fC [inline]\fP"

.SS "void isl_sioimath_tdiv_q (\fBisl_sioimath_ptr\fP dst, \fBisl_sioimath_src\fP lhs, \fBisl_sioimath_src\fP rhs)\fC [inline]\fP"

.SS "void isl_sioimath_tdiv_q_ui (\fBisl_sioimath_ptr\fP dst, \fBisl_sioimath_src\fP lhs, unsigned long rhs)\fC [inline]\fP"

.SS "void isl_sioimath_try_demote (\fBisl_sioimath_ptr\fP dst)\fC [inline]\fP"

.SS "\fBmp_int\fP isl_sioimath_uiarg_src (unsigned long arg, \fBisl_sioimath_scratchspace_t\fP * scratch)\fC [inline]\fP"

.SS "void isl_siomath_uint32_to_digits (uint32_t num, \fBmp_digit\fP * digits, \fBmp_size\fP * used)\fC [inline]\fP"

.SS "void isl_siomath_uint64_to_digits (uint64_t num, \fBmp_digit\fP * digits, \fBmp_size\fP * used)\fC [inline]\fP"

.SS "void isl_siomath_ulong_to_digits (unsigned long num, \fBmp_digit\fP * digits, \fBmp_size\fP * used)\fC [inline]\fP"

.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
