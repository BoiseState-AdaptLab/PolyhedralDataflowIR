.TH "chillAST_Child< ASTNodeClass >" 3 "Sun Jul 12 2020" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
chillAST_Child< ASTNodeClass > \- Generic class to handle children in chillAST nodes\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <chill_ast\&.hh>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBchillAST_Child\fP (\fBchillAST_node\fP *parent, int \fBpos\fP)"
.br
.ti -1c
.RI "\fBchillAST_Child\fP (\fBconst\fP \fBchillAST_Child\fP< ASTNodeClass > &)=delete"
.br
.ti -1c
.RI "\fBchillAST_Child\fP (\fBchillAST_Child\fP< ASTNodeClass > &&)=delete"
.br
.ti -1c
.RI "ASTNodeClass * \fBoperator=\fP (ASTNodeClass *ptr)"
.br
.RI "Assignment operator will set the child\&. "
.ti -1c
.RI "ASTNodeClass * \fBoperator=\fP (\fBconst\fP \fBchillAST_Child\fP< ASTNodeClass > &other)"
.br
.RI "Assignment operator from another child of the same type\&. "
.ti -1c
.RI "bool \fBoperator==\fP (std::nullptr_t)"
.br
.RI "Equality operator for 'not null' and 'null' checks\&. "
.ti -1c
.RI "ASTNodeClass * \fBoperator\->\fP () \fBconst\fP"
.br
.RI "Behaving like a pointer with arrow operator\&. "
.ti -1c
.RI "template<typename DestASTNodeClass , typename std::enable_if< std::is_base_of< chillAST_node, DestASTNodeClass >::value, int >::type  = 0> \fBoperator DestASTNodeClass *\fP () \fBconst\fP"
.br
.RI "Implicit conversion to the default type, or base of default type\&. "
.ti -1c
.RI "\fBoperator bool\fP () \fBconst\fP"
.br
.RI "Boolean conversion for 'not null' and 'null' checks\&. "
.ti -1c
.RI "ASTNodeClass & \fBoperator*\fP () \fBconst\fP"
.br
.RI "Dereferencing this pointer\&. "
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename ASTNodeClass>
.br
class chillAST_Child< ASTNodeClass >"
Generic class to handle children in chillAST nodes\&. 

Storing the positional information to look up the child in Children\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename ASTNodeClass > \fBchillAST_Child\fP< ASTNodeClass >::\fBchillAST_Child\fP (\fBchillAST_node\fP * parent, int pos)\fC [inline]\fP"

.SS "template<typename ASTNodeClass > \fBchillAST_Child\fP< ASTNodeClass >::\fBchillAST_Child\fP (\fBconst\fP \fBchillAST_Child\fP< ASTNodeClass > &)\fC [delete]\fP"

.SS "template<typename ASTNodeClass > \fBchillAST_Child\fP< ASTNodeClass >::\fBchillAST_Child\fP (\fBchillAST_Child\fP< ASTNodeClass > &&)\fC [delete]\fP"

.SH "Member Function Documentation"
.PP 
.SS "template<typename ASTNodeClass > \fBchillAST_Child\fP< ASTNodeClass >::operator bool () const\fC [inline]\fP"

.PP
Boolean conversion for 'not null' and 'null' checks\&. 
.SS "template<typename ASTNodeClass > template<typename DestASTNodeClass , typename std::enable_if< std::is_base_of< chillAST_node, DestASTNodeClass >::value, int >::type  = 0> \fBchillAST_Child\fP< ASTNodeClass >::operator DestASTNodeClass * () const\fC [inline]\fP"

.PP
Implicit conversion to the default type, or base of default type\&. 
.SS "template<typename ASTNodeClass > ASTNodeClass& \fBchillAST_Child\fP< ASTNodeClass >::operator* () const\fC [inline]\fP"

.PP
Dereferencing this pointer\&. 
.SS "template<typename ASTNodeClass > ASTNodeClass* \fBchillAST_Child\fP< ASTNodeClass >::operator\-> () const\fC [inline]\fP"

.PP
Behaving like a pointer with arrow operator\&. 
.SS "template<typename ASTNodeClass > ASTNodeClass* \fBchillAST_Child\fP< ASTNodeClass >::operator= (ASTNodeClass * ptr)\fC [inline]\fP"

.PP
Assignment operator will set the child\&. 
.SS "template<typename ASTNodeClass > ASTNodeClass* \fBchillAST_Child\fP< ASTNodeClass >::operator= (\fBconst\fP \fBchillAST_Child\fP< ASTNodeClass > & other)\fC [inline]\fP"

.PP
Assignment operator from another child of the same type\&. 
.SS "template<typename ASTNodeClass > bool \fBchillAST_Child\fP< ASTNodeClass >::operator== (std::nullptr_t)\fC [inline]\fP"

.PP
Equality operator for 'not null' and 'null' checks\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
