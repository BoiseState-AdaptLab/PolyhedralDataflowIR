.TH "iegenlib::UniQuantRule" 3 "Sun Jul 12 2020" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
iegenlib::UniQuantRule
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <environment\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBUniQuantRule\fP (string type, string tupleDecl, string leftSide, string rightSide)"
.br
.RI "\fBUniQuantRule\fP class member functions: "
.ti -1c
.RI "\fB~UniQuantRule\fP ()"
.br
.ti -1c
.RI "\fBUniQuantRule\fP (\fBconst\fP \fBUniQuantRule\fP &other)"
.br
.RI "Copy constructor\&. "
.ti -1c
.RI "\fBUniQuantRule\fP & \fBoperator=\fP (\fBconst\fP \fBUniQuantRule\fP &other)"
.br
.RI "Assignment operator\&. "
.ti -1c
.RI "void \fBswap\fP (\fBUniQuantRule\fP &second)  throw ()"
.br
.RI "helper function for implementing copy-and-swap "
.ti -1c
.RI "std::string \fBtoString\fP ()"
.br
.RI "prints the content of the map into a std::string, and returns it "
.ti -1c
.RI "\fBUniQuantRuleType\fP \fBgetType\fP ()"
.br
.ti -1c
.RI "\fBSet\fP * \fBgetLeftSide\fP ()"
.br
.ti -1c
.RI "\fBSet\fP * \fBgetRightSide\fP ()"
.br
.in -1c
.SH "Detailed Description"
.PP 
This is the basic structure for storing different domain information about uninterpreted function symbols in the environment, these information can be of the types:
.PP
Forall e1, e2, \&.\&.\&. \fBSet\fP => \fBSet\fP \fBSet\fP: can be a conjunction of equality and inequality expressions 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "iegenlib::UniQuantRule::UniQuantRule (string type, string tupleDecl, string leftSide, string rightSide)"

.PP
\fBUniQuantRule\fP class member functions: 
.SS "iegenlib::UniQuantRule::~UniQuantRule ()"

.SS "iegenlib::UniQuantRule::UniQuantRule (\fBconst\fP \fBUniQuantRule\fP & other)"

.PP
Copy constructor\&. Copy constructor\&. Performs a deep copy\&. 
.SH "Member Function Documentation"
.PP 
.SS "\fBSet\fP * iegenlib::UniQuantRule::getLeftSide ()"

.SS "\fBSet\fP * iegenlib::UniQuantRule::getRightSide ()"

.SS "\fBUniQuantRuleType\fP iegenlib::UniQuantRule::getType ()"

.SS "\fBUniQuantRule\fP & iegenlib::UniQuantRule::operator= (\fBconst\fP \fBUniQuantRule\fP & other)"

.PP
Assignment operator\&. Copy assignment\&. 
.SS "void iegenlib::UniQuantRule::swap (\fBUniQuantRule\fP & second)"

.PP
helper function for implementing copy-and-swap 
.SS "std::string iegenlib::UniQuantRule::toString ()"

.PP
prints the content of the map into a std::string, and returns it 

.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
