.TH "iegenlib::TupleVarTerm" 3 "Sun Jul 12 2020" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
iegenlib::TupleVarTerm \- Represents a coefficient multiplied by a tuple variable\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <expression\&.h>\fP
.PP
Inherits \fBiegenlib::Term\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBTupleVarTerm\fP (int coeff, int location)"
.br
.RI "Constructor\&. "
.ti -1c
.RI "\fBTupleVarTerm\fP (int location)"
.br
.RI "Convenience constructor, assumes coeff = 1\&. "
.ti -1c
.RI "\fBTupleVarTerm\fP (\fBconst\fP \fBTupleVarTerm\fP &other)"
.br
.RI "Copy constructor\&. "
.ti -1c
.RI "\fBTupleVarTerm\fP & \fBoperator=\fP (\fBconst\fP \fBTupleVarTerm\fP &other)"
.br
.RI "Copy assignment\&. "
.ti -1c
.RI "bool \fBoperator<\fP (\fBconst\fP \fBTerm\fP &other) \fBconst\fP"
.br
.RI "Comparison operator -- lexicographic order\&. "
.ti -1c
.RI "\fBTerm\fP * \fBclone\fP () \fBconst\fP"
.br
.RI "Create a copy of this \fBTerm\fP (and of the same subclass) "
.ti -1c
.RI "std::string \fBtoString\fP (bool absValue=false) \fBconst\fP"
.br
.RI "Creates a compact string to help with debugging\&. "
.ti -1c
.RI "std::string \fBprettyPrintString\fP (\fBconst\fP \fBTupleDecl\fP &aTupleDecl, bool absValue=false) \fBconst\fP"
.br
.RI "Creates a compact string, pretty printed (replace __tv# with name)\&. "
.ti -1c
.RI "std::string \fBtype\fP () \fBconst\fP"
.br
.RI "Returns string of subclass type\&. "
.ti -1c
.RI "bool \fBisConst\fP () \fBconst\fP"
.br
.RI "Returns true if the \fBTerm\fP is a const\&. "
.ti -1c
.RI "int \fBtvloc\fP ()"
.br
.ti -1c
.RI "bool \fBfactorMatches\fP (\fBconst\fP \fBTerm\fP &other) \fBconst\fP"
.br
.RI "Returns true if this term can be combined with the given term\&. "
.ti -1c
.RI "void \fBremapLocation\fP (\fBconst\fP std::vector< int > &oldToNewLocs)"
.br
.ti -1c
.RI "void \fBacceptVisitor\fP (\fBVisitor\fP *v)"
.br
.RI "\fBVisitor\fP design pattern, see \fBVisitor\&.h\fP for usage\&. "
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
Represents a coefficient multiplied by a tuple variable\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "iegenlib::TupleVarTerm::TupleVarTerm (int coeff, int location)\fC [inline]\fP"

.PP
Constructor\&. 
.SS "iegenlib::TupleVarTerm::TupleVarTerm (int location)\fC [inline]\fP"

.PP
Convenience constructor, assumes coeff = 1\&. 
.SS "iegenlib::TupleVarTerm::TupleVarTerm (\fBconst\fP \fBTupleVarTerm\fP & other)"

.PP
Copy constructor\&. 
.SH "Member Function Documentation"
.PP 
.SS "void iegenlib::TupleVarTerm::acceptVisitor (\fBVisitor\fP * v)\fC [virtual]\fP"

.PP
\fBVisitor\fP design pattern, see \fBVisitor\&.h\fP for usage\&. 
.PP
Reimplemented from \fBiegenlib::Term\fP\&.
.SS "\fBTerm\fP * iegenlib::TupleVarTerm::clone () const\fC [virtual]\fP"

.PP
Create a copy of this \fBTerm\fP (and of the same subclass) 
.PP
Reimplemented from \fBiegenlib::Term\fP\&.
.SS "bool iegenlib::TupleVarTerm::factorMatches (\fBconst\fP \fBTerm\fP & other) const\fC [virtual]\fP"

.PP
Returns true if this term can be combined with the given term\&. Returns true if this term has the same factor (i\&.e\&. everything except the coefficient) as the given other term\&. 
.PP
Reimplemented from \fBiegenlib::Term\fP\&.
.SS "bool iegenlib::TupleVarTerm::isConst () const\fC [inline]\fP, \fC [virtual]\fP"

.PP
Returns true if the \fBTerm\fP is a const\&. 
.PP
Reimplemented from \fBiegenlib::Term\fP\&.
.SS "bool iegenlib::TupleVarTerm::operator< (\fBconst\fP \fBTerm\fP & other) const\fC [virtual]\fP"

.PP
Comparison operator -- lexicographic order\&. Compare two terms in a canonical order, defined as follows:
.IP "1." 4
by term type: TupleVar, SymConst, UFCall, ConstVal
.IP "2." 4
within each type, in alphabetical or numeric order\&. 
.PP

.PP
Reimplemented from \fBiegenlib::Term\fP\&.
.SS "\fBTupleVarTerm\fP & iegenlib::TupleVarTerm::operator= (\fBconst\fP \fBTupleVarTerm\fP & other)"

.PP
Copy assignment\&. 
.SS "std::string iegenlib::TupleVarTerm::prettyPrintString (\fBconst\fP \fBTupleDecl\fP & aTupleDecl, bool absValue = \fCfalse\fP) const\fC [virtual]\fP"

.PP
Creates a compact string, pretty printed (replace __tv# with name)\&. Creates a compact string, pretty printed\&. 
.PP
\fBParameters\fP
.RS 4
\fIaTupleDecl\fP name or constant for each tuple var 
.br
\fIabsValue\fP Will use absolute value of coeff if true\&. 
.RE
.PP

.PP
Reimplemented from \fBiegenlib::Term\fP\&.
.SS "void iegenlib::TupleVarTerm::remapLocation (\fBconst\fP std::vector< int > & oldToNewLocs)"
Remap our location according to the given map vector\&. See \fBExp::remapTupleVars\fP for more detail\&. 
.SS "std::string iegenlib::TupleVarTerm::toString (bool absValue = \fCfalse\fP) const\fC [virtual]\fP"

.PP
Creates a compact string to help with debugging\&. Creates a compact string to help with debugging\&. 
.PP
\fBParameters\fP
.RS 4
\fIabsValue\fP Will use absolute value of coeff if true\&. 
.RE
.PP

.PP
Reimplemented from \fBiegenlib::Term\fP\&.
.SS "int iegenlib::TupleVarTerm::tvloc ()\fC [inline]\fP"

.SS "std::string iegenlib::TupleVarTerm::type () const\fC [virtual]\fP"

.PP
Returns string of subclass type\&. 
.PP
Reimplemented from \fBiegenlib::Term\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
