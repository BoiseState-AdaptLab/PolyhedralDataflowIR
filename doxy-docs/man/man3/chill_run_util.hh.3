.TH "lib/chill/chill_run_util.hh" 3 "Sun Jul 12 2020" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
lib/chill/chill_run_util.hh
.SH SYNOPSIS
.br
.PP
\fC#include <vector>\fP
.br
\fC#include <map>\fP
.br
\fC#include <string>\fP
.br

.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef \fBstd::map\fP< std::string, int > \fBsimap_t\fP"
.br
.ti -1c
.RI "typedef std::vector< \fBstd::map\fP< std::string, int > > \fBsimap_vec_t\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBsimap_vec_t\fP * \fBmake_prog\fP (\fBsimap_vec_t\fP *cond)"
.br
.ti -1c
.RI "\fBsimap_vec_t\fP * \fBmake_cond_gt\fP (\fBsimap_t\fP *\fBlhs\fP, \fBsimap_t\fP *\fBrhs\fP)"
.br
.ti -1c
.RI "\fBsimap_vec_t\fP * \fBmake_cond_lt\fP (\fBsimap_t\fP *\fBlhs\fP, \fBsimap_t\fP *\fBrhs\fP)"
.br
.ti -1c
.RI "\fBsimap_vec_t\fP * \fBmake_cond_ge\fP (\fBsimap_t\fP *\fBlhs\fP, \fBsimap_t\fP *\fBrhs\fP)"
.br
.ti -1c
.RI "\fBsimap_vec_t\fP * \fBmake_cond_le\fP (\fBsimap_t\fP *\fBlhs\fP, \fBsimap_t\fP *\fBrhs\fP)"
.br
.ti -1c
.RI "\fBsimap_vec_t\fP * \fBmake_cond_eq\fP (\fBsimap_t\fP *\fBlhs\fP, \fBsimap_t\fP *\fBrhs\fP)"
.br
.ti -1c
.RI "\fBsimap_t\fP * \fBmake_cond_item_add\fP (\fBsimap_t\fP *\fBlhs\fP, \fBsimap_t\fP *\fBrhs\fP)"
.br
.ti -1c
.RI "\fBsimap_t\fP * \fBmake_cond_item_sub\fP (\fBsimap_t\fP *\fBlhs\fP, \fBsimap_t\fP *\fBrhs\fP)"
.br
.ti -1c
.RI "\fBsimap_t\fP * \fBmake_cond_item_mul\fP (\fBsimap_t\fP *\fBlhs\fP, \fBsimap_t\fP *\fBrhs\fP)"
.br
.ti -1c
.RI "\fBsimap_t\fP * \fBmake_cond_item_neg\fP (\fBsimap_t\fP *expr)"
.br
.ti -1c
.RI "\fBsimap_t\fP * \fBmake_cond_item_number\fP (int \fBn\fP)"
.br
.ti -1c
.RI "\fBsimap_t\fP * \fBmake_cond_item_variable\fP (\fBconst\fP char *\fBvar\fP)"
.br
.ti -1c
.RI "\fBsimap_t\fP * \fBmake_cond_item_level\fP (int \fBn\fP)"
.br
.ti -1c
.RI "\fBsimap_vec_t\fP * \fBparse_relation_vector\fP (\fBconst\fP char *expr)"
.br
.in -1c
.SH "Typedef Documentation"
.PP 
.SS "typedef \fBstd::map\fP<std::string, int> \fBsimap_t\fP"

.SS "typedef std::vector<\fBstd::map\fP<std::string, int> > \fBsimap_vec_t\fP"

.SH "Function Documentation"
.PP 
.SS "\fBsimap_vec_t\fP* make_cond_eq (\fBsimap_t\fP * lhs, \fBsimap_t\fP * rhs)"

.SS "\fBsimap_vec_t\fP* make_cond_ge (\fBsimap_t\fP * lhs, \fBsimap_t\fP * rhs)"

.SS "\fBsimap_vec_t\fP* make_cond_gt (\fBsimap_t\fP * lhs, \fBsimap_t\fP * rhs)"

.SS "\fBsimap_t\fP* make_cond_item_add (\fBsimap_t\fP * lhs, \fBsimap_t\fP * rhs)"

.SS "\fBsimap_t\fP* make_cond_item_level (int n)"

.SS "\fBsimap_t\fP* make_cond_item_mul (\fBsimap_t\fP * lhs, \fBsimap_t\fP * rhs)"

.SS "\fBsimap_t\fP* make_cond_item_neg (\fBsimap_t\fP * expr)"

.SS "\fBsimap_t\fP* make_cond_item_number (int n)"

.SS "\fBsimap_t\fP* make_cond_item_sub (\fBsimap_t\fP * lhs, \fBsimap_t\fP * rhs)"

.SS "\fBsimap_t\fP* make_cond_item_variable (\fBconst\fP char * var)"

.SS "\fBsimap_vec_t\fP* make_cond_le (\fBsimap_t\fP * lhs, \fBsimap_t\fP * rhs)"

.SS "\fBsimap_vec_t\fP* make_cond_lt (\fBsimap_t\fP * lhs, \fBsimap_t\fP * rhs)"

.SS "\fBsimap_vec_t\fP* make_prog (\fBsimap_vec_t\fP * cond)"

.SS "\fBsimap_vec_t\fP* parse_relation_vector (\fBconst\fP char * expr)"

.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
