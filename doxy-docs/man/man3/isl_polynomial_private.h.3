.TH "lib/isl/isl_polynomial_private.h" 3 "Sun Jul 12 2020" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
lib/isl/isl_polynomial_private.h
.SH SYNOPSIS
.br
.PP
\fC#include <stdio\&.h>\fP
.br
\fC#include <isl_int\&.h>\fP
.br
\fC#include <isl/map\&.h>\fP
.br
\fC#include <isl/mat\&.h>\fP
.br
\fC#include <isl_morph\&.h>\fP
.br
\fC#include <isl/polynomial\&.h>\fP
.br
\fC#include <isl_reordering\&.h>\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBisl_upoly\fP"
.br
.ti -1c
.RI "struct \fBisl_upoly_cst\fP"
.br
.ti -1c
.RI "struct \fBisl_upoly_rec\fP"
.br
.ti -1c
.RI "struct \fBisl_qpolynomial\fP"
.br
.ti -1c
.RI "struct \fBisl_term\fP"
.br
.ti -1c
.RI "struct \fBisl_pw_qpolynomial_piece\fP"
.br
.ti -1c
.RI "struct \fBisl_pw_qpolynomial\fP"
.br
.ti -1c
.RI "struct \fBisl_qpolynomial_fold\fP"
.br
.ti -1c
.RI "struct \fBisl_pw_qpolynomial_fold_piece\fP"
.br
.ti -1c
.RI "struct \fBisl_pw_qpolynomial_fold\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBisl_term_get_num\fP (\fB__isl_keep\fP \fBisl_term\fP *term, \fBisl_int\fP *\fBn\fP)"
.br
.ti -1c
.RI "\fB__isl_give\fP struct \fBisl_upoly\fP * \fBisl_upoly_zero\fP (struct \fBisl_ctx\fP *ctx)"
.br
.ti -1c
.RI "\fB__isl_give\fP struct \fBisl_upoly\fP * \fBisl_upoly_copy\fP (\fB__isl_keep\fP struct \fBisl_upoly\fP *up)"
.br
.ti -1c
.RI "\fB__isl_give\fP struct \fBisl_upoly\fP * \fBisl_upoly_cow\fP (\fB__isl_take\fP struct \fBisl_upoly\fP *up)"
.br
.ti -1c
.RI "\fB__isl_give\fP struct \fBisl_upoly\fP * \fBisl_upoly_dup\fP (\fB__isl_keep\fP struct \fBisl_upoly\fP *up)"
.br
.ti -1c
.RI "void \fBisl_upoly_free\fP (\fB__isl_take\fP struct \fBisl_upoly\fP *up)"
.br
.ti -1c
.RI "\fB__isl_give\fP struct \fBisl_upoly\fP * \fBisl_upoly_mul\fP (\fB__isl_take\fP struct \fBisl_upoly\fP *up1, \fB__isl_take\fP struct \fBisl_upoly\fP *up2)"
.br
.ti -1c
.RI "int \fBisl_upoly_is_cst\fP (\fB__isl_keep\fP struct \fBisl_upoly\fP *up)"
.br
.ti -1c
.RI "int \fBisl_upoly_is_zero\fP (\fB__isl_keep\fP struct \fBisl_upoly\fP *up)"
.br
.ti -1c
.RI "int \fBisl_upoly_is_one\fP (\fB__isl_keep\fP struct \fBisl_upoly\fP *up)"
.br
.ti -1c
.RI "int \fBisl_upoly_is_negone\fP (\fB__isl_keep\fP struct \fBisl_upoly\fP *up)"
.br
.ti -1c
.RI "\fB__isl_keep\fP struct \fBisl_upoly_cst\fP * \fBisl_upoly_as_cst\fP (\fB__isl_keep\fP struct \fBisl_upoly\fP *up)"
.br
.ti -1c
.RI "\fB__isl_keep\fP struct \fBisl_upoly_rec\fP * \fBisl_upoly_as_rec\fP (\fB__isl_keep\fP struct \fBisl_upoly\fP *up)"
.br
.ti -1c
.RI "\fB__isl_give\fP struct \fBisl_upoly\fP * \fBisl_upoly_sum\fP (\fB__isl_take\fP struct \fBisl_upoly\fP *up1, \fB__isl_take\fP struct \fBisl_upoly\fP *up2)"
.br
.ti -1c
.RI "\fB__isl_give\fP struct \fBisl_upoly\fP * \fBisl_upoly_mul_isl_int\fP (\fB__isl_take\fP struct \fBisl_upoly\fP *up, \fBisl_int\fP v)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_qpolynomial\fP * \fBisl_qpolynomial_alloc\fP (\fB__isl_take\fP \fBisl_space\fP *\fBdim\fP, unsigned n_div, \fB__isl_take\fP struct \fBisl_upoly\fP *up)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_qpolynomial\fP * \fBisl_qpolynomial_cow\fP (\fB__isl_take\fP \fBisl_qpolynomial\fP *qp)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_qpolynomial\fP * \fBisl_qpolynomial_dup\fP (\fB__isl_keep\fP \fBisl_qpolynomial\fP *qp)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_qpolynomial\fP * \fBisl_qpolynomial_cst_on_domain\fP (\fB__isl_take\fP \fBisl_space\fP *\fBdim\fP, \fBisl_int\fP v)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_qpolynomial\fP * \fBisl_qpolynomial_rat_cst_on_domain\fP (\fB__isl_take\fP \fBisl_space\fP *space, \fBconst\fP \fBisl_int\fP \fBn\fP, \fBconst\fP \fBisl_int\fP d)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_qpolynomial\fP * \fBisl_qpolynomial_var_pow_on_domain\fP (\fB__isl_take\fP \fBisl_space\fP *\fBdim\fP, int \fBpos\fP, int power)"
.br
.ti -1c
.RI "\fBisl_bool\fP \fBisl_qpolynomial_is_one\fP (\fB__isl_keep\fP \fBisl_qpolynomial\fP *qp)"
.br
.ti -1c
.RI "int \fBisl_qpolynomial_is_affine\fP (\fB__isl_keep\fP \fBisl_qpolynomial\fP *qp)"
.br
.ti -1c
.RI "int \fBisl_qpolynomial_is_cst\fP (\fB__isl_keep\fP \fBisl_qpolynomial\fP *qp, \fBisl_int\fP *\fBn\fP, \fBisl_int\fP *d)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_qpolynomial\fP * \fBisl_qpolynomial_add_on_domain\fP (\fB__isl_keep\fP \fBisl_set\fP *dom, \fB__isl_take\fP \fBisl_qpolynomial\fP *qp1, \fB__isl_take\fP \fBisl_qpolynomial\fP *qp2)"
.br
.ti -1c
.RI "int \fBisl_qpolynomial_degree\fP (\fB__isl_keep\fP \fBisl_qpolynomial\fP *poly)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_qpolynomial\fP * \fBisl_qpolynomial_coeff\fP (\fB__isl_keep\fP \fBisl_qpolynomial\fP *poly, enum \fBisl_dim_type\fP type, unsigned \fBpos\fP, int deg)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_vec\fP * \fBisl_qpolynomial_extract_affine\fP (\fB__isl_keep\fP \fBisl_qpolynomial\fP *qp)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_qpolynomial\fP * \fBisl_qpolynomial_from_affine\fP (\fB__isl_take\fP \fBisl_space\fP *\fBdim\fP, \fBisl_int\fP *\fBf\fP, \fBisl_int\fP denom)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_pw_qpolynomial\fP * \fBisl_pw_qpolynomial_cow\fP (\fB__isl_take\fP \fBisl_pw_qpolynomial\fP *\fBpwqp\fP)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_pw_qpolynomial\fP * \fBisl_pw_qpolynomial_add_piece\fP (\fB__isl_take\fP \fBisl_pw_qpolynomial\fP *\fBpwqp\fP, \fB__isl_take\fP \fBisl_set\fP *\fBset\fP, \fB__isl_take\fP \fBisl_qpolynomial\fP *qp)"
.br
.ti -1c
.RI "int \fBisl_pw_qpolynomial_is_one\fP (\fB__isl_keep\fP \fBisl_pw_qpolynomial\fP *\fBpwqp\fP)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_pw_qpolynomial\fP * \fBisl_pw_qpolynomial_project_out\fP (\fB__isl_take\fP \fBisl_pw_qpolynomial\fP *\fBpwqp\fP, enum \fBisl_dim_type\fP type, unsigned first, unsigned \fBn\fP)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_val\fP * \fBisl_qpolynomial_opt_on_domain\fP (\fB__isl_take\fP \fBisl_qpolynomial\fP *qp, \fB__isl_take\fP \fBisl_set\fP *\fBset\fP, int \fBmax\fP)"
.br
.ti -1c
.RI "enum \fBisl_fold\fP \fBisl_fold_type_negate\fP (enum \fBisl_fold\fP type)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_qpolynomial_fold\fP * \fBisl_qpolynomial_fold_cow\fP (\fB__isl_take\fP \fBisl_qpolynomial_fold\fP *fold)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_qpolynomial_fold\fP * \fBisl_qpolynomial_fold_dup\fP (\fB__isl_keep\fP \fBisl_qpolynomial_fold\fP *fold)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_pw_qpolynomial_fold\fP * \fBisl_pw_qpolynomial_fold_cow\fP (\fB__isl_take\fP \fBisl_pw_qpolynomial_fold\fP *pwf)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_qpolynomial_fold\fP * \fBisl_qpolynomial_fold_add_on_domain\fP (\fB__isl_keep\fP \fBisl_set\fP *\fBset\fP, \fB__isl_take\fP \fBisl_qpolynomial_fold\fP *fold1, \fB__isl_take\fP \fBisl_qpolynomial_fold\fP *fold2)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_qpolynomial_fold\fP * \fBisl_qpolynomial_fold_fold_on_domain\fP (\fB__isl_keep\fP \fBisl_set\fP *\fBset\fP, \fB__isl_take\fP \fBisl_qpolynomial_fold\fP *fold1, \fB__isl_take\fP \fBisl_qpolynomial_fold\fP *fold2)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_val\fP * \fBisl_qpolynomial_fold_opt_on_domain\fP (\fB__isl_take\fP \fBisl_qpolynomial_fold\fP *fold, \fB__isl_take\fP \fBisl_set\fP *\fBset\fP, int \fBmax\fP)"
.br
.ti -1c
.RI "int \fBisl_pw_qpolynomial_fold_covers\fP (\fB__isl_keep\fP \fBisl_pw_qpolynomial_fold\fP *pwf1, \fB__isl_keep\fP \fBisl_pw_qpolynomial_fold\fP *pwf2)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_qpolynomial\fP * \fBisl_qpolynomial_morph_domain\fP (\fB__isl_take\fP \fBisl_qpolynomial\fP *qp, \fB__isl_take\fP \fBisl_morph\fP *morph)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_pw_qpolynomial\fP * \fBisl_pw_qpolynomial_morph_domain\fP (\fB__isl_take\fP \fBisl_pw_qpolynomial\fP *\fBpwqp\fP, \fB__isl_take\fP \fBisl_morph\fP *morph)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_qpolynomial_fold\fP * \fBisl_qpolynomial_fold_morph_domain\fP (\fB__isl_take\fP \fBisl_qpolynomial_fold\fP *fold, \fB__isl_take\fP \fBisl_morph\fP *morph)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_pw_qpolynomial_fold\fP * \fBisl_pw_qpolynomial_fold_morph_domain\fP (\fB__isl_take\fP \fBisl_pw_qpolynomial_fold\fP *pwf, \fB__isl_take\fP \fBisl_morph\fP *morph)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_qpolynomial\fP * \fBisl_qpolynomial_lift\fP (\fB__isl_take\fP \fBisl_qpolynomial\fP *qp, \fB__isl_take\fP \fBisl_space\fP *\fBdim\fP)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_qpolynomial_fold\fP * \fBisl_qpolynomial_fold_lift\fP (\fB__isl_take\fP \fBisl_qpolynomial_fold\fP *fold, \fB__isl_take\fP \fBisl_space\fP *\fBdim\fP)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_qpolynomial\fP * \fBisl_qpolynomial_substitute_equalities\fP (\fB__isl_take\fP \fBisl_qpolynomial\fP *qp, \fB__isl_take\fP \fBisl_basic_set\fP *\fBeq\fP)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_qpolynomial_fold\fP * \fBisl_qpolynomial_fold_substitute_equalities\fP (\fB__isl_take\fP \fBisl_qpolynomial_fold\fP *fold, \fB__isl_take\fP \fBisl_basic_set\fP *\fBeq\fP)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_qpolynomial_fold\fP * \fBisl_qpolynomial_fold_gist\fP (\fB__isl_take\fP \fBisl_qpolynomial_fold\fP *fold, \fB__isl_take\fP \fBisl_set\fP *\fBcontext\fP)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_qpolynomial\fP * \fBisl_qpolynomial_realign_domain\fP (\fB__isl_take\fP \fBisl_qpolynomial\fP *qp, \fB__isl_take\fP \fBisl_reordering\fP *r)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_qpolynomial_fold\fP * \fBisl_qpolynomial_fold_realign_domain\fP (\fB__isl_take\fP \fBisl_qpolynomial_fold\fP *fold, \fB__isl_take\fP \fBisl_reordering\fP *r)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_pw_qpolynomial\fP * \fBisl_pw_qpolynomial_realign_domain\fP (\fB__isl_take\fP \fBisl_pw_qpolynomial\fP *\fBpwqp\fP, \fB__isl_take\fP \fBisl_reordering\fP *r)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_pw_qpolynomial_fold\fP * \fBisl_pw_qpolynomial_fold_realign_domain\fP (\fB__isl_take\fP \fBisl_pw_qpolynomial_fold\fP *pwf, \fB__isl_take\fP \fBisl_reordering\fP *r)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_pw_qpolynomial\fP * \fBisl_pw_qpolynomial_reset_space\fP (\fB__isl_take\fP \fBisl_pw_qpolynomial\fP *\fBpwqp\fP, \fB__isl_take\fP \fBisl_space\fP *space)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_qpolynomial\fP * \fBisl_qpolynomial_reset_domain_space\fP (\fB__isl_take\fP \fBisl_qpolynomial\fP *qp, \fB__isl_take\fP \fBisl_space\fP *\fBdim\fP)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_qpolynomial\fP * \fBisl_qpolynomial_reset_space_and_domain\fP (\fB__isl_take\fP \fBisl_qpolynomial\fP *qp, \fB__isl_take\fP \fBisl_space\fP *space, \fB__isl_take\fP \fBisl_space\fP *\fBdomain\fP)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_qpolynomial_fold\fP * \fBisl_qpolynomial_fold_reset_domain_space\fP (\fB__isl_take\fP \fBisl_qpolynomial_fold\fP *fold, \fB__isl_take\fP \fBisl_space\fP *\fBdim\fP)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_qpolynomial_fold\fP * \fBisl_qpolynomial_fold_reset_space_and_domain\fP (\fB__isl_take\fP \fBisl_qpolynomial_fold\fP *fold, \fB__isl_take\fP \fBisl_space\fP *space, \fB__isl_take\fP \fBisl_space\fP *\fBdomain\fP)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_pw_qpolynomial_fold\fP * \fBisl_pw_qpolynomial_fold_reset_domain_space\fP (\fB__isl_take\fP \fBisl_pw_qpolynomial_fold\fP *pwf, \fB__isl_take\fP \fBisl_space\fP *\fBdim\fP)"
.br
.ti -1c
.RI "void \fBisl_qpolynomial_get_den\fP (\fB__isl_keep\fP \fBisl_qpolynomial\fP *qp, \fBisl_int\fP *d)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_qpolynomial\fP * \fBisl_qpolynomial_add_isl_int\fP (\fB__isl_take\fP \fBisl_qpolynomial\fP *qp, \fBisl_int\fP v)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_qpolynomial\fP * \fBisl_qpolynomial_mul_isl_int\fP (\fB__isl_take\fP \fBisl_qpolynomial\fP *qp, \fBisl_int\fP v)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_pw_qpolynomial\fP * \fBisl_pw_qpolynomial_mul_isl_int\fP (\fB__isl_take\fP \fBisl_pw_qpolynomial\fP *\fBpwqp\fP, \fBisl_int\fP v)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_qpolynomial_fold\fP * \fBisl_qpolynomial_fold_mul_isl_int\fP (\fB__isl_take\fP \fBisl_qpolynomial_fold\fP *fold, \fBisl_int\fP v)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_pw_qpolynomial_fold\fP * \fBisl_pw_qpolynomial_fold_mul_isl_int\fP (\fB__isl_take\fP \fBisl_pw_qpolynomial_fold\fP *pwf, \fBisl_int\fP v)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_union_pw_qpolynomial\fP * \fBisl_union_pw_qpolynomial_mul_isl_int\fP (\fB__isl_take\fP \fBisl_union_pw_qpolynomial\fP *upwqp, \fBisl_int\fP v)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_union_pw_qpolynomial_fold\fP * \fBisl_union_pw_qpolynomial_fold_mul_isl_int\fP (\fB__isl_take\fP \fBisl_union_pw_qpolynomial_fold\fP *upwf, \fBisl_int\fP v)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "enum \fBisl_fold\fP isl_fold_type_negate (enum \fBisl_fold\fP type)"

.SS "\fB__isl_give\fP \fBisl_pw_qpolynomial\fP* isl_pw_qpolynomial_add_piece (\fB__isl_take\fP \fBisl_pw_qpolynomial\fP * pwqp, \fB__isl_take\fP \fBisl_set\fP * set, \fB__isl_take\fP \fBisl_qpolynomial\fP * qp)"

.SS "\fB__isl_give\fP \fBisl_pw_qpolynomial\fP* isl_pw_qpolynomial_cow (\fB__isl_take\fP \fBisl_pw_qpolynomial\fP * pwqp)"

.SS "int isl_pw_qpolynomial_fold_covers (\fB__isl_keep\fP \fBisl_pw_qpolynomial_fold\fP * pwf1, \fB__isl_keep\fP \fBisl_pw_qpolynomial_fold\fP * pwf2)"

.SS "\fB__isl_give\fP \fBisl_pw_qpolynomial_fold\fP* isl_pw_qpolynomial_fold_cow (\fB__isl_take\fP \fBisl_pw_qpolynomial_fold\fP * pwf)"

.SS "\fB__isl_give\fP \fBisl_pw_qpolynomial_fold\fP* isl_pw_qpolynomial_fold_morph_domain (\fB__isl_take\fP \fBisl_pw_qpolynomial_fold\fP * pwf, \fB__isl_take\fP \fBisl_morph\fP * morph)"

.SS "\fB__isl_give\fP \fBisl_pw_qpolynomial_fold\fP* isl_pw_qpolynomial_fold_mul_isl_int (\fB__isl_take\fP \fBisl_pw_qpolynomial_fold\fP * pwf, \fBisl_int\fP v)"

.SS "\fB__isl_give\fP \fBisl_pw_qpolynomial_fold\fP* isl_pw_qpolynomial_fold_realign_domain (\fB__isl_take\fP \fBisl_pw_qpolynomial_fold\fP * pwf, \fB__isl_take\fP \fBisl_reordering\fP * r)"

.SS "\fB__isl_give\fP \fBisl_pw_qpolynomial_fold\fP* isl_pw_qpolynomial_fold_reset_domain_space (\fB__isl_take\fP \fBisl_pw_qpolynomial_fold\fP * pwf, \fB__isl_take\fP \fBisl_space\fP * dim)"

.SS "int isl_pw_qpolynomial_is_one (\fB__isl_keep\fP \fBisl_pw_qpolynomial\fP * pwqp)"

.SS "\fB__isl_give\fP \fBisl_pw_qpolynomial\fP* isl_pw_qpolynomial_morph_domain (\fB__isl_take\fP \fBisl_pw_qpolynomial\fP * pwqp, \fB__isl_take\fP \fBisl_morph\fP * morph)"

.SS "\fB__isl_give\fP \fBisl_pw_qpolynomial\fP* isl_pw_qpolynomial_mul_isl_int (\fB__isl_take\fP \fBisl_pw_qpolynomial\fP * pwqp, \fBisl_int\fP v)"

.SS "\fB__isl_give\fP \fBisl_pw_qpolynomial\fP* isl_pw_qpolynomial_project_out (\fB__isl_take\fP \fBisl_pw_qpolynomial\fP * pwqp, enum \fBisl_dim_type\fP type, unsigned first, unsigned n)"

.SS "\fB__isl_give\fP \fBisl_pw_qpolynomial\fP* isl_pw_qpolynomial_realign_domain (\fB__isl_take\fP \fBisl_pw_qpolynomial\fP * pwqp, \fB__isl_take\fP \fBisl_reordering\fP * r)"

.SS "\fB__isl_give\fP \fBisl_pw_qpolynomial\fP* isl_pw_qpolynomial_reset_space (\fB__isl_take\fP \fBisl_pw_qpolynomial\fP * pwqp, \fB__isl_take\fP \fBisl_space\fP * space)"

.SS "\fB__isl_give\fP \fBisl_qpolynomial\fP* isl_qpolynomial_add_isl_int (\fB__isl_take\fP \fBisl_qpolynomial\fP * qp, \fBisl_int\fP v)"

.SS "\fB__isl_give\fP \fBisl_qpolynomial\fP* isl_qpolynomial_add_on_domain (\fB__isl_keep\fP \fBisl_set\fP * dom, \fB__isl_take\fP \fBisl_qpolynomial\fP * qp1, \fB__isl_take\fP \fBisl_qpolynomial\fP * qp2)"

.SS "\fB__isl_give\fP \fBisl_qpolynomial\fP* isl_qpolynomial_alloc (\fB__isl_take\fP \fBisl_space\fP * dim, unsigned n_div, \fB__isl_take\fP struct \fBisl_upoly\fP * up)"

.SS "\fB__isl_give\fP \fBisl_qpolynomial\fP* isl_qpolynomial_coeff (\fB__isl_keep\fP \fBisl_qpolynomial\fP * poly, enum \fBisl_dim_type\fP type, unsigned pos, int deg)"

.SS "\fB__isl_give\fP \fBisl_qpolynomial\fP* isl_qpolynomial_cow (\fB__isl_take\fP \fBisl_qpolynomial\fP * qp)"

.SS "\fB__isl_give\fP \fBisl_qpolynomial\fP* isl_qpolynomial_cst_on_domain (\fB__isl_take\fP \fBisl_space\fP * dim, \fBisl_int\fP v)"

.SS "int isl_qpolynomial_degree (\fB__isl_keep\fP \fBisl_qpolynomial\fP * poly)"

.SS "\fB__isl_give\fP \fBisl_qpolynomial\fP* isl_qpolynomial_dup (\fB__isl_keep\fP \fBisl_qpolynomial\fP * qp)"

.SS "\fB__isl_give\fP \fBisl_vec\fP* isl_qpolynomial_extract_affine (\fB__isl_keep\fP \fBisl_qpolynomial\fP * qp)"

.SS "\fB__isl_give\fP \fBisl_qpolynomial_fold\fP* isl_qpolynomial_fold_add_on_domain (\fB__isl_keep\fP \fBisl_set\fP * set, \fB__isl_take\fP \fBisl_qpolynomial_fold\fP * fold1, \fB__isl_take\fP \fBisl_qpolynomial_fold\fP * fold2)"

.SS "\fB__isl_give\fP \fBisl_qpolynomial_fold\fP* isl_qpolynomial_fold_cow (\fB__isl_take\fP \fBisl_qpolynomial_fold\fP * fold)"

.SS "\fB__isl_give\fP \fBisl_qpolynomial_fold\fP* isl_qpolynomial_fold_dup (\fB__isl_keep\fP \fBisl_qpolynomial_fold\fP * fold)"

.SS "\fB__isl_give\fP \fBisl_qpolynomial_fold\fP* isl_qpolynomial_fold_fold_on_domain (\fB__isl_keep\fP \fBisl_set\fP * set, \fB__isl_take\fP \fBisl_qpolynomial_fold\fP * fold1, \fB__isl_take\fP \fBisl_qpolynomial_fold\fP * fold2)"

.SS "\fB__isl_give\fP \fBisl_qpolynomial_fold\fP* isl_qpolynomial_fold_gist (\fB__isl_take\fP \fBisl_qpolynomial_fold\fP * fold, \fB__isl_take\fP \fBisl_set\fP * context)"

.SS "\fB__isl_give\fP \fBisl_qpolynomial_fold\fP* isl_qpolynomial_fold_lift (\fB__isl_take\fP \fBisl_qpolynomial_fold\fP * fold, \fB__isl_take\fP \fBisl_space\fP * dim)"

.SS "\fB__isl_give\fP \fBisl_qpolynomial_fold\fP* isl_qpolynomial_fold_morph_domain (\fB__isl_take\fP \fBisl_qpolynomial_fold\fP * fold, \fB__isl_take\fP \fBisl_morph\fP * morph)"

.SS "\fB__isl_give\fP \fBisl_qpolynomial_fold\fP* isl_qpolynomial_fold_mul_isl_int (\fB__isl_take\fP \fBisl_qpolynomial_fold\fP * fold, \fBisl_int\fP v)"

.SS "\fB__isl_give\fP \fBisl_val\fP* isl_qpolynomial_fold_opt_on_domain (\fB__isl_take\fP \fBisl_qpolynomial_fold\fP * fold, \fB__isl_take\fP \fBisl_set\fP * set, int max)"

.SS "\fB__isl_give\fP \fBisl_qpolynomial_fold\fP* isl_qpolynomial_fold_realign_domain (\fB__isl_take\fP \fBisl_qpolynomial_fold\fP * fold, \fB__isl_take\fP \fBisl_reordering\fP * r)"

.SS "\fB__isl_give\fP \fBisl_qpolynomial_fold\fP* isl_qpolynomial_fold_reset_domain_space (\fB__isl_take\fP \fBisl_qpolynomial_fold\fP * fold, \fB__isl_take\fP \fBisl_space\fP * dim)"

.SS "\fB__isl_give\fP \fBisl_qpolynomial_fold\fP* isl_qpolynomial_fold_reset_space_and_domain (\fB__isl_take\fP \fBisl_qpolynomial_fold\fP * fold, \fB__isl_take\fP \fBisl_space\fP * space, \fB__isl_take\fP \fBisl_space\fP * domain)"

.SS "\fB__isl_give\fP \fBisl_qpolynomial_fold\fP* isl_qpolynomial_fold_substitute_equalities (\fB__isl_take\fP \fBisl_qpolynomial_fold\fP * fold, \fB__isl_take\fP \fBisl_basic_set\fP * eq)"

.SS "\fB__isl_give\fP \fBisl_qpolynomial\fP* isl_qpolynomial_from_affine (\fB__isl_take\fP \fBisl_space\fP * dim, \fBisl_int\fP * f, \fBisl_int\fP denom)"

.SS "void isl_qpolynomial_get_den (\fB__isl_keep\fP \fBisl_qpolynomial\fP * qp, \fBisl_int\fP * d)"

.SS "int isl_qpolynomial_is_affine (\fB__isl_keep\fP \fBisl_qpolynomial\fP * qp)"

.SS "int isl_qpolynomial_is_cst (\fB__isl_keep\fP \fBisl_qpolynomial\fP * qp, \fBisl_int\fP * n, \fBisl_int\fP * d)"

.SS "\fBisl_bool\fP isl_qpolynomial_is_one (\fB__isl_keep\fP \fBisl_qpolynomial\fP * qp)"

.SS "\fB__isl_give\fP \fBisl_qpolynomial\fP* isl_qpolynomial_lift (\fB__isl_take\fP \fBisl_qpolynomial\fP * qp, \fB__isl_take\fP \fBisl_space\fP * dim)"

.SS "\fB__isl_give\fP \fBisl_qpolynomial\fP* isl_qpolynomial_morph_domain (\fB__isl_take\fP \fBisl_qpolynomial\fP * qp, \fB__isl_take\fP \fBisl_morph\fP * morph)"

.SS "\fB__isl_give\fP \fBisl_qpolynomial\fP* isl_qpolynomial_mul_isl_int (\fB__isl_take\fP \fBisl_qpolynomial\fP * qp, \fBisl_int\fP v)"

.SS "\fB__isl_give\fP \fBisl_val\fP* isl_qpolynomial_opt_on_domain (\fB__isl_take\fP \fBisl_qpolynomial\fP * qp, \fB__isl_take\fP \fBisl_set\fP * set, int max)"

.SS "\fB__isl_give\fP \fBisl_qpolynomial\fP* isl_qpolynomial_rat_cst_on_domain (\fB__isl_take\fP \fBisl_space\fP * space, \fBconst\fP \fBisl_int\fP n, \fBconst\fP \fBisl_int\fP d)"

.SS "\fB__isl_give\fP \fBisl_qpolynomial\fP* isl_qpolynomial_realign_domain (\fB__isl_take\fP \fBisl_qpolynomial\fP * qp, \fB__isl_take\fP \fBisl_reordering\fP * r)"

.SS "\fB__isl_give\fP \fBisl_qpolynomial\fP* isl_qpolynomial_reset_domain_space (\fB__isl_take\fP \fBisl_qpolynomial\fP * qp, \fB__isl_take\fP \fBisl_space\fP * dim)"

.SS "\fB__isl_give\fP \fBisl_qpolynomial\fP* isl_qpolynomial_reset_space_and_domain (\fB__isl_take\fP \fBisl_qpolynomial\fP * qp, \fB__isl_take\fP \fBisl_space\fP * space, \fB__isl_take\fP \fBisl_space\fP * domain)"

.SS "\fB__isl_give\fP \fBisl_qpolynomial\fP* isl_qpolynomial_substitute_equalities (\fB__isl_take\fP \fBisl_qpolynomial\fP * qp, \fB__isl_take\fP \fBisl_basic_set\fP * eq)"

.SS "\fB__isl_give\fP \fBisl_qpolynomial\fP* isl_qpolynomial_var_pow_on_domain (\fB__isl_take\fP \fBisl_space\fP * dim, int pos, int power)"

.SS "void isl_term_get_num (\fB__isl_keep\fP \fBisl_term\fP * term, \fBisl_int\fP * n)"

.SS "\fB__isl_give\fP \fBisl_union_pw_qpolynomial_fold\fP* isl_union_pw_qpolynomial_fold_mul_isl_int (\fB__isl_take\fP \fBisl_union_pw_qpolynomial_fold\fP * upwf, \fBisl_int\fP v)"

.SS "\fB__isl_give\fP \fBisl_union_pw_qpolynomial\fP* isl_union_pw_qpolynomial_mul_isl_int (\fB__isl_take\fP \fBisl_union_pw_qpolynomial\fP * upwqp, \fBisl_int\fP v)"

.SS "\fB__isl_keep\fP struct \fBisl_upoly_cst\fP* isl_upoly_as_cst (\fB__isl_keep\fP struct \fBisl_upoly\fP * up)"

.SS "\fB__isl_keep\fP struct \fBisl_upoly_rec\fP* isl_upoly_as_rec (\fB__isl_keep\fP struct \fBisl_upoly\fP * up)"

.SS "\fB__isl_give\fP struct \fBisl_upoly\fP* isl_upoly_copy (\fB__isl_keep\fP struct \fBisl_upoly\fP * up)"

.SS "\fB__isl_give\fP struct \fBisl_upoly\fP* isl_upoly_cow (\fB__isl_take\fP struct \fBisl_upoly\fP * up)"

.SS "\fB__isl_give\fP struct \fBisl_upoly\fP* isl_upoly_dup (\fB__isl_keep\fP struct \fBisl_upoly\fP * up)"

.SS "void isl_upoly_free (\fB__isl_take\fP struct \fBisl_upoly\fP * up)"

.SS "int isl_upoly_is_cst (\fB__isl_keep\fP struct \fBisl_upoly\fP * up)"

.SS "int isl_upoly_is_negone (\fB__isl_keep\fP struct \fBisl_upoly\fP * up)"

.SS "int isl_upoly_is_one (\fB__isl_keep\fP struct \fBisl_upoly\fP * up)"

.SS "int isl_upoly_is_zero (\fB__isl_keep\fP struct \fBisl_upoly\fP * up)"

.SS "\fB__isl_give\fP struct \fBisl_upoly\fP* isl_upoly_mul (\fB__isl_take\fP struct \fBisl_upoly\fP * up1, \fB__isl_take\fP struct \fBisl_upoly\fP * up2)"

.SS "\fB__isl_give\fP struct \fBisl_upoly\fP* isl_upoly_mul_isl_int (\fB__isl_take\fP struct \fBisl_upoly\fP * up, \fBisl_int\fP v)"

.SS "\fB__isl_give\fP struct \fBisl_upoly\fP* isl_upoly_sum (\fB__isl_take\fP struct \fBisl_upoly\fP * up1, \fB__isl_take\fP struct \fBisl_upoly\fP * up2)"

.SS "\fB__isl_give\fP struct \fBisl_upoly\fP* isl_upoly_zero (struct \fBisl_ctx\fP * ctx)"

.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
