.TH "lib/isl/include/isl/vertices.h" 3 "Sun Jul 12 2020" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
lib/isl/include/isl/vertices.h
.SH SYNOPSIS
.br
.PP
\fC#include <isl/aff_type\&.h>\fP
.br
\fC#include <isl/set_type\&.h>\fP
.br

.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct \fBisl_external_vertex\fP \fBisl_vertex\fP"
.br
.ti -1c
.RI "typedef struct \fBisl_cell\fP \fBisl_cell\fP"
.br
.ti -1c
.RI "typedef struct \fBisl_vertices\fP \fBisl_vertices\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBisl_ctx\fP * \fBisl_vertex_get_ctx\fP (\fB__isl_keep\fP \fBisl_vertex\fP *vertex)"
.br
.ti -1c
.RI "int \fBisl_vertex_get_id\fP (\fB__isl_keep\fP \fBisl_vertex\fP *vertex)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_basic_set\fP * \fBisl_vertex_get_domain\fP (\fB__isl_keep\fP \fBisl_vertex\fP *vertex)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_multi_aff\fP * \fBisl_vertex_get_expr\fP (\fB__isl_keep\fP \fBisl_vertex\fP *vertex)"
.br
.ti -1c
.RI "void \fBisl_vertex_free\fP (\fB__isl_take\fP \fBisl_vertex\fP *vertex)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_vertices\fP * \fBisl_basic_set_compute_vertices\fP (\fB__isl_keep\fP \fBisl_basic_set\fP *bset)"
.br
.ti -1c
.RI "\fBisl_ctx\fP * \fBisl_vertices_get_ctx\fP (\fB__isl_keep\fP \fBisl_vertices\fP *vertices)"
.br
.ti -1c
.RI "int \fBisl_vertices_get_n_vertices\fP (\fB__isl_keep\fP \fBisl_vertices\fP *vertices)"
.br
.ti -1c
.RI "\fBisl_stat\fP \fBisl_vertices_foreach_vertex\fP (\fB__isl_keep\fP \fBisl_vertices\fP *vertices, \fBisl_stat\fP(*\fBfn\fP)(\fB__isl_take\fP \fBisl_vertex\fP *vertex, void *\fBuser\fP), void *\fBuser\fP)"
.br
.ti -1c
.RI "void \fBisl_vertices_free\fP (\fB__isl_take\fP \fBisl_vertices\fP *vertices)"
.br
.ti -1c
.RI "\fBisl_ctx\fP * \fBisl_cell_get_ctx\fP (\fB__isl_keep\fP \fBisl_cell\fP *cell)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_basic_set\fP * \fBisl_cell_get_domain\fP (\fB__isl_keep\fP \fBisl_cell\fP *cell)"
.br
.ti -1c
.RI "\fBisl_stat\fP \fBisl_cell_foreach_vertex\fP (\fB__isl_keep\fP \fBisl_cell\fP *cell, \fBisl_stat\fP(*\fBfn\fP)(\fB__isl_take\fP \fBisl_vertex\fP *vertex, void *\fBuser\fP), void *\fBuser\fP)"
.br
.ti -1c
.RI "void \fBisl_cell_free\fP (\fB__isl_take\fP \fBisl_cell\fP *cell)"
.br
.ti -1c
.RI "\fBisl_stat\fP \fBisl_vertices_foreach_cell\fP (\fB__isl_keep\fP \fBisl_vertices\fP *vertices, \fBisl_stat\fP(*\fBfn\fP)(\fB__isl_take\fP \fBisl_cell\fP *cell, void *\fBuser\fP), void *\fBuser\fP)"
.br
.in -1c
.SH "Typedef Documentation"
.PP 
.SS "typedef struct \fBisl_cell\fP \fBisl_cell\fP"

.SS "typedef struct \fBisl_external_vertex\fP \fBisl_vertex\fP"

.SS "typedef struct \fBisl_vertices\fP \fBisl_vertices\fP"

.SH "Function Documentation"
.PP 
.SS "\fB__isl_give\fP \fBisl_vertices\fP* isl_basic_set_compute_vertices (\fB__isl_keep\fP \fBisl_basic_set\fP * bset)"

.SS "\fBisl_stat\fP isl_cell_foreach_vertex (\fB__isl_keep\fP \fBisl_cell\fP * cell, \fBisl_stat\fP(*)(\fB__isl_take\fP \fBisl_vertex\fP *vertex, void *\fBuser\fP) fn, void * user)"

.SS "void isl_cell_free (\fB__isl_take\fP \fBisl_cell\fP * cell)"

.SS "\fBisl_ctx\fP* isl_cell_get_ctx (\fB__isl_keep\fP \fBisl_cell\fP * cell)"

.SS "\fB__isl_give\fP \fBisl_basic_set\fP* isl_cell_get_domain (\fB__isl_keep\fP \fBisl_cell\fP * cell)"

.SS "void isl_vertex_free (\fB__isl_take\fP \fBisl_vertex\fP * vertex)"

.SS "\fBisl_ctx\fP* isl_vertex_get_ctx (\fB__isl_keep\fP \fBisl_vertex\fP * vertex)"

.SS "\fB__isl_give\fP \fBisl_basic_set\fP* isl_vertex_get_domain (\fB__isl_keep\fP \fBisl_vertex\fP * vertex)"

.SS "\fB__isl_give\fP \fBisl_multi_aff\fP* isl_vertex_get_expr (\fB__isl_keep\fP \fBisl_vertex\fP * vertex)"

.SS "int isl_vertex_get_id (\fB__isl_keep\fP \fBisl_vertex\fP * vertex)"

.SS "\fBisl_stat\fP isl_vertices_foreach_cell (\fB__isl_keep\fP \fBisl_vertices\fP * vertices, \fBisl_stat\fP(*)(\fB__isl_take\fP \fBisl_cell\fP *cell, void *\fBuser\fP) fn, void * user)"

.SS "\fBisl_stat\fP isl_vertices_foreach_vertex (\fB__isl_keep\fP \fBisl_vertices\fP * vertices, \fBisl_stat\fP(*)(\fB__isl_take\fP \fBisl_vertex\fP *vertex, void *\fBuser\fP) fn, void * user)"

.SS "void isl_vertices_free (\fB__isl_take\fP \fBisl_vertices\fP * vertices)"

.SS "\fBisl_ctx\fP* isl_vertices_get_ctx (\fB__isl_keep\fP \fBisl_vertices\fP * vertices)"

.SS "int isl_vertices_get_n_vertices (\fB__isl_keep\fP \fBisl_vertices\fP * vertices)"

.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
