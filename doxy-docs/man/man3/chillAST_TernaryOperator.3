.TH "chillAST_TernaryOperator" 3 "Sun Jul 12 2020" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
chillAST_TernaryOperator
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <chill_ast\&.hh>\fP
.PP
Inherits \fBchillAST_node\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBCHILL_ASTNODE_TYPE\fP \fBgetType\fP () override"
.br
.ti -1c
.RI "\fBchillAST_TernaryOperator\fP ()"
.br
.ti -1c
.RI "\fBchillAST_TernaryOperator\fP (\fBconst\fP char *\fBop\fP, \fBchillAST_node\fP *cond, \fBchillAST_node\fP *\fBlhs\fP, \fBchillAST_node\fP *\fBrhs\fP)"
.br
.ti -1c
.RI "bool \fBisNotLeaf\fP () override"
.br
.ti -1c
.RI "bool \fBisLeaf\fP () override"
.br
.ti -1c
.RI "char * \fBgetOp\fP ()"
.br
.ti -1c
.RI "\fBchillAST_node\fP * \fBgetCond\fP ()"
.br
.ti -1c
.RI "\fBchillAST_node\fP * \fBgetRHS\fP ()"
.br
.ti -1c
.RI "\fBchillAST_node\fP * \fBgetLHS\fP ()"
.br
.ti -1c
.RI "void \fBsetCond\fP (\fBchillAST_node\fP *newc)"
.br
.ti -1c
.RI "void \fBsetLHS\fP (\fBchillAST_node\fP *newlhs)"
.br
.ti -1c
.RI "void \fBsetRHS\fP (\fBchillAST_node\fP *newrhs)"
.br
.ti -1c
.RI "\fBchillAST_node\fP * \fBconstantFold\fP () override"
.br
.RI "Folding constant, to some degree\&. "
.ti -1c
.RI "\fBchillAST_node\fP * \fBclone\fP () override"
.br
.ti -1c
.RI "void \fBreplaceChild\fP (\fBchillAST_node\fP *old, \fBchillAST_node\fP *newchild) override"
.br
.ti -1c
.RI "void \fBgatherArrayRefs\fP (std::vector< \fBchillAST_ArraySubscriptExpr\fP * > &refs, bool writtento) override"
.br
.ti -1c
.RI "void \fBgatherScalarRefs\fP (std::vector< \fBchillAST_DeclRefExpr\fP * > &refs, bool writtento) override"
.br
.ti -1c
.RI "void \fBgatherVarDeclsMore\fP (vector< \fBchillAST_VarDecl\fP * > &decls) override"
.br
.ti -1c
.RI "void \fBgatherVarLHSUsage\fP (vector< \fBchillAST_VarDecl\fP * > &decls) override"
.br
.RI "gather all variable that is used as a lefthand side operand "
.ti -1c
.RI "void \fBreplaceVarDecls\fP (\fBchillAST_VarDecl\fP *olddecl, \fBchillAST_VarDecl\fP *newdecl) override"
.br
.ti -1c
.RI "bool \fBfindLoopIndexesToReplace\fP (\fBchillAST_SymbolTable\fP *symtab, bool forcesync=false) override"
.br
.RI "this just looks for ForStmts with preferred index metacomment attached "
.ti -1c
.RI "void \fBloseLoopWithLoopVar\fP (char *\fBvar\fP) override"
.br
.RI "Replace the loop with the loop body, if loop is with this variable\&. "
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "char * \fBop\fP"
.br
.ti -1c
.RI "\fBchillAST_Child\fP< \fBchillAST_node\fP > \fBcondition\fP"
.br
.ti -1c
.RI "\fBchillAST_Child\fP< \fBchillAST_node\fP > \fBlhs\fP"
.br
.ti -1c
.RI "\fBchillAST_Child\fP< \fBchillAST_node\fP > \fBrhs\fP"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Constructor & Destructor Documentation"
.PP 
.SS "chillAST_TernaryOperator::chillAST_TernaryOperator ()"

.SS "chillAST_TernaryOperator::chillAST_TernaryOperator (\fBconst\fP char * op, \fBchillAST_node\fP * cond, \fBchillAST_node\fP * lhs, \fBchillAST_node\fP * rhs)"

.SH "Member Function Documentation"
.PP 
.SS "class \fBchillAST_node\fP * chillAST_TernaryOperator::clone ()\fC [override]\fP, \fC [virtual]\fP"

.PP
Reimplemented from \fBchillAST_node\fP\&.
.SS "class \fBchillAST_node\fP * chillAST_TernaryOperator::constantFold ()\fC [override]\fP, \fC [virtual]\fP"

.PP
Folding constant, to some degree\&. We should need to delegate this to the backend compiler 
.PP
\fBReturns\fP
.RS 4
This node 
.RE
.PP

.PP
Reimplemented from \fBchillAST_node\fP\&.
.SS "bool chillAST_TernaryOperator::findLoopIndexesToReplace (\fBchillAST_SymbolTable\fP * symtab, bool forcesync = \fCfalse\fP)\fC [inline]\fP, \fC [override]\fP, \fC [virtual]\fP"

.PP
this just looks for ForStmts with preferred index metacomment attached 
.PP
Reimplemented from \fBchillAST_node\fP\&.
.SS "void chillAST_TernaryOperator::gatherArrayRefs (std::vector< \fBchillAST_ArraySubscriptExpr\fP * > & refs, bool writtento)\fC [override]\fP, \fC [virtual]\fP"

.PP
Reimplemented from \fBchillAST_node\fP\&.
.SS "void chillAST_TernaryOperator::gatherScalarRefs (std::vector< \fBchillAST_DeclRefExpr\fP * > & refs, bool writtento)\fC [override]\fP, \fC [virtual]\fP"

.PP
Reimplemented from \fBchillAST_node\fP\&.
.SS "void chillAST_TernaryOperator::gatherVarDeclsMore (vector< \fBchillAST_VarDecl\fP * > & decls)\fC [inline]\fP, \fC [override]\fP, \fC [virtual]\fP"

.PP
Reimplemented from \fBchillAST_node\fP\&.
.SS "void chillAST_TernaryOperator::gatherVarLHSUsage (vector< \fBchillAST_VarDecl\fP * > & decls)\fC [override]\fP, \fC [virtual]\fP"

.PP
gather all variable that is used as a lefthand side operand 
.PP
Reimplemented from \fBchillAST_node\fP\&.
.SS "\fBchillAST_node\fP* chillAST_TernaryOperator::getCond ()\fC [inline]\fP"

.SS "\fBchillAST_node\fP* chillAST_TernaryOperator::getLHS ()\fC [inline]\fP"

.SS "char* chillAST_TernaryOperator::getOp ()\fC [inline]\fP"

.SS "\fBchillAST_node\fP* chillAST_TernaryOperator::getRHS ()\fC [inline]\fP"

.SS "\fBCHILL_ASTNODE_TYPE\fP chillAST_TernaryOperator::getType ()\fC [inline]\fP, \fC [override]\fP, \fC [virtual]\fP"

.PP
Reimplemented from \fBchillAST_node\fP\&.
.SS "bool chillAST_TernaryOperator::isLeaf ()\fC [inline]\fP, \fC [override]\fP, \fC [virtual]\fP"

.PP
Reimplemented from \fBchillAST_node\fP\&.
.SS "bool chillAST_TernaryOperator::isNotLeaf ()\fC [inline]\fP, \fC [override]\fP, \fC [virtual]\fP"

.PP
Reimplemented from \fBchillAST_node\fP\&.
.SS "void chillAST_TernaryOperator::loseLoopWithLoopVar (char * var)\fC [inline]\fP, \fC [override]\fP, \fC [virtual]\fP"

.PP
Replace the loop with the loop body, if loop is with this variable\&. The loop will be spread across a bunch of cores that will each calculate their own loop variable\&.
.PP
\fBParameters\fP
.RS 4
\fIvar\fP 
.RE
.PP

.PP
Reimplemented from \fBchillAST_node\fP\&.
.SS "void chillAST_TernaryOperator::replaceChild (\fBchillAST_node\fP * old, \fBchillAST_node\fP * newchild)\fC [override]\fP, \fC [virtual]\fP"

.PP
Reimplemented from \fBchillAST_node\fP\&.
.SS "void chillAST_TernaryOperator::replaceVarDecls (\fBchillAST_VarDecl\fP * olddecl, \fBchillAST_VarDecl\fP * newdecl)\fC [override]\fP, \fC [virtual]\fP"

.PP
Reimplemented from \fBchillAST_node\fP\&.
.SS "void chillAST_TernaryOperator::setCond (\fBchillAST_node\fP * newc)\fC [inline]\fP"

.SS "void chillAST_TernaryOperator::setLHS (\fBchillAST_node\fP * newlhs)\fC [inline]\fP"

.SS "void chillAST_TernaryOperator::setRHS (\fBchillAST_node\fP * newrhs)\fC [inline]\fP"

.SH "Member Data Documentation"
.PP 
.SS "\fBchillAST_Child\fP<\fBchillAST_node\fP> chillAST_TernaryOperator::condition"

.SS "\fBchillAST_Child\fP<\fBchillAST_node\fP> chillAST_TernaryOperator::lhs"

.SS "char* chillAST_TernaryOperator::op"

.SS "\fBchillAST_Child\fP<\fBchillAST_node\fP> chillAST_TernaryOperator::rhs"


.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
