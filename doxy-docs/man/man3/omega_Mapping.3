.TH "omega::Mapping" 3 "Sun Jul 12 2020" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
omega::Mapping \- \fBMapping\fP for relations\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Rel_map\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBMapping\fP (int no_in, int no_out)"
.br
.ti -1c
.RI "\fBMapping\fP (int no_set)"
.br
.ti -1c
.RI "\fBMapping\fP (\fBconst\fP \fBMapping\fP &\fBm\fP)"
.br
.ti -1c
.RI "void \fBset_map\fP (\fBVar_Kind\fP in_kind, int \fBpos\fP, \fBVar_Kind\fP type, int \fBmap\fP)"
.br
.ti -1c
.RI "void \fBset_map_in\fP (int \fBpos\fP, \fBVar_Kind\fP type, int \fBmap\fP)"
.br
.ti -1c
.RI "void \fBset_map_set\fP (int \fBpos\fP, \fBVar_Kind\fP type, int \fBmap\fP)"
.br
.ti -1c
.RI "void \fBset_map_out\fP (int \fBpos\fP, \fBVar_Kind\fP type, int \fBmap\fP)"
.br
.ti -1c
.RI "\fBVar_Kind\fP \fBget_map_in_kind\fP (int \fBpos\fP) \fBconst\fP"
.br
.ti -1c
.RI "int \fBget_map_in_pos\fP (int \fBpos\fP) \fBconst\fP"
.br
.ti -1c
.RI "\fBVar_Kind\fP \fBget_map_out_kind\fP (int \fBpos\fP) \fBconst\fP"
.br
.ti -1c
.RI "int \fBget_map_out_pos\fP (int \fBpos\fP) \fBconst\fP"
.br
.ti -1c
.RI "int \fBn_in\fP () \fBconst\fP"
.br
.ti -1c
.RI "int \fBn_out\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBArgument_Tuple\fP \fBget_tuple_fate\fP (\fBArgument_Tuple\fP t, int prefix=\-1) \fBconst\fP"
.br
.ti -1c
.RI "\fBArgument_Tuple\fP \fBget_set_fate\fP (int prefix=\-1) \fBconst\fP"
.br
.ti -1c
.RI "\fBArgument_Tuple\fP \fBget_input_fate\fP (int prefix=\-1) \fBconst\fP"
.br
.ti -1c
.RI "\fBArgument_Tuple\fP \fBget_output_fate\fP (int prefix=\-1) \fBconst\fP"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBMapping\fP \fBIdentity\fP (int inp, int outp)"
.br
.ti -1c
.RI "static \fBMapping\fP \fBIdentity\fP (int setvars)"
.br
.in -1c
.SH "Detailed Description"
.PP 
\fBMapping\fP for relations\&. 

When a relation operation needs to re-arrange the variables, it describes the re-arragement with a mapping, and then calls align to re-arrange them\&.
.PP
In a mapping, map_in (map_out/map_set) gives the new type and position of each of the old input (output/set) variables\&. For variables being mapped to Input, Output, or \fBSet\fP variables, the position is the new position in the tuple\&. For variables being mapped to Exists_Var, Forall_Var, or Wildcard_Var, the positions can be used to map multiple variables to the same quantified variable, by providing the same position\&. Each variable with a negative position is given a unique quantified variable that is NOT listed in the seen_exists_ids list\&. I'm not sure what the positions mean for Global_Vars - perhaps they are ignored?
.PP
Currently, align seems to support only mapping to \fBSet\fP, Input, Output, and Exists vars\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "omega::Mapping::Mapping (int no_in, int no_out)\fC [inline]\fP"

.SS "omega::Mapping::Mapping (int no_set)\fC [inline]\fP"

.SS "omega::Mapping::Mapping (\fBconst\fP \fBMapping\fP & m)\fC [inline]\fP"

.SH "Member Function Documentation"
.PP 
.SS "\fBArgument_Tuple\fP omega::Mapping::get_input_fate (int prefix = \fC\-1\fP) const\fC [inline]\fP"

.SS "\fBVar_Kind\fP omega::Mapping::get_map_in_kind (int pos) const\fC [inline]\fP"

.SS "int omega::Mapping::get_map_in_pos (int pos) const\fC [inline]\fP"

.SS "\fBVar_Kind\fP omega::Mapping::get_map_out_kind (int pos) const\fC [inline]\fP"

.SS "int omega::Mapping::get_map_out_pos (int pos) const\fC [inline]\fP"

.SS "\fBArgument_Tuple\fP omega::Mapping::get_output_fate (int prefix = \fC\-1\fP) const\fC [inline]\fP"

.SS "\fBArgument_Tuple\fP omega::Mapping::get_set_fate (int prefix = \fC\-1\fP) const\fC [inline]\fP"

.SS "\fBArgument_Tuple\fP omega::Mapping::get_tuple_fate (\fBArgument_Tuple\fP t, int prefix = \fC\-1\fP) const\fC [inline]\fP"
If a tuple as a whole becomes the new Input or Output tuple, return the \fBTuple\fP of they will become (Input, Output) Return Unknown_Tuple otherwise 
.SS "static \fBMapping\fP omega::Mapping::Identity (int inp, int outp)\fC [inline]\fP, \fC [static]\fP"

.SS "static \fBMapping\fP omega::Mapping::Identity (int setvars)\fC [inline]\fP, \fC [static]\fP"

.SS "int omega::Mapping::n_in () const\fC [inline]\fP"

.SS "int omega::Mapping::n_out () const\fC [inline]\fP"

.SS "void omega::Mapping::set_map (\fBVar_Kind\fP in_kind, int pos, \fBVar_Kind\fP type, int map)\fC [inline]\fP"

.SS "void omega::Mapping::set_map_in (int pos, \fBVar_Kind\fP type, int map)\fC [inline]\fP"

.SS "void omega::Mapping::set_map_out (int pos, \fBVar_Kind\fP type, int map)\fC [inline]\fP"

.SS "void omega::Mapping::set_map_set (int pos, \fBVar_Kind\fP type, int map)\fC [inline]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
