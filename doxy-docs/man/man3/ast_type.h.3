.TH "lib/isl/include/isl/ast_type.h" 3 "Sun Jul 12 2020" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
lib/isl/include/isl/ast_type.h
.SH SYNOPSIS
.br
.PP
\fC#include <isl/list\&.h>\fP
.br

.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct \fBisl_ast_expr\fP \fBisl_ast_expr\fP"
.br
.ti -1c
.RI "typedef struct \fBisl_ast_node\fP \fBisl_ast_node\fP"
.br
.ti -1c
.RI "typedef struct \fBisl_ast_print_options\fP \fBisl_ast_print_options\fP"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBisl_ast_op_type\fP { \fBisl_ast_op_error\fP = -1, \fBisl_ast_op_and\fP, \fBisl_ast_op_and_then\fP, \fBisl_ast_op_or\fP, \fBisl_ast_op_or_else\fP, \fBisl_ast_op_max\fP, \fBisl_ast_op_min\fP, \fBisl_ast_op_minus\fP, \fBisl_ast_op_add\fP, \fBisl_ast_op_sub\fP, \fBisl_ast_op_mul\fP, \fBisl_ast_op_div\fP, \fBisl_ast_op_fdiv_q\fP, \fBisl_ast_op_pdiv_q\fP, \fBisl_ast_op_pdiv_r\fP, \fBisl_ast_op_zdiv_r\fP, \fBisl_ast_op_cond\fP, \fBisl_ast_op_select\fP, \fBisl_ast_op_eq\fP, \fBisl_ast_op_le\fP, \fBisl_ast_op_lt\fP, \fBisl_ast_op_ge\fP, \fBisl_ast_op_gt\fP, \fBisl_ast_op_call\fP, \fBisl_ast_op_access\fP, \fBisl_ast_op_member\fP, \fBisl_ast_op_address_of\fP }"
.br
.ti -1c
.RI "enum \fBisl_ast_expr_type\fP { \fBisl_ast_expr_error\fP = -1, \fBisl_ast_expr_op\fP, \fBisl_ast_expr_id\fP, \fBisl_ast_expr_int\fP }"
.br
.ti -1c
.RI "enum \fBisl_ast_node_type\fP { \fBisl_ast_node_error\fP = -1, \fBisl_ast_node_for\fP = 1, \fBisl_ast_node_if\fP, \fBisl_ast_node_block\fP, \fBisl_ast_node_mark\fP, \fBisl_ast_node_user\fP }"
.br
.ti -1c
.RI "enum \fBisl_ast_loop_type\fP { \fBisl_ast_loop_error\fP = -1, \fBisl_ast_loop_default\fP = 0, \fBisl_ast_loop_atomic\fP, \fBisl_ast_loop_unroll\fP, \fBisl_ast_loop_separate\fP }"
.br
.in -1c
.SH "Typedef Documentation"
.PP 
.SS "typedef struct \fBisl_ast_expr\fP \fBisl_ast_expr\fP"

.SS "typedef struct \fBisl_ast_node\fP \fBisl_ast_node\fP"

.SS "typedef struct \fBisl_ast_print_options\fP \fBisl_ast_print_options\fP"

.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBisl_ast_expr_type\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIisl_ast_expr_error \fP\fP
.TP
\fB\fIisl_ast_expr_op \fP\fP
.TP
\fB\fIisl_ast_expr_id \fP\fP
.TP
\fB\fIisl_ast_expr_int \fP\fP
.SS "enum \fBisl_ast_loop_type\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIisl_ast_loop_error \fP\fP
.TP
\fB\fIisl_ast_loop_default \fP\fP
.TP
\fB\fIisl_ast_loop_atomic \fP\fP
.TP
\fB\fIisl_ast_loop_unroll \fP\fP
.TP
\fB\fIisl_ast_loop_separate \fP\fP
.SS "enum \fBisl_ast_node_type\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIisl_ast_node_error \fP\fP
.TP
\fB\fIisl_ast_node_for \fP\fP
.TP
\fB\fIisl_ast_node_if \fP\fP
.TP
\fB\fIisl_ast_node_block \fP\fP
.TP
\fB\fIisl_ast_node_mark \fP\fP
.TP
\fB\fIisl_ast_node_user \fP\fP
.SS "enum \fBisl_ast_op_type\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIisl_ast_op_error \fP\fP
.TP
\fB\fIisl_ast_op_and \fP\fP
.TP
\fB\fIisl_ast_op_and_then \fP\fP
.TP
\fB\fIisl_ast_op_or \fP\fP
.TP
\fB\fIisl_ast_op_or_else \fP\fP
.TP
\fB\fIisl_ast_op_max \fP\fP
.TP
\fB\fIisl_ast_op_min \fP\fP
.TP
\fB\fIisl_ast_op_minus \fP\fP
.TP
\fB\fIisl_ast_op_add \fP\fP
.TP
\fB\fIisl_ast_op_sub \fP\fP
.TP
\fB\fIisl_ast_op_mul \fP\fP
.TP
\fB\fIisl_ast_op_div \fP\fP
.TP
\fB\fIisl_ast_op_fdiv_q \fP\fP
.TP
\fB\fIisl_ast_op_pdiv_q \fP\fP
.TP
\fB\fIisl_ast_op_pdiv_r \fP\fP
.TP
\fB\fIisl_ast_op_zdiv_r \fP\fP
.TP
\fB\fIisl_ast_op_cond \fP\fP
.TP
\fB\fIisl_ast_op_select \fP\fP
.TP
\fB\fIisl_ast_op_eq \fP\fP
.TP
\fB\fIisl_ast_op_le \fP\fP
.TP
\fB\fIisl_ast_op_lt \fP\fP
.TP
\fB\fIisl_ast_op_ge \fP\fP
.TP
\fB\fIisl_ast_op_gt \fP\fP
.TP
\fB\fIisl_ast_op_call \fP\fP
.TP
\fB\fIisl_ast_op_access \fP\fP
.TP
\fB\fIisl_ast_op_member \fP\fP
.TP
\fB\fIisl_ast_op_address_of \fP\fP
.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
