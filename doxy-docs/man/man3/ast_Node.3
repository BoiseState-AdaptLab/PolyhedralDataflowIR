.TH "ast.Node" 3 "Sun Jul 12 2020" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ast.Node
.SH SYNOPSIS
.br
.PP
.PP
Inherits object\&.
.PP
Inherited by \fBast\&.Declaration\fP, \fBast\&.Expression\fP, \fBast\&.Literal\fP, \fBast\&.Method\fP, \fBast\&.Namespace\fP, \fBast\&.NamespaceRef\fP, \fBast\&.Operator\fP, \fBast\&.Program\fP, \fBast\&.Statement\fP, \fBast\&.TypeRef\fP, and \fBast\&.UsingDir\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "def \fB__init__\fP (self, \fBvalue\fP='', \fBstart\fP=(0, 0), \fBend\fP=(0, 0), \fBlevel\fP=0, \fBlabel\fP='\fBNode\fP')"
.br
.ti -1c
.RI "def \fBgetChildren\fP (self)"
.br
.ti -1c
.RI "def \fBaddChild\fP (self, child)"
.br
.ti -1c
.RI "def \fBinsertChild\fP (self, child, index)"
.br
.ti -1c
.RI "def \fBgetParent\fP (self)"
.br
.ti -1c
.RI "def \fBsetParent\fP (self, \fBparent\fP)"
.br
.ti -1c
.RI "def \fBgetValue\fP (self)"
.br
.ti -1c
.RI "def \fBsetValue\fP (self, \fBvalue\fP)"
.br
.ti -1c
.RI "def \fBgetAttr\fP (self, \fBkey\fP)"
.br
.ti -1c
.RI "def \fBsetAttr\fP (self, \fBkey\fP, \fBvalue\fP)"
.br
.ti -1c
.RI "def \fBgetLabel\fP (self)"
.br
.ti -1c
.RI "def \fBgetType\fP (self)"
.br
.ti -1c
.RI "def \fBisPointer\fP (self)"
.br
.ti -1c
.RI "def \fBisRoot\fP (self)"
.br
.ti -1c
.RI "def \fBisLeaf\fP (self)"
.br
.ti -1c
.RI "def \fBaccept\fP (self, visitor)"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBvalue\fP"
.br
.ti -1c
.RI "\fBstart\fP"
.br
.ti -1c
.RI "\fBend\fP"
.br
.ti -1c
.RI "\fBlevel\fP"
.br
.ti -1c
.RI "\fBlabel\fP"
.br
.ti -1c
.RI "\fBparent\fP"
.br
.ti -1c
.RI "\fBtype\fP"
.br
.ti -1c
.RI "\fBchildren\fP"
.br
.ti -1c
.RI "\fBattributes\fP"
.br
.in -1c
.SH "Constructor & Destructor Documentation"
.PP 
.SS "def ast\&.Node\&.__init__ ( self,  value = \fC''\fP,  start = \fC(0,0)\fP,  end = \fC(0,0)\fP,  level = \fC0\fP,  label = \fC'\fBNode\fP'\fP)"

.PP
Reimplemented in \fBast\&.VarDecl\fP, \fBast\&.UsingDir\fP, \fBast\&.UnexposedExpr\fP, \fBast\&.UnaryOper\fP, \fBast\&.TypeRef\fP, \fBast\&.TypedefDecl\fP, \fBast\&.StructDecl\fP, \fBast\&.StringLiteral\fP, \fBast\&.Statement\fP, \fBast\&.ReturnStmt\fP, \fBast\&.Program\fP, \fBast\&.ParenExpr\fP, \fBast\&.ParamDecl\fP, \fBast\&.Operator\fP, \fBast\&.NullStmt\fP, \fBast\&.NullExpr\fP, \fBast\&.NamespaceRef\fP, \fBast\&.Namespace\fP, \fBast\&.Method\fP, \fBast\&.MemberRefExpr\fP, \fBast\&.Literal\fP, \fBast\&.LabelStmt\fP, \fBast\&.IntLiteral\fP, \fBast\&.IfStmt\fP, \fBast\&.FunctionDecl\fP, \fBast\&.ForStmt\fP, \fBast\&.FloatLiteral\fP, \fBast\&.FieldDecl\fP, \fBast\&.Expression\fP, \fBast\&.Destructor\fP, \fBast\&.DeclStmt\fP, \fBast\&.DeclRefExpr\fP, \fBast\&.Declaration\fP, \fBast\&.Constructor\fP, \fBast\&.Condition\fP, \fBast\&.CompoundStmt\fP, \fBast\&.CompoundAssignOper\fP, \fBast\&.ClassDecl\fP, \fBast\&.CallExpr\fP, \fBast\&.BinaryOper\fP, \fBast\&.ArraySubscriptExpr\fP, and \fBast\&.AccessSpecDecl\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "def ast\&.Node\&.accept ( self,  visitor)"

.SS "def ast\&.Node\&.addChild ( self,  child)"

.SS "def ast\&.Node\&.getAttr ( self,  key)"

.SS "def ast\&.Node\&.getChildren ( self)"

.SS "def ast\&.Node\&.getLabel ( self)"

.SS "def ast\&.Node\&.getParent ( self)"

.SS "def ast\&.Node\&.getType ( self)"

.SS "def ast\&.Node\&.getValue ( self)"

.SS "def ast\&.Node\&.insertChild ( self,  child,  index)"

.SS "def ast\&.Node\&.isLeaf ( self)"

.SS "def ast\&.Node\&.isPointer ( self)"

.SS "def ast\&.Node\&.isRoot ( self)"

.SS "def ast\&.Node\&.setAttr ( self,  key,  value)"

.SS "def ast\&.Node\&.setParent ( self,  parent)"

.SS "def ast\&.Node\&.setValue ( self,  value)"

.SH "Member Data Documentation"
.PP 
.SS "ast\&.Node\&.attributes"

.SS "ast\&.Node\&.children"

.SS "ast\&.Node\&.end"

.SS "ast\&.Node\&.label"

.SS "ast\&.Node\&.level"

.SS "ast\&.Node\&.parent"

.SS "ast\&.Node\&.start"

.SS "ast\&.Node\&.type"

.SS "ast\&.Node\&.value"


.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
