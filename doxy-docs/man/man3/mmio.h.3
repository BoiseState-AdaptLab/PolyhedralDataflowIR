.TH "src/util/mmio.h" 3 "Sun Jul 12 2020" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/util/mmio.h
.SH SYNOPSIS
.br
.PP
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBMM_MAX_LINE_LENGTH\fP   1025"
.br
.ti -1c
.RI "#define \fBMatrixMarketBanner\fP   '%%MatrixMarket'"
.br
.ti -1c
.RI "#define \fBMM_MAX_TOKEN_LENGTH\fP   64"
.br
.ti -1c
.RI "#define \fBmm_is_matrix\fP(typecode)   ((typecode)[0]=='M')"
.br
.ti -1c
.RI "#define \fBmm_is_sparse\fP(typecode)   ((typecode)[1]=='\fBC\fP')"
.br
.ti -1c
.RI "#define \fBmm_is_coordinate\fP(typecode)   ((typecode)[1]=='\fBC\fP')"
.br
.ti -1c
.RI "#define \fBmm_is_dense\fP(typecode)   ((typecode)[1]=='\fBA\fP')"
.br
.ti -1c
.RI "#define \fBmm_is_array\fP(typecode)   ((typecode)[1]=='\fBA\fP')"
.br
.ti -1c
.RI "#define \fBmm_is_complex\fP(typecode)   ((typecode)[2]=='\fBC\fP')"
.br
.ti -1c
.RI "#define \fBmm_is_real\fP(typecode)   ((typecode)[2]=='\fBR\fP')"
.br
.ti -1c
.RI "#define \fBmm_is_pattern\fP(typecode)   ((typecode)[2]=='\fBP\fP')"
.br
.ti -1c
.RI "#define \fBmm_is_integer\fP(typecode)   ((typecode)[2]=='I')"
.br
.ti -1c
.RI "#define \fBmm_is_symmetric\fP(typecode)   ((typecode)[3]=='\fBS\fP')"
.br
.ti -1c
.RI "#define \fBmm_is_general\fP(typecode)   ((typecode)[3]=='\fBG\fP')"
.br
.ti -1c
.RI "#define \fBmm_is_skew\fP(typecode)   ((typecode)[3]=='K')"
.br
.ti -1c
.RI "#define \fBmm_is_hermitian\fP(typecode)   ((typecode)[3]=='H')"
.br
.ti -1c
.RI "#define \fBmm_set_matrix\fP(typecode)   ((*typecode)[0]='M')"
.br
.ti -1c
.RI "#define \fBmm_set_coordinate\fP(typecode)   ((*typecode)[1]='\fBC\fP')"
.br
.ti -1c
.RI "#define \fBmm_set_array\fP(typecode)   ((*typecode)[1]='\fBA\fP')"
.br
.ti -1c
.RI "#define \fBmm_set_dense\fP(typecode)   \fBmm_set_array\fP(typecode)"
.br
.ti -1c
.RI "#define \fBmm_set_sparse\fP(typecode)   \fBmm_set_coordinate\fP(typecode)"
.br
.ti -1c
.RI "#define \fBmm_set_complex\fP(typecode)   ((*typecode)[2]='\fBC\fP')"
.br
.ti -1c
.RI "#define \fBmm_set_real\fP(typecode)   ((*typecode)[2]='\fBR\fP')"
.br
.ti -1c
.RI "#define \fBmm_set_pattern\fP(typecode)   ((*typecode)[2]='\fBP\fP')"
.br
.ti -1c
.RI "#define \fBmm_set_integer\fP(typecode)   ((*typecode)[2]='I')"
.br
.ti -1c
.RI "#define \fBmm_set_symmetric\fP(typecode)   ((*typecode)[3]='\fBS\fP')"
.br
.ti -1c
.RI "#define \fBmm_set_general\fP(typecode)   ((*typecode)[3]='\fBG\fP')"
.br
.ti -1c
.RI "#define \fBmm_set_skew\fP(typecode)   ((*typecode)[3]='K')"
.br
.ti -1c
.RI "#define \fBmm_set_hermitian\fP(typecode)   ((*typecode)[3]='H')"
.br
.ti -1c
.RI "#define \fBmm_clear_typecode\fP(typecode)"
.br
.ti -1c
.RI "#define \fBmm_initialize_typecode\fP(typecode)   \fBmm_clear_typecode\fP(typecode)"
.br
.ti -1c
.RI "#define \fBMM_COULD_NOT_READ_FILE\fP   11"
.br
.ti -1c
.RI "#define \fBMM_PREMATURE_EOF\fP   12"
.br
.ti -1c
.RI "#define \fBMM_NOT_MTX\fP   13"
.br
.ti -1c
.RI "#define \fBMM_NO_HEADER\fP   14"
.br
.ti -1c
.RI "#define \fBMM_UNSUPPORTED_TYPE\fP   15"
.br
.ti -1c
.RI "#define \fBMM_LINE_TOO_LONG\fP   16"
.br
.ti -1c
.RI "#define \fBMM_COULD_NOT_WRITE_FILE\fP   17"
.br
.ti -1c
.RI "#define \fBMM_MTX_STR\fP   'matrix'"
.br
.ti -1c
.RI "#define \fBMM_ARRAY_STR\fP   'array'"
.br
.ti -1c
.RI "#define \fBMM_DENSE_STR\fP   'array'"
.br
.ti -1c
.RI "#define \fBMM_COORDINATE_STR\fP   'coordinate'"
.br
.ti -1c
.RI "#define \fBMM_SPARSE_STR\fP   'coordinate'"
.br
.ti -1c
.RI "#define \fBMM_COMPLEX_STR\fP   'complex'"
.br
.ti -1c
.RI "#define \fBMM_REAL_STR\fP   'real'"
.br
.ti -1c
.RI "#define \fBMM_INT_STR\fP   'integer'"
.br
.ti -1c
.RI "#define \fBMM_GENERAL_STR\fP   'general'"
.br
.ti -1c
.RI "#define \fBMM_SYMM_STR\fP   'symmetric'"
.br
.ti -1c
.RI "#define \fBMM_HERM_STR\fP   'hermitian'"
.br
.ti -1c
.RI "#define \fBMM_SKEW_STR\fP   'skew\-symmetric'"
.br
.ti -1c
.RI "#define \fBMM_PATTERN_STR\fP   'pattern'"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef float \fBreal\fP"
.br
.ti -1c
.RI "typedef char \fBMM_typecode\fP[4]"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "char * \fBmm_typecode_to_str\fP (\fBMM_typecode\fP matcode)"
.br
.ti -1c
.RI "int \fBmm_read\fP (\fBconst\fP char *filepath, unsigned *nrows, unsigned **rows, unsigned *ncols, unsigned **cols, unsigned *nnz, \fBreal\fP **vals)"
.br
.ti -1c
.RI "int \fBmm_free\fP (unsigned **rows, unsigned **cols, \fBreal\fP **vals)"
.br
.ti -1c
.RI "int \fBmm_read_banner\fP (FILE *\fBf\fP, \fBMM_typecode\fP *matcode)"
.br
.ti -1c
.RI "int \fBmm_read_mtx_crd_size\fP (FILE *\fBf\fP, int *M, int *\fBN\fP, int *nz)"
.br
.ti -1c
.RI "int \fBmm_read_mtx_array_size\fP (FILE *\fBf\fP, int *M, int *\fBN\fP)"
.br
.ti -1c
.RI "int \fBmm_write_banner\fP (FILE *\fBf\fP, \fBMM_typecode\fP matcode)"
.br
.ti -1c
.RI "int \fBmm_write_mtx_crd_size\fP (FILE *\fBf\fP, int M, int \fBN\fP, int nz)"
.br
.ti -1c
.RI "int \fBmm_write_mtx_array_size\fP (FILE *\fBf\fP, int M, int \fBN\fP)"
.br
.ti -1c
.RI "int \fBmm_is_valid\fP (\fBMM_typecode\fP matcode)"
.br
.ti -1c
.RI "int \fBmm_write_mtx_crd\fP (char fname[], int M, int \fBN\fP, int nz, int I[], int J[], double \fBval\fP[], \fBMM_typecode\fP matcode)"
.br
.ti -1c
.RI "int \fBmm_read_mtx_crd_data\fP (FILE *\fBf\fP, int M, int \fBN\fP, int nz, int I[], int J[], double \fBval\fP[], \fBMM_typecode\fP matcode)"
.br
.ti -1c
.RI "int \fBmm_read_mtx_crd_entry\fP (FILE *\fBf\fP, int *I, int *J, double *\fBreal\fP, double *img, \fBMM_typecode\fP matcode)"
.br
.ti -1c
.RI "int \fBmm_read_unsymmetric_sparse\fP (\fBconst\fP char *fname, int *M_, int *N_, int *nz_, double **val_, int **I_, int **J_)"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define MatrixMarketBanner   '%%MatrixMarket'"

.SS "#define MM_ARRAY_STR   'array'"

.SS "#define mm_clear_typecode(typecode)"
\fBValue:\fP
.PP
.nf
                                   ((*typecode)[0]=(*typecode)[1]= \
                                    (*typecode)[2]=' ',(*typecode)[3]='G')
.fi
.SS "#define MM_COMPLEX_STR   'complex'"

.SS "#define MM_COORDINATE_STR   'coordinate'"

.SS "#define MM_COULD_NOT_READ_FILE   11"

.SS "#define MM_COULD_NOT_WRITE_FILE   17"

.SS "#define MM_DENSE_STR   'array'"

.SS "#define MM_GENERAL_STR   'general'"

.SS "#define MM_HERM_STR   'hermitian'"

.SS "#define mm_initialize_typecode(typecode)   \fBmm_clear_typecode\fP(typecode)"

.SS "#define MM_INT_STR   'integer'"

.SS "#define mm_is_array(typecode)   ((typecode)[1]=='\fBA\fP')"

.SS "#define mm_is_complex(typecode)   ((typecode)[2]=='\fBC\fP')"

.SS "#define mm_is_coordinate(typecode)   ((typecode)[1]=='\fBC\fP')"

.SS "#define mm_is_dense(typecode)   ((typecode)[1]=='\fBA\fP')"

.SS "#define mm_is_general(typecode)   ((typecode)[3]=='\fBG\fP')"

.SS "#define mm_is_hermitian(typecode)   ((typecode)[3]=='H')"

.SS "#define mm_is_integer(typecode)   ((typecode)[2]=='I')"

.SS "#define mm_is_matrix(typecode)   ((typecode)[0]=='M')"

.SS "#define mm_is_pattern(typecode)   ((typecode)[2]=='\fBP\fP')"

.SS "#define mm_is_real(typecode)   ((typecode)[2]=='\fBR\fP')"

.SS "#define mm_is_skew(typecode)   ((typecode)[3]=='K')"

.SS "#define mm_is_sparse(typecode)   ((typecode)[1]=='\fBC\fP')"

.SS "#define mm_is_symmetric(typecode)   ((typecode)[3]=='\fBS\fP')"

.SS "#define MM_LINE_TOO_LONG   16"

.SS "#define MM_MAX_LINE_LENGTH   1025"

.SS "#define MM_MAX_TOKEN_LENGTH   64"

.SS "#define MM_MTX_STR   'matrix'"

.SS "#define MM_NO_HEADER   14"

.SS "#define MM_NOT_MTX   13"

.SS "#define MM_PATTERN_STR   'pattern'"

.SS "#define MM_PREMATURE_EOF   12"

.SS "#define MM_REAL_STR   'real'"

.SS "#define mm_set_array(typecode)   ((*typecode)[1]='\fBA\fP')"

.SS "#define mm_set_complex(typecode)   ((*typecode)[2]='\fBC\fP')"

.SS "#define mm_set_coordinate(typecode)   ((*typecode)[1]='\fBC\fP')"

.SS "#define mm_set_dense(typecode)   \fBmm_set_array\fP(typecode)"

.SS "#define mm_set_general(typecode)   ((*typecode)[3]='\fBG\fP')"

.SS "#define mm_set_hermitian(typecode)   ((*typecode)[3]='H')"

.SS "#define mm_set_integer(typecode)   ((*typecode)[2]='I')"

.SS "#define mm_set_matrix(typecode)   ((*typecode)[0]='M')"

.SS "#define mm_set_pattern(typecode)   ((*typecode)[2]='\fBP\fP')"

.SS "#define mm_set_real(typecode)   ((*typecode)[2]='\fBR\fP')"

.SS "#define mm_set_skew(typecode)   ((*typecode)[3]='K')"

.SS "#define mm_set_sparse(typecode)   \fBmm_set_coordinate\fP(typecode)"

.SS "#define mm_set_symmetric(typecode)   ((*typecode)[3]='\fBS\fP')"

.SS "#define MM_SKEW_STR   'skew\-symmetric'"

.SS "#define MM_SPARSE_STR   'coordinate'"

.SS "#define MM_SYMM_STR   'symmetric'"

.SS "#define MM_UNSUPPORTED_TYPE   15"

.SH "Typedef Documentation"
.PP 
.SS "typedef char MM_typecode[4]"

.SS "typedef float \fBreal\fP"

.SH "Function Documentation"
.PP 
.SS "int mm_free (unsigned ** rows, unsigned ** cols, \fBreal\fP ** vals)"

.SS "int mm_is_valid (\fBMM_typecode\fP matcode)"

.SS "int mm_read (\fBconst\fP char * filepath, unsigned * nrows, unsigned ** rows, unsigned * ncols, unsigned ** cols, unsigned * nnz, \fBreal\fP ** vals)"

.SS "int mm_read_banner (FILE * f, \fBMM_typecode\fP * matcode)"

.SS "int mm_read_mtx_array_size (FILE * f, int * M, int * N)"

.SS "int mm_read_mtx_crd_data (FILE * f, int M, int N, int nz, int I[], int J[], double val[], \fBMM_typecode\fP matcode)"

.SS "int mm_read_mtx_crd_entry (FILE * f, int * I, int * J, double * real, double * img, \fBMM_typecode\fP matcode)"

.SS "int mm_read_mtx_crd_size (FILE * f, int * M, int * N, int * nz)"

.SS "int mm_read_unsymmetric_sparse (\fBconst\fP char * fname, int * M_, int * N_, int * nz_, double ** val_, int ** I_, int ** J_)"

.SS "char* mm_typecode_to_str (\fBMM_typecode\fP matcode)"

.SS "int mm_write_banner (FILE * f, \fBMM_typecode\fP matcode)"

.SS "int mm_write_mtx_array_size (FILE * f, int M, int N)"

.SS "int mm_write_mtx_crd (char fname[], int M, int N, int nz, int I[], int J[], double val[], \fBMM_typecode\fP matcode)"

.SS "int mm_write_mtx_crd_size (FILE * f, int M, int N, int nz)"

.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
