.TH "test::TensorDecompTest" 3 "Sun Jul 12 2020" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
test::TensorDecompTest
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <TensorDecompTest\&.hpp>\fP
.PP
Inherits \fBtest::InspExecTest\fP\&.
.PP
Inherited by \fBtest::TensorDecompTestCOO\fP, \fBtest::TensorDecompTestCSF\fP, and \fBtest::TensorDecompTestHiCOO\fP\&.
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBTensorDecompTest\fP (\fBconst\fP string &\fBname\fP='TensorDecompTest')"
.br
.ti -1c
.RI "virtual \fB~TensorDecompTest\fP ()"
.br
.ti -1c
.RI "void \fBSetUp\fP (\fBconst\fP string &filename, \fBconst\fP int rank=10, \fBconst\fP int niter=50)"
.br
.ti -1c
.RI "virtual void \fBInspect\fP ()"
.br
.ti -1c
.RI "virtual void \fBEvaluate\fP ()"
.br
.ti -1c
.RI "virtual void \fBAssert\fP ()"
.br
.ti -1c
.RI "virtual void \fBTearDown\fP ()"
.br
.ti -1c
.RI "virtual void \fBTensorEqual\fP ()"
.br
.ti -1c
.RI "virtual void \fBTensorEqual3D\fP ()"
.br
.ti -1c
.RI "virtual void \fBTensorEqual4D\fP ()"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "unsigned \fB_niter\fP"
.br
.ti -1c
.RI "unsigned \fB_nnz\fP"
.br
.ti -1c
.RI "unsigned \fB_rank\fP"
.br
.ti -1c
.RI "unsigned \fB_order\fP"
.br
.ti -1c
.RI "unsigned * \fB_indices\fP"
.br
.ti -1c
.RI "unsigned * \fB_dims\fP"
.br
.ti -1c
.RI "\fBreal\fP * \fB_vals\fP"
.br
.ti -1c
.RI "\fBreal\fP * \fB_lambda\fP"
.br
.ti -1c
.RI "\fBreal\fP ** \fB_factors\fP"
.br
.ti -1c
.RI "\fBreal\fP * \fB_lambda_ref\fP"
.br
.ti -1c
.RI "\fBreal\fP ** \fB_factors_ref\fP"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Constructor & Destructor Documentation"
.PP 
.SS "test::TensorDecompTest::TensorDecompTest (\fBconst\fP string & name = \fC'TensorDecompTest'\fP)\fC [inline]\fP, \fC [protected]\fP"

.SS "virtual test::TensorDecompTest::~TensorDecompTest ()\fC [inline]\fP, \fC [protected]\fP, \fC [virtual]\fP"

.SH "Member Function Documentation"
.PP 
.SS "virtual void test::TensorDecompTest::Assert ()\fC [inline]\fP, \fC [protected]\fP, \fC [virtual]\fP"

.PP
Reimplemented from \fBtest::BenchmarkTest\fP\&.
.SS "virtual void test::TensorDecompTest::Evaluate ()\fC [inline]\fP, \fC [protected]\fP, \fC [virtual]\fP"

.PP
Implements \fBtest::BenchmarkTest\fP\&.
.SS "virtual void test::TensorDecompTest::Inspect ()\fC [inline]\fP, \fC [protected]\fP, \fC [virtual]\fP"

.PP
Implements \fBtest::InspExecTest\fP\&.
.PP
Reimplemented in \fBtest::TensorDecompTestHiCOO\fP, and \fBtest::TensorDecompTestCSF\fP\&.
.SS "void test::TensorDecompTest::SetUp (\fBconst\fP string & filename, \fBconst\fP int rank = \fC10\fP, \fBconst\fP int niter = \fC50\fP)\fC [inline]\fP, \fC [protected]\fP"

.SS "virtual void test::TensorDecompTest::TearDown ()\fC [inline]\fP, \fC [protected]\fP, \fC [virtual]\fP"

.PP
Reimplemented from \fBtesting::Test\fP\&.
.SS "virtual void test::TensorDecompTest::TensorEqual ()\fC [inline]\fP, \fC [protected]\fP, \fC [virtual]\fP"

.SS "virtual void test::TensorDecompTest::TensorEqual3D ()\fC [inline]\fP, \fC [protected]\fP, \fC [virtual]\fP"

.PP
Reimplemented in \fBtest::TensorDecompTestCSF\fP\&.
.SS "virtual void test::TensorDecompTest::TensorEqual4D ()\fC [inline]\fP, \fC [protected]\fP, \fC [virtual]\fP"

.PP
Reimplemented in \fBtest::TensorDecompTestHiCOO\fP, and \fBtest::TensorDecompTestCSF\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "unsigned* test::TensorDecompTest::_dims\fC [protected]\fP"

.SS "\fBreal\fP** test::TensorDecompTest::_factors\fC [protected]\fP"

.SS "\fBreal\fP** test::TensorDecompTest::_factors_ref\fC [protected]\fP"

.SS "unsigned* test::TensorDecompTest::_indices\fC [protected]\fP"

.SS "\fBreal\fP* test::TensorDecompTest::_lambda\fC [protected]\fP"

.SS "\fBreal\fP* test::TensorDecompTest::_lambda_ref\fC [protected]\fP"

.SS "unsigned test::TensorDecompTest::_niter\fC [protected]\fP"

.SS "unsigned test::TensorDecompTest::_nnz\fC [protected]\fP"

.SS "unsigned test::TensorDecompTest::_order\fC [protected]\fP"

.SS "unsigned test::TensorDecompTest::_rank\fC [protected]\fP"

.SS "\fBreal\fP* test::TensorDecompTest::_vals\fC [protected]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
