.TH "lib/isl/isl_schedule_band.h" 3 "Sun Jul 12 2020" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
lib/isl/isl_schedule_band.h
.SH SYNOPSIS
.br
.PP
\fC#include <isl/aff\&.h>\fP
.br
\fC#include <isl/ast_type\&.h>\fP
.br
\fC#include <isl/union_map\&.h>\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBisl_schedule_band\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct \fBisl_schedule_band\fP \fBisl_schedule_band\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fB__isl_give\fP \fBisl_schedule_band\fP * \fBisl_schedule_band_from_multi_union_pw_aff\fP (\fB__isl_take\fP \fBisl_multi_union_pw_aff\fP *mupa)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_schedule_band\fP * \fBisl_schedule_band_copy\fP (\fB__isl_keep\fP \fBisl_schedule_band\fP *band)"
.br
.ti -1c
.RI "\fB__isl_null\fP \fBisl_schedule_band\fP * \fBisl_schedule_band_free\fP (\fB__isl_take\fP \fBisl_schedule_band\fP *band)"
.br
.ti -1c
.RI "\fBisl_ctx\fP * \fBisl_schedule_band_get_ctx\fP (\fB__isl_keep\fP \fBisl_schedule_band\fP *band)"
.br
.ti -1c
.RI "\fBisl_bool\fP \fBisl_schedule_band_plain_is_equal\fP (\fB__isl_keep\fP \fBisl_schedule_band\fP *band1, \fB__isl_keep\fP \fBisl_schedule_band\fP *band2)"
.br
.ti -1c
.RI "int \fBisl_schedule_band_is_anchored\fP (\fB__isl_keep\fP \fBisl_schedule_band\fP *band)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_space\fP * \fBisl_schedule_band_get_space\fP (\fB__isl_keep\fP \fBisl_schedule_band\fP *band)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_schedule_band\fP * \fBisl_schedule_band_intersect_domain\fP (\fB__isl_take\fP \fBisl_schedule_band\fP *band, \fB__isl_take\fP \fBisl_union_set\fP *\fBdomain\fP)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_multi_union_pw_aff\fP * \fBisl_schedule_band_get_partial_schedule\fP (\fB__isl_keep\fP \fBisl_schedule_band\fP *band)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_schedule_band\fP * \fBisl_schedule_band_set_partial_schedule\fP (\fB__isl_take\fP \fBisl_schedule_band\fP *band, \fB__isl_take\fP \fBisl_multi_union_pw_aff\fP *schedule)"
.br
.ti -1c
.RI "enum \fBisl_ast_loop_type\fP \fBisl_schedule_band_member_get_ast_loop_type\fP (\fB__isl_keep\fP \fBisl_schedule_band\fP *band, int \fBpos\fP)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_schedule_band\fP * \fBisl_schedule_band_member_set_ast_loop_type\fP (\fB__isl_take\fP \fBisl_schedule_band\fP *band, int \fBpos\fP, enum \fBisl_ast_loop_type\fP type)"
.br
.ti -1c
.RI "enum \fBisl_ast_loop_type\fP \fBisl_schedule_band_member_get_isolate_ast_loop_type\fP (\fB__isl_keep\fP \fBisl_schedule_band\fP *band, int \fBpos\fP)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_schedule_band\fP * \fBisl_schedule_band_member_set_isolate_ast_loop_type\fP (\fB__isl_take\fP \fBisl_schedule_band\fP *band, int \fBpos\fP, enum \fBisl_ast_loop_type\fP type)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_union_set\fP * \fBisl_schedule_band_get_ast_build_options\fP (\fB__isl_keep\fP \fBisl_schedule_band\fP *band)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_schedule_band\fP * \fBisl_schedule_band_set_ast_build_options\fP (\fB__isl_take\fP \fBisl_schedule_band\fP *band, \fB__isl_take\fP \fBisl_union_set\fP *\fBoptions\fP)"
.br
.ti -1c
.RI "int \fBisl_schedule_band_n_member\fP (\fB__isl_keep\fP \fBisl_schedule_band\fP *band)"
.br
.ti -1c
.RI "\fBisl_bool\fP \fBisl_schedule_band_member_get_coincident\fP (\fB__isl_keep\fP \fBisl_schedule_band\fP *band, int \fBpos\fP)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_schedule_band\fP * \fBisl_schedule_band_member_set_coincident\fP (\fB__isl_take\fP \fBisl_schedule_band\fP *band, int \fBpos\fP, int coincident)"
.br
.ti -1c
.RI "\fBisl_bool\fP \fBisl_schedule_band_get_permutable\fP (\fB__isl_keep\fP \fBisl_schedule_band\fP *band)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_schedule_band\fP * \fBisl_schedule_band_set_permutable\fP (\fB__isl_take\fP \fBisl_schedule_band\fP *band, int permutable)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_schedule_band\fP * \fBisl_schedule_band_scale\fP (\fB__isl_take\fP \fBisl_schedule_band\fP *band, \fB__isl_take\fP \fBisl_multi_val\fP *mv)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_schedule_band\fP * \fBisl_schedule_band_scale_down\fP (\fB__isl_take\fP \fBisl_schedule_band\fP *band, \fB__isl_take\fP \fBisl_multi_val\fP *mv)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_schedule_band\fP * \fBisl_schedule_band_mod\fP (\fB__isl_take\fP \fBisl_schedule_band\fP *band, \fB__isl_take\fP \fBisl_multi_val\fP *mv)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_schedule_band\fP * \fBisl_schedule_band_tile\fP (\fB__isl_take\fP \fBisl_schedule_band\fP *band, \fB__isl_take\fP \fBisl_multi_val\fP *sizes)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_schedule_band\fP * \fBisl_schedule_band_point\fP (\fB__isl_take\fP \fBisl_schedule_band\fP *band, \fB__isl_keep\fP \fBisl_schedule_band\fP *tile, \fB__isl_take\fP \fBisl_multi_val\fP *sizes)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_schedule_band\fP * \fBisl_schedule_band_shift\fP (\fB__isl_take\fP \fBisl_schedule_band\fP *band, \fB__isl_take\fP \fBisl_multi_union_pw_aff\fP *shift)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_schedule_band\fP * \fBisl_schedule_band_drop\fP (\fB__isl_take\fP \fBisl_schedule_band\fP *band, int \fBpos\fP, int \fBn\fP)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_schedule_band\fP * \fBisl_schedule_band_gist\fP (\fB__isl_take\fP \fBisl_schedule_band\fP *band, \fB__isl_take\fP \fBisl_union_set\fP *\fBcontext\fP)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_schedule_band\fP * \fBisl_schedule_band_reset_user\fP (\fB__isl_take\fP \fBisl_schedule_band\fP *band)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_schedule_band\fP * \fBisl_schedule_band_align_params\fP (\fB__isl_take\fP \fBisl_schedule_band\fP *band, \fB__isl_take\fP \fBisl_space\fP *space)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_schedule_band\fP * \fBisl_schedule_band_pullback_union_pw_multi_aff\fP (\fB__isl_take\fP \fBisl_schedule_band\fP *band, \fB__isl_take\fP \fBisl_union_pw_multi_aff\fP *upma)"
.br
.in -1c
.SH "Typedef Documentation"
.PP 
.SS "typedef struct \fBisl_schedule_band\fP \fBisl_schedule_band\fP"

.SH "Function Documentation"
.PP 
.SS "\fB__isl_give\fP \fBisl_schedule_band\fP* isl_schedule_band_align_params (\fB__isl_take\fP \fBisl_schedule_band\fP * band, \fB__isl_take\fP \fBisl_space\fP * space)"

.SS "\fB__isl_give\fP \fBisl_schedule_band\fP* isl_schedule_band_copy (\fB__isl_keep\fP \fBisl_schedule_band\fP * band)"

.SS "\fB__isl_give\fP \fBisl_schedule_band\fP* isl_schedule_band_drop (\fB__isl_take\fP \fBisl_schedule_band\fP * band, int pos, int n)"

.SS "\fB__isl_null\fP \fBisl_schedule_band\fP* isl_schedule_band_free (\fB__isl_take\fP \fBisl_schedule_band\fP * band)"

.SS "\fB__isl_give\fP \fBisl_schedule_band\fP* isl_schedule_band_from_multi_union_pw_aff (\fB__isl_take\fP \fBisl_multi_union_pw_aff\fP * mupa)"

.SS "\fB__isl_give\fP \fBisl_union_set\fP* isl_schedule_band_get_ast_build_options (\fB__isl_keep\fP \fBisl_schedule_band\fP * band)"

.SS "\fBisl_ctx\fP* isl_schedule_band_get_ctx (\fB__isl_keep\fP \fBisl_schedule_band\fP * band)"

.SS "\fB__isl_give\fP \fBisl_multi_union_pw_aff\fP* isl_schedule_band_get_partial_schedule (\fB__isl_keep\fP \fBisl_schedule_band\fP * band)"

.SS "\fBisl_bool\fP isl_schedule_band_get_permutable (\fB__isl_keep\fP \fBisl_schedule_band\fP * band)"

.SS "\fB__isl_give\fP \fBisl_space\fP* isl_schedule_band_get_space (\fB__isl_keep\fP \fBisl_schedule_band\fP * band)"

.SS "\fB__isl_give\fP \fBisl_schedule_band\fP* isl_schedule_band_gist (\fB__isl_take\fP \fBisl_schedule_band\fP * band, \fB__isl_take\fP \fBisl_union_set\fP * context)"

.SS "\fB__isl_give\fP \fBisl_schedule_band\fP* isl_schedule_band_intersect_domain (\fB__isl_take\fP \fBisl_schedule_band\fP * band, \fB__isl_take\fP \fBisl_union_set\fP * domain)"

.SS "int isl_schedule_band_is_anchored (\fB__isl_keep\fP \fBisl_schedule_band\fP * band)"

.SS "enum \fBisl_ast_loop_type\fP isl_schedule_band_member_get_ast_loop_type (\fB__isl_keep\fP \fBisl_schedule_band\fP * band, int pos)"

.SS "\fBisl_bool\fP isl_schedule_band_member_get_coincident (\fB__isl_keep\fP \fBisl_schedule_band\fP * band, int pos)"

.SS "enum \fBisl_ast_loop_type\fP isl_schedule_band_member_get_isolate_ast_loop_type (\fB__isl_keep\fP \fBisl_schedule_band\fP * band, int pos)"

.SS "\fB__isl_give\fP \fBisl_schedule_band\fP* isl_schedule_band_member_set_ast_loop_type (\fB__isl_take\fP \fBisl_schedule_band\fP * band, int pos, enum \fBisl_ast_loop_type\fP type)"

.SS "\fB__isl_give\fP \fBisl_schedule_band\fP* isl_schedule_band_member_set_coincident (\fB__isl_take\fP \fBisl_schedule_band\fP * band, int pos, int coincident)"

.SS "\fB__isl_give\fP \fBisl_schedule_band\fP* isl_schedule_band_member_set_isolate_ast_loop_type (\fB__isl_take\fP \fBisl_schedule_band\fP * band, int pos, enum \fBisl_ast_loop_type\fP type)"

.SS "\fB__isl_give\fP \fBisl_schedule_band\fP* isl_schedule_band_mod (\fB__isl_take\fP \fBisl_schedule_band\fP * band, \fB__isl_take\fP \fBisl_multi_val\fP * mv)"

.SS "int isl_schedule_band_n_member (\fB__isl_keep\fP \fBisl_schedule_band\fP * band)"

.SS "\fBisl_bool\fP isl_schedule_band_plain_is_equal (\fB__isl_keep\fP \fBisl_schedule_band\fP * band1, \fB__isl_keep\fP \fBisl_schedule_band\fP * band2)"

.SS "\fB__isl_give\fP \fBisl_schedule_band\fP* isl_schedule_band_point (\fB__isl_take\fP \fBisl_schedule_band\fP * band, \fB__isl_keep\fP \fBisl_schedule_band\fP * tile, \fB__isl_take\fP \fBisl_multi_val\fP * sizes)"

.SS "\fB__isl_give\fP \fBisl_schedule_band\fP* isl_schedule_band_pullback_union_pw_multi_aff (\fB__isl_take\fP \fBisl_schedule_band\fP * band, \fB__isl_take\fP \fBisl_union_pw_multi_aff\fP * upma)"

.SS "\fB__isl_give\fP \fBisl_schedule_band\fP* isl_schedule_band_reset_user (\fB__isl_take\fP \fBisl_schedule_band\fP * band)"

.SS "\fB__isl_give\fP \fBisl_schedule_band\fP* isl_schedule_band_scale (\fB__isl_take\fP \fBisl_schedule_band\fP * band, \fB__isl_take\fP \fBisl_multi_val\fP * mv)"

.SS "\fB__isl_give\fP \fBisl_schedule_band\fP* isl_schedule_band_scale_down (\fB__isl_take\fP \fBisl_schedule_band\fP * band, \fB__isl_take\fP \fBisl_multi_val\fP * mv)"

.SS "\fB__isl_give\fP \fBisl_schedule_band\fP* isl_schedule_band_set_ast_build_options (\fB__isl_take\fP \fBisl_schedule_band\fP * band, \fB__isl_take\fP \fBisl_union_set\fP * options)"

.SS "\fB__isl_give\fP \fBisl_schedule_band\fP* isl_schedule_band_set_partial_schedule (\fB__isl_take\fP \fBisl_schedule_band\fP * band, \fB__isl_take\fP \fBisl_multi_union_pw_aff\fP * schedule)"

.SS "\fB__isl_give\fP \fBisl_schedule_band\fP* isl_schedule_band_set_permutable (\fB__isl_take\fP \fBisl_schedule_band\fP * band, int permutable)"

.SS "\fB__isl_give\fP \fBisl_schedule_band\fP* isl_schedule_band_shift (\fB__isl_take\fP \fBisl_schedule_band\fP * band, \fB__isl_take\fP \fBisl_multi_union_pw_aff\fP * shift)"

.SS "\fB__isl_give\fP \fBisl_schedule_band\fP* isl_schedule_band_tile (\fB__isl_take\fP \fBisl_schedule_band\fP * band, \fB__isl_take\fP \fBisl_multi_val\fP * sizes)"

.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
