.TH "out/coo_hicoo_3d_insp.h" 3 "Sun Jul 12 2020" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
out/coo_hicoo_3d_insp.h
.SH SYNOPSIS
.br
.PP
\fC#include <stdio\&.h>\fP
.br
\fC#include <stdlib\&.h>\fP
.br
\fC#include <stdint\&.h>\fP
.br
\fC#include <math\&.h>\fP
.br
\fC#include <string\&.h>\fP
.br
\fC#include <assert\&.h>\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBmin\fP(\fBx\fP,  \fBy\fP)   (((\fBx\fP)<(\fBy\fP))?(\fBx\fP):(\fBy\fP))"
.br
.ti -1c
.RI "#define \fBmax\fP(\fBx\fP,  \fBy\fP)   (((\fBx\fP)>(\fBy\fP))?(\fBx\fP):(\fBy\fP))"
.br
.ti -1c
.RI "#define \fBabs\fP(\fBx\fP)   ((\fBx\fP)<0?\-(\fBx\fP):(\fBx\fP))"
.br
.ti -1c
.RI "#define \fBabsmin\fP(\fBx\fP,  \fBy\fP)   ((\fBx\fP)=\fBmin\fP(\fBabs\fP((\fBx\fP)),\fBabs\fP((\fBy\fP))))"
.br
.ti -1c
.RI "#define \fBabsmax\fP(\fBx\fP,  \fBy\fP)   ((\fBx\fP)=\fBmax\fP(\fBabs\fP((\fBx\fP)),\fBabs\fP((\fBy\fP))))"
.br
.ti -1c
.RI "#define \fBfloord\fP(\fBx\fP,  \fBy\fP)   ((\fBx\fP)/(\fBy\fP))"
.br
.ti -1c
.RI "#define \fBsgn\fP(\fBx\fP)   ((\fBx\fP)<0?\-1:1)"
.br
.ti -1c
.RI "#define \fBoffset2\fP(\fBi\fP,  \fBj\fP,  M)   ((\fBj\fP)+(\fBi\fP)*(M))"
.br
.ti -1c
.RI "#define \fBoffset3\fP(\fBi\fP,  \fBj\fP,  \fBk\fP,  M,  \fBN\fP)   ((\fBk\fP)+((\fBj\fP)+(\fBi\fP)*(M))*(\fBN\fP))"
.br
.ti -1c
.RI "#define \fBoffset4\fP(\fBi\fP,  \fBj\fP,  \fBk\fP,  l,  M,  \fBN\fP,  \fBP\fP)   ((l)+((\fBk\fP)+((\fBj\fP)+(\fBi\fP)*(M))*(\fBN\fP))*(\fBP\fP))"
.br
.ti -1c
.RI "#define \fBarrinit\fP(ptr,  \fBval\fP,  \fBsize\fP)   for(unsigned __i__=0;__i__<(\fBsize\fP);__i__++) (ptr)[__i__]=(\fBval\fP)"
.br
.ti -1c
.RI "#define \fBarrprnt\fP(\fBname\fP,  arr,  \fBsize\fP)"
.br
.ti -1c
.RI "#define \fBval\fP(\fBn\fP)   val[(\fBn\fP)]"
.br
.ti -1c
.RI "#define \fBbval\fP(\fBp\fP)   (*bval)[(\fBp\fP)]"
.br
.ti -1c
.RI "#define \fBbmap\fP(\fBb\fP,  bi,  bj,  bk,  \fBm\fP)   bmap[(bi)][(bj)][(bk)][(\fBm\fP)]"
.br
.ti -1c
.RI "#define \fBbp\fP(\fBb\fP)   (*bp)[(\fBb\fP)]"
.br
.ti -1c
.RI "#define \fBbsize\fP(\fBb\fP,  bi,  bj,  bk)   bsize[(bi)][(bj)][(bk)]"
.br
.ti -1c
.RI "#define \fBp\fP(\fBi\fP)   p"
.br
.ti -1c
.RI "#define \fBind\fP(\fBm\fP,  \fBn\fP)   indices[\fBoffset2\fP((\fBm\fP),(\fBn\fP),M)]"
.br
.ti -1c
.RI "#define \fBind0\fP(\fBm\fP)   indices[\fBoffset2\fP(0,(\fBm\fP),M)]"
.br
.ti -1c
.RI "#define \fBind1\fP(\fBm\fP)   indices[\fBoffset2\fP(1,(\fBm\fP),M)]"
.br
.ti -1c
.RI "#define \fBind2\fP(\fBm\fP)   indices[\fBoffset2\fP(2,(\fBm\fP),M)]"
.br
.ti -1c
.RI "#define \fBbind0\fP(\fBb\fP)   (*bindices)[\fBoffset2\fP((\fBb\fP),0,\fBN\fP)]"
.br
.ti -1c
.RI "#define \fBbind1\fP(\fBb\fP)   (*bindices)[\fBoffset2\fP((\fBb\fP),1,\fBN\fP)]"
.br
.ti -1c
.RI "#define \fBbind2\fP(\fBb\fP)   (*bindices)[\fBoffset2\fP((\fBb\fP),2,\fBN\fP)]"
.br
.ti -1c
.RI "#define \fBeind0\fP(\fBm\fP)   (*eindices)[\fBoffset2\fP((\fBm\fP),0,\fBN\fP)]"
.br
.ti -1c
.RI "#define \fBeind1\fP(\fBm\fP)   (*eindices)[\fBoffset2\fP((\fBm\fP),1,\fBN\fP)]"
.br
.ti -1c
.RI "#define \fBeind2\fP(\fBm\fP)   (*eindices)[\fBoffset2\fP((\fBm\fP),2,\fBN\fP)]"
.br
.ti -1c
.RI "#define \fBbid\fP(\fBm\fP,  bi,  bj,  bk)"
.br
.ti -1c
.RI "#define \fBs0\fP(\fBm\fP,  \fBi\fP,  \fBj\fP,  \fBk\fP)   \fBbid\fP((\fBm\fP),(\fBi\fP)/\fBB\fP,(\fBj\fP)/\fBB\fP,(\fBk\fP)/\fBB\fP)"
.br
.ti -1c
.RI "#define \fBs1\fP(\fBm\fP,  \fBi\fP,  \fBj\fP,  \fBk\fP)   \fBif\fP (\fBb\fP >= NB) NB=\fBb\fP+1"
.br
.ti -1c
.RI "#define \fBs2\fP(\fBm\fP,  \fBi\fP,  \fBj\fP,  \fBk\fP)   \fBbind0\fP(\fBb\fP)=(\fBi\fP)/\fBB\fP"
.br
.ti -1c
.RI "#define \fBs3\fP(\fBm\fP,  \fBi\fP,  \fBj\fP,  \fBk\fP)   \fBbind1\fP(\fBb\fP)=(\fBj\fP)/\fBB\fP"
.br
.ti -1c
.RI "#define \fBs4\fP(\fBm\fP,  \fBi\fP,  \fBj\fP,  \fBk\fP)   \fBbind2\fP(\fBb\fP)=(\fBk\fP)/\fBB\fP"
.br
.ti -1c
.RI "#define \fBs0\fP(\fBb\fP,  bi,  bj,  bk,  \fBm\fP,  \fBn\fP)   \fBif\fP (\fBp\fP >= \fBbp\fP((\fBb\fP)+1)) \fBbp\fP((\fBb\fP)+1)=\fBp\fP+1"
.br
.ti -1c
.RI "#define \fBs1\fP(\fBb\fP,  bi,  bj,  bk,  \fBm\fP,  \fBn\fP)   \fBeind0\fP(\fBp\fP)=\fBind0\fP((\fBn\fP))\-\fBB\fP*(bi)"
.br
.ti -1c
.RI "#define \fBs2\fP(\fBb\fP,  bi,  bj,  bk,  \fBm\fP,  \fBn\fP)   \fBeind1\fP(\fBp\fP)=\fBind1\fP((\fBn\fP))\-\fBB\fP*(bj)"
.br
.ti -1c
.RI "#define \fBs3\fP(\fBb\fP,  bi,  bj,  bk,  \fBm\fP,  \fBn\fP)   \fBeind2\fP(\fBp\fP)=\fBind2\fP((\fBn\fP))\-\fBB\fP*(bk)"
.br
.ti -1c
.RI "#define \fBs4\fP(\fBb\fP,  bi,  bj,  bk,  \fBm\fP,  \fBn\fP)   \fBbval\fP(\fBp\fP)=\fBval\fP((\fBn\fP))"
.br
.ti -1c
.RI "#define \fBs5\fP(\fBb\fP,  bi,  bj,  bk,  \fBm\fP,  \fBn\fP)   \fBp\fP+=1"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "unsigned \fBcoo_hicoo_3d_insp\fP (\fBconst\fP float *\fBval\fP, \fBconst\fP unsigned \fBB\fP, \fBconst\fP unsigned M, \fBconst\fP unsigned \fBN\fP, \fBconst\fP unsigned *dims, \fBconst\fP unsigned *indices, float **\fBbval\fP, unsigned short **bindices, unsigned **\fBbp\fP, unsigned char **eindices)"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define abs(\fBx\fP)   ((\fBx\fP)<0?\-(\fBx\fP):(\fBx\fP))"

.SS "#define absmax(\fBx\fP, \fBy\fP)   ((\fBx\fP)=\fBmax\fP(\fBabs\fP((\fBx\fP)),\fBabs\fP((\fBy\fP))))"

.SS "#define absmin(\fBx\fP, \fBy\fP)   ((\fBx\fP)=\fBmin\fP(\fBabs\fP((\fBx\fP)),\fBabs\fP((\fBy\fP))))"

.SS "#define arrinit(ptr, \fBval\fP, \fBsize\fP)   for(unsigned __i__=0;__i__<(\fBsize\fP);__i__++) (ptr)[__i__]=(\fBval\fP)"

.SS "#define arrprnt(\fBname\fP, arr, \fBsize\fP)"
\fBValue:\fP
.PP
.nf
{\
fprintf(stderr,"%s={",(name));\
for(unsigned __i__=0;__i__<(size);__i__++) fprintf(stderr,"%lg,",(arr)[__i__]);\
fprintf(stderr,"}\n");}
.fi
.SS "#define bid(\fBm\fP, bi, bj, bk)"
\fBValue:\fP
.PP
.nf
{\
if(!bmap[(bi)]){\
bsize[(bi)]=(unsigned**)calloc(((J/B)+1),sizeof(unsigned*));\
bid[(bi)]=(unsigned**)calloc(((J/B)+1),sizeof(unsigned*));\
bmap[(bi)]=(unsigned***)calloc(((J/B)+1),sizeof(unsigned**));\
}\
if(!bmap[(bi)][(bj)]){\
bsize[(bi)][(bj)]=(unsigned*)calloc(((K/B)+1),sizeof(unsigned));\
bid[(bi)][(bj)]=(unsigned*)calloc(((K/B)+1),sizeof(unsigned));\
bmap[(bi)][(bj)]=(unsigned**)calloc((K/B)+1,sizeof(unsigned*));\
}\
if(!bmap[(bi)][(bj)][(bk)]){\
bid[(bi)][(bj)][(bk)]=(NB);\
bmap[(bi)][(bj)][(bk)]=(unsigned*)calloc(B*B*B,sizeof(unsigned));\
}\
b=bid[(bi)][(bj)][(bk)];\
bmap[(bi)][(bj)][(bk)][(bsize[(bi)][(bj)][(bk)])++]=(m);\
}
.fi
.SS "#define bind0(\fBb\fP)   (*bindices)[\fBoffset2\fP((\fBb\fP),0,\fBN\fP)]"

.SS "#define bind1(\fBb\fP)   (*bindices)[\fBoffset2\fP((\fBb\fP),1,\fBN\fP)]"

.SS "#define bind2(\fBb\fP)   (*bindices)[\fBoffset2\fP((\fBb\fP),2,\fBN\fP)]"

.SS "#define bmap(\fBb\fP, bi, bj, bk, \fBm\fP)   bmap[(bi)][(bj)][(bk)][(\fBm\fP)]"

.SS "#define bp(\fBb\fP)   (*bp)[(\fBb\fP)]"

.SS "#define bsize(\fBb\fP, bi, bj, bk)   bsize[(bi)][(bj)][(bk)]"

.SS "#define bval(\fBp\fP)   (*bval)[(\fBp\fP)]"

.SS "#define eind0(\fBm\fP)   (*eindices)[\fBoffset2\fP((\fBm\fP),0,\fBN\fP)]"

.SS "#define eind1(\fBm\fP)   (*eindices)[\fBoffset2\fP((\fBm\fP),1,\fBN\fP)]"

.SS "#define eind2(\fBm\fP)   (*eindices)[\fBoffset2\fP((\fBm\fP),2,\fBN\fP)]"

.SS "#define floord(\fBx\fP, \fBy\fP)   ((\fBx\fP)/(\fBy\fP))"

.SS "#define ind(\fBm\fP, \fBn\fP)   indices[\fBoffset2\fP((\fBm\fP),(\fBn\fP),M)]"

.SS "#define ind0(\fBm\fP)   indices[\fBoffset2\fP(0,(\fBm\fP),M)]"

.SS "#define ind1(\fBm\fP)   indices[\fBoffset2\fP(1,(\fBm\fP),M)]"

.SS "#define ind2(\fBm\fP)   indices[\fBoffset2\fP(2,(\fBm\fP),M)]"

.SS "#define max(\fBx\fP, \fBy\fP)   (((\fBx\fP)>(\fBy\fP))?(\fBx\fP):(\fBy\fP))"

.SS "#define min(\fBx\fP, \fBy\fP)   (((\fBx\fP)<(\fBy\fP))?(\fBx\fP):(\fBy\fP))"

.SS "#define offset2(\fBi\fP, \fBj\fP, M)   ((\fBj\fP)+(\fBi\fP)*(M))"

.SS "#define offset3(\fBi\fP, \fBj\fP, \fBk\fP, M, \fBN\fP)   ((\fBk\fP)+((\fBj\fP)+(\fBi\fP)*(M))*(\fBN\fP))"

.SS "#define offset4(\fBi\fP, \fBj\fP, \fBk\fP, l, M, \fBN\fP, \fBP\fP)   ((l)+((\fBk\fP)+((\fBj\fP)+(\fBi\fP)*(M))*(\fBN\fP))*(\fBP\fP))"

.SS "#define p(\fBi\fP)   p"

.SS "#define s0(\fBb\fP, bi, bj, bk, \fBm\fP, \fBn\fP)   \fBif\fP (\fBp\fP >= \fBbp\fP((\fBb\fP)+1)) \fBbp\fP((\fBb\fP)+1)=\fBp\fP+1"

.SS "#define s0(\fBm\fP, \fBi\fP, \fBj\fP, \fBk\fP)   \fBbid\fP((\fBm\fP),(\fBi\fP)/\fBB\fP,(\fBj\fP)/\fBB\fP,(\fBk\fP)/\fBB\fP)"

.SS "#define s1(\fBb\fP, bi, bj, bk, \fBm\fP, \fBn\fP)   \fBeind0\fP(\fBp\fP)=\fBind0\fP((\fBn\fP))\-\fBB\fP*(bi)"

.SS "#define s1(\fBm\fP, \fBi\fP, \fBj\fP, \fBk\fP)   \fBif\fP (\fBb\fP >= NB) NB=\fBb\fP+1"

.SS "#define s2(\fBb\fP, bi, bj, bk, \fBm\fP, \fBn\fP)   \fBeind1\fP(\fBp\fP)=\fBind1\fP((\fBn\fP))\-\fBB\fP*(bj)"

.SS "#define s2(\fBm\fP, \fBi\fP, \fBj\fP, \fBk\fP)   \fBbind0\fP(\fBb\fP)=(\fBi\fP)/\fBB\fP"

.SS "#define s3(\fBb\fP, bi, bj, bk, \fBm\fP, \fBn\fP)   \fBeind2\fP(\fBp\fP)=\fBind2\fP((\fBn\fP))\-\fBB\fP*(bk)"

.SS "#define s3(\fBm\fP, \fBi\fP, \fBj\fP, \fBk\fP)   \fBbind1\fP(\fBb\fP)=(\fBj\fP)/\fBB\fP"

.SS "#define s4(\fBb\fP, bi, bj, bk, \fBm\fP, \fBn\fP)   \fBbval\fP(\fBp\fP)=\fBval\fP((\fBn\fP))"

.SS "#define s4(\fBm\fP, \fBi\fP, \fBj\fP, \fBk\fP)   \fBbind2\fP(\fBb\fP)=(\fBk\fP)/\fBB\fP"

.SS "#define s5(\fBb\fP, bi, bj, bk, \fBm\fP, \fBn\fP)   \fBp\fP+=1"

.SS "#define sgn(\fBx\fP)   ((\fBx\fP)<0?\-1:1)"

.SS "#define val(\fBn\fP)   val[(\fBn\fP)]"

.SH "Function Documentation"
.PP 
.SS "unsigned coo_hicoo_3d_insp (\fBconst\fP float * val, \fBconst\fP unsigned B, \fBconst\fP unsigned M, \fBconst\fP unsigned N, \fBconst\fP unsigned * dims, \fBconst\fP unsigned * indices, float ** bval, unsigned short ** bindices, unsigned ** bp, unsigned char ** eindices)\fC [inline]\fP"

.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
