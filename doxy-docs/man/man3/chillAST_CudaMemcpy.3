.TH "chillAST_CudaMemcpy" 3 "Sun Jul 12 2020" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
chillAST_CudaMemcpy
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <chill_ast\&.hh>\fP
.PP
Inherits \fBchillAST_node\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBCHILL_ASTNODE_TYPE\fP \fBgetType\fP () override"
.br
.ti -1c
.RI "\fBchillAST_CudaMemcpy\fP (\fBchillAST_VarDecl\fP *d, \fBchillAST_VarDecl\fP *s, \fBchillAST_node\fP *\fBsize\fP, char *kind)"
.br
.ti -1c
.RI "\fBchillAST_node\fP * \fBconstantFold\fP () override"
.br
.RI "Folding constant, to some degree\&. "
.ti -1c
.RI "\fBchillAST_node\fP * \fBclone\fP () override"
.br
.ti -1c
.RI "void \fBgatherArrayRefs\fP (std::vector< \fBchillAST_ArraySubscriptExpr\fP * > &refs, bool writtento) override"
.br
.ti -1c
.RI "void \fBgatherScalarRefs\fP (std::vector< \fBchillAST_DeclRefExpr\fP * > &refs, bool writtento) override"
.br
.ti -1c
.RI "void \fBgatherVarDeclsMore\fP (vector< \fBchillAST_VarDecl\fP * > &decls) override"
.br
.ti -1c
.RI "bool \fBfindLoopIndexesToReplace\fP (\fBchillAST_SymbolTable\fP *symtab, bool forcesync=false) override"
.br
.RI "this just looks for ForStmts with preferred index metacomment attached "
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBchillAST_Child\fP< \fBchillAST_VarDecl\fP > \fBdest\fP"
.br
.ti -1c
.RI "\fBchillAST_Child\fP< \fBchillAST_VarDecl\fP > \fBsrc\fP"
.br
.ti -1c
.RI "\fBchillAST_Child\fP< \fBchillAST_node\fP > \fBsize\fP"
.br
.ti -1c
.RI "char * \fBcudaMemcpyKind\fP"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Constructor & Destructor Documentation"
.PP 
.SS "chillAST_CudaMemcpy::chillAST_CudaMemcpy (\fBchillAST_VarDecl\fP * d, \fBchillAST_VarDecl\fP * s, \fBchillAST_node\fP * size, char * kind)"

.SH "Member Function Documentation"
.PP 
.SS "class \fBchillAST_node\fP * chillAST_CudaMemcpy::clone ()\fC [override]\fP, \fC [virtual]\fP"

.PP
Reimplemented from \fBchillAST_node\fP\&.
.SS "class \fBchillAST_node\fP * chillAST_CudaMemcpy::constantFold ()\fC [override]\fP, \fC [virtual]\fP"

.PP
Folding constant, to some degree\&. We should need to delegate this to the backend compiler 
.PP
\fBReturns\fP
.RS 4
This node 
.RE
.PP

.PP
Reimplemented from \fBchillAST_node\fP\&.
.SS "bool chillAST_CudaMemcpy::findLoopIndexesToReplace (\fBchillAST_SymbolTable\fP * symtab, bool forcesync = \fCfalse\fP)\fC [inline]\fP, \fC [override]\fP, \fC [virtual]\fP"

.PP
this just looks for ForStmts with preferred index metacomment attached 
.PP
Reimplemented from \fBchillAST_node\fP\&.
.SS "void chillAST_CudaMemcpy::gatherArrayRefs (std::vector< \fBchillAST_ArraySubscriptExpr\fP * > & refs, bool writtento)\fC [override]\fP, \fC [virtual]\fP"

.PP
Reimplemented from \fBchillAST_node\fP\&.
.SS "void chillAST_CudaMemcpy::gatherScalarRefs (std::vector< \fBchillAST_DeclRefExpr\fP * > & refs, bool writtento)\fC [override]\fP, \fC [virtual]\fP"

.PP
Reimplemented from \fBchillAST_node\fP\&.
.SS "void chillAST_CudaMemcpy::gatherVarDeclsMore (vector< \fBchillAST_VarDecl\fP * > & decls)\fC [inline]\fP, \fC [override]\fP, \fC [virtual]\fP"

.PP
Reimplemented from \fBchillAST_node\fP\&.
.SS "\fBCHILL_ASTNODE_TYPE\fP chillAST_CudaMemcpy::getType ()\fC [inline]\fP, \fC [override]\fP, \fC [virtual]\fP"

.PP
Reimplemented from \fBchillAST_node\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "char* chillAST_CudaMemcpy::cudaMemcpyKind"

.SS "\fBchillAST_Child\fP<\fBchillAST_VarDecl\fP> chillAST_CudaMemcpy::dest"

.SS "\fBchillAST_Child\fP<\fBchillAST_node\fP> chillAST_CudaMemcpy::size"

.SS "\fBchillAST_Child\fP<\fBchillAST_VarDecl\fP> chillAST_CudaMemcpy::src"


.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
