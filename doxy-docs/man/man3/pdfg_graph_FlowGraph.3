.TH "pdfg.graph.FlowGraph" 3 "Sun Jul 12 2020" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
pdfg.graph.FlowGraph
.SH SYNOPSIS
.br
.PP
.PP
Inherits object\&.
.PP
Inherited by \fBpdfg\&.graph\&.IEGenGraph\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "def \fB__init__\fP (self, \fBname\fP='', \fBnodes\fP=[], \fBedges\fP=[], \fBcomps\fP=[], \fBconstants\fP=(), \fBparent\fP=None, \fBsubgraphs\fP=[])"
.br
.ti -1c
.RI "def \fBto_json\fP (self)"
.br
.ti -1c
.RI "def \fBfrom_json\fP (cls, json)"
.br
.ti -1c
.RI "def \fBto_file\fP (self, file='')"
.br
.ti -1c
.RI "def \fBfrom_file\fP (cls, file)"
.br
.ti -1c
.RI "def \fBname\fP (self)"
.br
.ti -1c
.RI "def \fBname\fP (self, name)"
.br
.ti -1c
.RI "def \fBdot\fP (self)"
.br
.ti -1c
.RI "def \fBnodes\fP (self)"
.br
.ti -1c
.RI "def \fBnodes\fP (self, rows=[])"
.br
.ti -1c
.RI "def \fBedges\fP (self)"
.br
.ti -1c
.RI "def \fBedges\fP (self, edges=[])"
.br
.ti -1c
.RI "def \fBcomps\fP (self)"
.br
.ti -1c
.RI "def \fBcomps\fP (self, comps)"
.br
.ti -1c
.RI "def \fBconstants\fP (self)"
.br
.ti -1c
.RI "def \fBaddconst\fP (self, \fBconst\fP)"
.br
.ti -1c
.RI "def \fBconstants\fP (self, constants)"
.br
.ti -1c
.RI "def \fBconstnames\fP (self)"
.br
.ti -1c
.RI "def \fBfunctions\fP (self)"
.br
.ti -1c
.RI "def \fBfunctions\fP (self, functions)"
.br
.ti -1c
.RI "def \fBparams\fP (self)"
.br
.ti -1c
.RI "def \fBparams\fP (self, params)"
.br
.ti -1c
.RI "def \fBparamnames\fP (self)"
.br
.ti -1c
.RI "def \fBincludes\fP (self)"
.br
.ti -1c
.RI "def \fBincludes\fP (self, includes)"
.br
.ti -1c
.RI "def \fBsymtable\fP (self)"
.br
.ti -1c
.RI "def \fBsymtable\fP (self, symbols)"
.br
.ti -1c
.RI "def \fBnrows\fP (self)"
.br
.ti -1c
.RI "def \fBncols\fP (self)"
.br
.ti -1c
.RI "def \fBis_parent\fP (self)"
.br
.ti -1c
.RI "def \fBparent\fP (self)"
.br
.ti -1c
.RI "def \fBparent\fP (self, parent)"
.br
.ti -1c
.RI "def \fBsubgraphs\fP (self)"
.br
.ti -1c
.RI "def \fBreturntype\fP (self)"
.br
.ti -1c
.RI "def \fBreturntype\fP (self, type)"
.br
.ti -1c
.RI "def \fBnode_factory\fP (self)"
.br
.ti -1c
.RI "def \fBset_factory\fP (self)"
.br
.ti -1c
.RI "def \fB__contains__\fP (self, \fBkey\fP)"
.br
.ti -1c
.RI "def \fB__getitem__\fP (self, \fBkey\fP)"
.br
.ti -1c
.RI "def \fB__setitem__\fP (self, \fBkey\fP, \fBval\fP)"
.br
.ti -1c
.RI "def \fBadd\fP (self, item)"
.br
.ti -1c
.RI "def \fBaddnode\fP (self, \fBnode\fP)"
.br
.ti -1c
.RI "def \fBaddedge\fP (self, edge)"
.br
.ti -1c
.RI "def \fBnewrow\fP (self)"
.br
.ti -1c
.RI "def \fBnode\fP (self, \fBx\fP, \fBy\fP)"
.br
.ti -1c
.RI "def \fBnxgraph\fP (self)"
.br
.ti -1c
.RI "def \fBdraw\fP (self, view=True, nx=False)"
.br
.ti -1c
.RI "def \fBread\fP (self, path='', nx=False)"
.br
.ti -1c
.RI "def \fBsave\fP (self)"
.br
.ti -1c
.RI "def \fBgraphgen\fP (self)"
.br
.ti -1c
.RI "def \fBcodegen\fP (self)"
.br
.ti -1c
.RI "def \fBwrite\fP (self, path='')"
.br
.ti -1c
.RI "def \fBto_pdf\fP (self, path='')"
.br
.ti -1c
.RI "def \fBreplaceConsts\fP (self, code, consts=())"
.br
.ti -1c
.RI "def \fBrestoreConsts\fP (self, code, consts=())"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBnodes\fP"
.br
.ti -1c
.RI "\fBedges\fP"
.br
.ti -1c
.RI "\fBcomps\fP"
.br
.ti -1c
.RI "\fBconstants\fP"
.br
.in -1c
.SH "Constructor & Destructor Documentation"
.PP 
.SS "def pdfg\&.graph\&.FlowGraph\&.__init__ ( self,  name = \fC''\fP,  nodes = \fC[]\fP,  edges = \fC[]\fP,  comps = \fC[]\fP,  constants = \fC()\fP,  parent = \fCNone\fP,  subgraphs = \fC[]\fP)"

.SH "Member Function Documentation"
.PP 
.SS "def pdfg\&.graph\&.FlowGraph\&.__contains__ ( self,  key)"

.SS "def pdfg\&.graph\&.FlowGraph\&.__getitem__ ( self,  key)"

.SS "def pdfg\&.graph\&.FlowGraph\&.__setitem__ ( self,  key,  val)"

.SS "def pdfg\&.graph\&.FlowGraph\&.add ( self,  item)"

.SS "def pdfg\&.graph\&.FlowGraph\&.addconst ( self,  const)"

.SS "def pdfg\&.graph\&.FlowGraph\&.addedge ( self,  edge)"

.SS "def pdfg\&.graph\&.FlowGraph\&.addnode ( self,  node)"

.SS "def pdfg\&.graph\&.FlowGraph\&.codegen ( self)"

.SS "def pdfg\&.graph\&.FlowGraph\&.comps ( self)"

.SS "def pdfg\&.graph\&.FlowGraph\&.comps ( self,  comps)"

.SS "def pdfg\&.graph\&.FlowGraph\&.constants ( self)"

.SS "def pdfg\&.graph\&.FlowGraph\&.constants ( self,  constants)"

.SS "def pdfg\&.graph\&.FlowGraph\&.constnames ( self)"

.SS "def pdfg\&.graph\&.FlowGraph\&.dot ( self)"

.SS "def pdfg\&.graph\&.FlowGraph\&.draw ( self,  view = \fCTrue\fP,  nx = \fCFalse\fP)"

.SS "def pdfg\&.graph\&.FlowGraph\&.edges ( self)"

.SS "def pdfg\&.graph\&.FlowGraph\&.edges ( self,  edges = \fC[]\fP)"

.SS "def pdfg\&.graph\&.FlowGraph\&.from_file ( cls,  file)"

.SS "def pdfg\&.graph\&.FlowGraph\&.from_json ( cls,  json)"

.SS "def pdfg\&.graph\&.FlowGraph\&.functions ( self)"

.SS "def pdfg\&.graph\&.FlowGraph\&.functions ( self,  functions)"

.SS "def pdfg\&.graph\&.FlowGraph\&.graphgen ( self)"

.SS "def pdfg\&.graph\&.FlowGraph\&.includes ( self)"

.SS "def pdfg\&.graph\&.FlowGraph\&.includes ( self,  includes)"

.SS "def pdfg\&.graph\&.FlowGraph\&.is_parent ( self)"

.SS "def pdfg\&.graph\&.FlowGraph\&.name ( self)"

.SS "def pdfg\&.graph\&.FlowGraph\&.name ( self,  name)"

.SS "def pdfg\&.graph\&.FlowGraph\&.ncols ( self)"

.SS "def pdfg\&.graph\&.FlowGraph\&.newrow ( self)"

.SS "def pdfg\&.graph\&.FlowGraph\&.node ( self,  x,  y)"

.SS "def pdfg\&.graph\&.FlowGraph\&.node_factory ( self)"

.SS "def pdfg\&.graph\&.FlowGraph\&.nodes ( self)"

.SS "def pdfg\&.graph\&.FlowGraph\&.nodes ( self,  rows = \fC[]\fP)"

.SS "def pdfg\&.graph\&.FlowGraph\&.nrows ( self)"

.SS "def pdfg\&.graph\&.FlowGraph\&.nxgraph ( self)"

.SS "def pdfg\&.graph\&.FlowGraph\&.paramnames ( self)"

.SS "def pdfg\&.graph\&.FlowGraph\&.params ( self)"

.SS "def pdfg\&.graph\&.FlowGraph\&.params ( self,  params)"

.SS "def pdfg\&.graph\&.FlowGraph\&.parent ( self)"

.SS "def pdfg\&.graph\&.FlowGraph\&.parent ( self,  parent)"

.SS "def pdfg\&.graph\&.FlowGraph\&.read ( self,  path = \fC''\fP,  nx = \fCFalse\fP)"

.SS "def pdfg\&.graph\&.FlowGraph\&.replaceConsts ( self,  code,  consts = \fC()\fP)"

.SS "def pdfg\&.graph\&.FlowGraph\&.restoreConsts ( self,  code,  consts = \fC()\fP)"

.SS "def pdfg\&.graph\&.FlowGraph\&.returntype ( self)"

.SS "def pdfg\&.graph\&.FlowGraph\&.returntype ( self,  type)"

.SS "def pdfg\&.graph\&.FlowGraph\&.save ( self)"

.PP
.nf
# DOT graph captions using 'xlabel' attribute:
digraph g {
    forcelabels=true;
    a [label="Birth of George Washington", xlabel="See also: American Revolution"];
    b [label="Main label", xlabel="Additional caption"];
    a-> b;
}
:return:

.fi
.PP
 
.SS "def pdfg\&.graph\&.FlowGraph\&.set_factory ( self)"

.SS "def pdfg\&.graph\&.FlowGraph\&.subgraphs ( self)"

.SS "def pdfg\&.graph\&.FlowGraph\&.symtable ( self)"

.SS "def pdfg\&.graph\&.FlowGraph\&.symtable ( self,  symbols)"

.SS "def pdfg\&.graph\&.FlowGraph\&.to_file ( self,  file = \fC''\fP)"

.SS "def pdfg\&.graph\&.FlowGraph\&.to_json ( self)"

.SS "def pdfg\&.graph\&.FlowGraph\&.to_pdf ( self,  path = \fC''\fP)"

.SS "def pdfg\&.graph\&.FlowGraph\&.write ( self,  path = \fC''\fP)"

.SH "Member Data Documentation"
.PP 
.SS "pdfg\&.graph\&.FlowGraph\&.comps"

.SS "pdfg\&.graph\&.FlowGraph\&.constants"

.SS "pdfg\&.graph\&.FlowGraph\&.edges"

.SS "pdfg\&.graph\&.FlowGraph\&.nodes"


.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
