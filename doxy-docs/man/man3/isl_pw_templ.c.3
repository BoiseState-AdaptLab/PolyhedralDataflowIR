.TH "lib/isl/isl_pw_templ.c" 3 "Sun Jul 12 2020" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
lib/isl/isl_pw_templ.c
.SH SYNOPSIS
.br
.PP
\fC#include <isl/aff\&.h>\fP
.br
\fC#include <isl_val_private\&.h>\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBxFN\fP(\fBTYPE\fP,  NAME)   \fBTYPE\fP ## _ ## NAME"
.br
.ti -1c
.RI "#define \fBFN\fP(\fBTYPE\fP,  NAME)   \fBxFN\fP(\fBTYPE\fP,NAME)"
.br
.ti -1c
.RI "#define \fBxS\fP(\fBTYPE\fP,  NAME)   struct \fBTYPE\fP ## _ ## NAME"
.br
.ti -1c
.RI "#define \fBS\fP(\fBTYPE\fP,  NAME)   \fBxS\fP(\fBTYPE\fP,NAME)"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fB__isl_give\fP \fBPW\fP * \fBFN\fP (\fBPW\fP, alloc_size)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBPW\fP * \fBFN\fP (\fBPW\fP, \fBZERO\fP)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBPW\fP * \fBFN\fP (\fBPW\fP, add_piece)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBPW\fP * \fBFN\fP (\fBPW\fP, alloc)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBPW\fP * \fBFN\fP (\fBPW\fP, \fBdup\fP)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBPW\fP * \fBFN\fP (\fBPW\fP, cow)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBPW\fP * \fBFN\fP (\fBPW\fP, \fBcopy\fP)"
.br
.ti -1c
.RI "\fB__isl_null\fP \fBPW\fP * \fBFN\fP (\fBPW\fP, \fBfree\fP)"
.br
.ti -1c
.RI "\fBconst\fP char * \fBFN\fP (\fBPW\fP, get_dim_name)"
.br
.ti -1c
.RI "\fBisl_bool\fP \fBFN\fP (\fBPW\fP, has_dim_id)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_id\fP * \fBFN\fP (\fBPW\fP, get_dim_id)"
.br
.ti -1c
.RI "\fBisl_bool\fP \fBFN\fP (\fBPW\fP, has_tuple_name)"
.br
.ti -1c
.RI "\fBconst\fP char * \fBFN\fP (\fBPW\fP, get_tuple_name)"
.br
.ti -1c
.RI "\fBisl_bool\fP \fBFN\fP (\fBPW\fP, has_tuple_id)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_id\fP * \fBFN\fP (\fBPW\fP, get_tuple_id)"
.br
.ti -1c
.RI "\fBisl_bool\fP \fBFN\fP (\fBPW\fP, \fBIS_ZERO\fP)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBPW\fP * \fBFN\fP (\fBPW\fP, realign_domain)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBPW\fP * \fBFN\fP (\fBPW\fP, align_params)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBPW\fP * \fBFN\fP (\fBPW\fP, add_disjoint)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBPW\fP * \fBFN\fP (\fBPW\fP, \fBneg\fP)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBPW\fP * \fBFN\fP (\fBPW\fP, \fBsub\fP)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_val\fP * \fBFN\fP (\fBPW\fP, eval)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_set\fP * \fBFN\fP (\fBPW\fP, params)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_set\fP * \fBFN\fP (\fBPW\fP, \fBdomain\fP)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBPW\fP * \fBFN\fP (\fBPW\fP, from_range)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBPW\fP * \fBFN\fP (\fBPW\fP, fix_si)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBPW\fP * \fBFN\fP (\fBPW\fP, intersect_domain)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBPW\fP * \fBFN\fP (\fBPW\fP, intersect_params)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBPW\fP * \fBFN\fP (\fBPW\fP, subtract_domain)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBPW\fP * \fBFN\fP (\fBPW\fP, \fBgist\fP)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBPW\fP * \fBFN\fP (\fBPW\fP, gist_params)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBPW\fP * \fBFN\fP (\fBPW\fP, coalesce)"
.br
.ti -1c
.RI "\fBisl_ctx\fP * \fBFN\fP (\fBPW\fP, get_ctx)"
.br
.ti -1c
.RI "\fBisl_bool\fP \fBFN\fP (\fBPW\fP, involves_dims)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBPW\fP * \fBFN\fP (\fBPW\fP, set_dim_name)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBPW\fP * \fBFN\fP (\fBPW\fP, drop_dims)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBPW\fP * \fBFN\fP (\fBPW\fP, project_out)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBPW\fP * \fBFN\fP (\fBPW\fP, project_domain_on_params)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBPW\fP * \fBFN\fP (\fBPW\fP, insert_dims)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBPW\fP * \fBFN\fP (\fBPW\fP, fix_dim)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBPW\fP * \fBFN\fP (\fBPW\fP, fix_val)"
.br
.ti -1c
.RI "unsigned \fBFN\fP (\fBPW\fP, \fBdim\fP)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBPW\fP * \fBFN\fP (\fBPW\fP, split_dims)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_val\fP * \fBFN\fP (\fBPW\fP, opt)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_val\fP * \fBFN\fP (\fBPW\fP, \fBmax\fP)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_val\fP * \fBFN\fP (\fBPW\fP, \fBmin\fP)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_space\fP * \fBFN\fP (\fBPW\fP, get_space)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_space\fP * \fBFN\fP (\fBPW\fP, get_domain_space)"
.br
.ti -1c
.RI "int \fBFN\fP (\fBPW\fP, find_dim_by_name)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBPW\fP * \fBFN\fP (\fBPW\fP, reset_domain_space)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBPW\fP * \fBFN\fP (\fBPW\fP, reset_space)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBPW\fP * \fBFN\fP (\fBPW\fP, set_tuple_id)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBPW\fP * \fBFN\fP (\fBPW\fP, reset_tuple_id)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBPW\fP * \fBFN\fP (\fBPW\fP, set_dim_id)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBPW\fP * \fBFN\fP (\fBPW\fP, reset_user)"
.br
.ti -1c
.RI "int \fBFN\fP (\fBPW\fP, has_equal_space)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBPW\fP * \fBFN\fP (\fBPW\fP, morph_domain)"
.br
.ti -1c
.RI "int \fBFN\fP (\fBPW\fP, n_piece)"
.br
.ti -1c
.RI "\fBisl_stat\fP \fBFN\fP (\fBPW\fP, foreach_piece)"
.br
.ti -1c
.RI "\fBisl_stat\fP \fBFN\fP (\fBPW\fP, foreach_lifted_piece)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBPW\fP * \fBFN\fP (\fBPW\fP, move_dims)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBPW\fP * \fBFN\fP (\fBPW\fP, mul_isl_int)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBPW\fP * \fBFN\fP (\fBPW\fP, scale_val)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBPW\fP * \fBFN\fP (\fBPW\fP, scale_down_val)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBPW\fP * \fBFN\fP (\fBPW\fP, scale)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBPW\fP * \fBFN\fP (\fBPW\fP, normalize)"
.br
.ti -1c
.RI "\fBisl_bool\fP \fBFN\fP (\fBPW\fP, plain_is_equal)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBPW\fP * \fBFN\fP (\fBPW\fP, pullback_multi_aff)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBPW\fP * \fBFN\fP (\fBPW\fP, pullback_pw_multi_aff)"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define FN(\fBTYPE\fP, NAME)   \fBxFN\fP(\fBTYPE\fP,NAME)"

.SS "#define S(\fBTYPE\fP, NAME)   \fBxS\fP(\fBTYPE\fP,NAME)"

.SS "#define xFN(\fBTYPE\fP, NAME)   \fBTYPE\fP ## _ ## NAME"

.SS "#define xS(\fBTYPE\fP, NAME)   struct \fBTYPE\fP ## _ ## NAME"

.SH "Function Documentation"
.PP 
.SS "\fB__isl_give\fP \fBPW\fP* FN (\fBPW\fP, add_disjoint)"

.SS "\fB__isl_give\fP \fBPW\fP* FN (\fBPW\fP, add_piece)"

.SS "\fB__isl_give\fP \fBPW\fP* FN (\fBPW\fP, align_params)"

.SS "\fB__isl_give\fP \fBPW\fP* FN (\fBPW\fP, alloc)"

.SS "\fB__isl_give\fP \fBPW\fP* FN (\fBPW\fP, alloc_size)"

.SS "\fB__isl_give\fP \fBPW\fP* FN (\fBPW\fP, coalesce)"

.SS "\fB__isl_give\fP \fBPW\fP* FN (\fBPW\fP, \fBcopy\fP)"

.SS "\fB__isl_give\fP \fBPW\fP* FN (\fBPW\fP, cow)"

.SS "unsigned FN (\fBPW\fP, \fBdim\fP)"

.SS "\fB__isl_give\fP \fBisl_set\fP* FN (\fBPW\fP, \fBdomain\fP)"

.SS "\fB__isl_give\fP \fBPW\fP* FN (\fBPW\fP, drop_dims)"

.SS "\fB__isl_give\fP \fBPW\fP* FN (\fBPW\fP, \fBdup\fP)"

.SS "\fB__isl_give\fP \fBisl_val\fP* FN (\fBPW\fP, eval)"

.SS "int FN (\fBPW\fP, find_dim_by_name)"

.SS "\fB__isl_give\fP \fBPW\fP* FN (\fBPW\fP, fix_dim)"

.SS "\fB__isl_give\fP \fBPW\fP* FN (\fBPW\fP, fix_si)"

.SS "\fB__isl_give\fP \fBPW\fP* FN (\fBPW\fP, fix_val)"

.SS "\fBisl_stat\fP FN (\fBPW\fP, foreach_lifted_piece)"

.SS "\fBisl_stat\fP FN (\fBPW\fP, foreach_piece)"

.SS "\fB__isl_null\fP \fBPW\fP* FN (\fBPW\fP, \fBfree\fP)"

.SS "\fB__isl_give\fP \fBPW\fP* FN (\fBPW\fP, from_range)"

.SS "\fBisl_ctx\fP* FN (\fBPW\fP, get_ctx)"

.SS "\fB__isl_give\fP \fBisl_id\fP* FN (\fBPW\fP, get_dim_id)"

.SS "\fBconst\fP char* FN (\fBPW\fP, get_dim_name)"

.SS "\fB__isl_give\fP \fBisl_space\fP* FN (\fBPW\fP, get_domain_space)"

.SS "\fB__isl_give\fP \fBisl_space\fP* FN (\fBPW\fP, get_space)"

.SS "\fB__isl_give\fP \fBisl_id\fP* FN (\fBPW\fP, get_tuple_id)"

.SS "\fBconst\fP char* FN (\fBPW\fP, get_tuple_name)"

.SS "\fB__isl_give\fP \fBPW\fP* FN (\fBPW\fP, \fBgist\fP)"

.SS "\fB__isl_give\fP \fBPW\fP* FN (\fBPW\fP, gist_params)"

.SS "\fBisl_bool\fP FN (\fBPW\fP, has_dim_id)"

.SS "int FN (\fBPW\fP, has_equal_space)"

.SS "\fBisl_bool\fP FN (\fBPW\fP, has_tuple_id)"

.SS "\fBisl_bool\fP FN (\fBPW\fP, has_tuple_name)"

.SS "\fB__isl_give\fP \fBPW\fP* FN (\fBPW\fP, insert_dims)"

.SS "\fB__isl_give\fP \fBPW\fP* FN (\fBPW\fP, intersect_domain)"

.SS "\fB__isl_give\fP \fBPW\fP* FN (\fBPW\fP, intersect_params)"

.SS "\fBisl_bool\fP FN (\fBPW\fP, involves_dims)"

.SS "\fBisl_bool\fP FN (\fBPW\fP, \fBIS_ZERO\fP)"

.SS "\fB__isl_give\fP \fBisl_val\fP* FN (\fBPW\fP, \fBmax\fP)"

.SS "\fB__isl_give\fP \fBisl_val\fP* FN (\fBPW\fP, \fBmin\fP)"

.SS "\fB__isl_give\fP \fBPW\fP* FN (\fBPW\fP, morph_domain)"

.SS "\fB__isl_give\fP \fBPW\fP* FN (\fBPW\fP, move_dims)"

.SS "\fB__isl_give\fP \fBPW\fP* FN (\fBPW\fP, mul_isl_int)"

.SS "int FN (\fBPW\fP, n_piece)"

.SS "\fB__isl_give\fP \fBPW\fP* FN (\fBPW\fP, \fBneg\fP)"

.SS "\fB__isl_give\fP \fBPW\fP* FN (\fBPW\fP, normalize)"

.SS "\fB__isl_give\fP \fBisl_val\fP* FN (\fBPW\fP, opt)"

.SS "\fB__isl_give\fP \fBisl_set\fP* FN (\fBPW\fP, params)"

.SS "\fBisl_bool\fP FN (\fBPW\fP, plain_is_equal)"

.SS "\fB__isl_give\fP \fBPW\fP* FN (\fBPW\fP, project_domain_on_params)"

.SS "\fB__isl_give\fP \fBPW\fP* FN (\fBPW\fP, project_out)"

.SS "\fB__isl_give\fP \fBPW\fP* FN (\fBPW\fP, pullback_multi_aff)"

.SS "\fB__isl_give\fP \fBPW\fP* FN (\fBPW\fP, pullback_pw_multi_aff)"

.SS "\fB__isl_give\fP \fBPW\fP* FN (\fBPW\fP, realign_domain)"

.SS "\fB__isl_give\fP \fBPW\fP* FN (\fBPW\fP, reset_domain_space)"

.SS "\fB__isl_give\fP \fBPW\fP* FN (\fBPW\fP, reset_space)"

.SS "\fB__isl_give\fP \fBPW\fP* FN (\fBPW\fP, reset_tuple_id)"

.SS "\fB__isl_give\fP \fBPW\fP* FN (\fBPW\fP, reset_user)"

.SS "\fB__isl_give\fP \fBPW\fP* FN (\fBPW\fP, scale)"

.SS "\fB__isl_give\fP \fBPW\fP* FN (\fBPW\fP, scale_down_val)"

.SS "\fB__isl_give\fP \fBPW\fP* FN (\fBPW\fP, scale_val)"

.SS "\fB__isl_give\fP \fBPW\fP* FN (\fBPW\fP, set_dim_id)"

.SS "\fB__isl_give\fP \fBPW\fP* FN (\fBPW\fP, set_dim_name)"

.SS "\fB__isl_give\fP \fBPW\fP* FN (\fBPW\fP, set_tuple_id)"

.SS "\fB__isl_give\fP \fBPW\fP* FN (\fBPW\fP, split_dims)"

.SS "\fB__isl_give\fP \fBPW\fP* FN (\fBPW\fP, \fBsub\fP)"

.SS "\fB__isl_give\fP \fBPW\fP* FN (\fBPW\fP, subtract_domain)"

.SS "\fB__isl_give\fP \fBPW\fP* FN (\fBPW\fP, \fBZERO\fP)"

.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
