.TH "lib/isl/isl_polynomial.c" 3 "Sun Jul 12 2020" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
lib/isl/isl_polynomial.c
.SH SYNOPSIS
.br
.PP
\fC#include <stdlib\&.h>\fP
.br
\fC#include <isl_ctx_private\&.h>\fP
.br
\fC#include <isl_map_private\&.h>\fP
.br
\fC#include <isl_factorization\&.h>\fP
.br
\fC#include <isl_lp_private\&.h>\fP
.br
\fC#include <isl_seq\&.h>\fP
.br
\fC#include <isl_union_map_private\&.h>\fP
.br
\fC#include <isl_constraint_private\&.h>\fP
.br
\fC#include <isl_polynomial_private\&.h>\fP
.br
\fC#include <isl_point_private\&.h>\fP
.br
\fC#include <isl_space_private\&.h>\fP
.br
\fC#include <isl_mat_private\&.h>\fP
.br
\fC#include <isl_vec_private\&.h>\fP
.br
\fC#include <isl_range\&.h>\fP
.br
\fC#include <isl_local_space_private\&.h>\fP
.br
\fC#include <isl_aff_private\&.h>\fP
.br
\fC#include <isl_val_private\&.h>\fP
.br
\fC#include <isl_config\&.h>\fP
.br
\fC#include <isl/deprecated/polynomial_int\&.h>\fP
.br
\fC#include <isl_pw_templ\&.c>\fP
.br
\fC#include <isl_union_single\&.c>\fP
.br
\fC#include <isl_union_eval\&.c>\fP
.br
\fC#include <isl_union_neg\&.c>\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBisl_div_sort_info\fP"
.br
.ti -1c
.RI "struct \fBisl_opt_data\fP"
.br
.ti -1c
.RI "struct \fBisl_split_periods_data\fP"
.br
.ti -1c
.RI "struct \fBisl_to_poly_data\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBISL_DIM_H\fP"
.br
.ti -1c
.RI "#define \fBPW\fP   \fBisl_pw_qpolynomial\fP"
.br
.ti -1c
.RI "#define \fBEL\fP   \fBisl_qpolynomial\fP"
.br
.ti -1c
.RI "#define \fBEL_IS_ZERO\fP   is_zero"
.br
.ti -1c
.RI "#define \fBZERO\fP   zero"
.br
.ti -1c
.RI "#define \fBIS_ZERO\fP   is_zero"
.br
.ti -1c
.RI "#define \fBFIELD\fP   qp"
.br
.ti -1c
.RI "#define \fBDEFAULT_IS_ZERO\fP   1"
.br
.ti -1c
.RI "#define \fBNO_PULLBACK\fP"
.br
.ti -1c
.RI "#define \fBUNION\fP   \fBisl_union_pw_qpolynomial\fP"
.br
.ti -1c
.RI "#define \fBPART\fP   \fBisl_pw_qpolynomial\fP"
.br
.ti -1c
.RI "#define \fBPARTS\fP   pw_qpolynomial"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBisl_upoly_is_cst\fP (\fB__isl_keep\fP struct \fBisl_upoly\fP *up)"
.br
.ti -1c
.RI "\fB__isl_keep\fP struct \fBisl_upoly_cst\fP * \fBisl_upoly_as_cst\fP (\fB__isl_keep\fP struct \fBisl_upoly\fP *up)"
.br
.ti -1c
.RI "\fB__isl_keep\fP struct \fBisl_upoly_rec\fP * \fBisl_upoly_as_rec\fP (\fB__isl_keep\fP struct \fBisl_upoly\fP *up)"
.br
.ti -1c
.RI "\fBisl_bool\fP \fBisl_upoly_is_equal\fP (\fB__isl_keep\fP struct \fBisl_upoly\fP *up1, \fB__isl_keep\fP struct \fBisl_upoly\fP *up2)"
.br
.ti -1c
.RI "int \fBisl_upoly_is_zero\fP (\fB__isl_keep\fP struct \fBisl_upoly\fP *up)"
.br
.ti -1c
.RI "int \fBisl_upoly_sgn\fP (\fB__isl_keep\fP struct \fBisl_upoly\fP *up)"
.br
.ti -1c
.RI "int \fBisl_upoly_is_nan\fP (\fB__isl_keep\fP struct \fBisl_upoly\fP *up)"
.br
.ti -1c
.RI "int \fBisl_upoly_is_infty\fP (\fB__isl_keep\fP struct \fBisl_upoly\fP *up)"
.br
.ti -1c
.RI "int \fBisl_upoly_is_neginfty\fP (\fB__isl_keep\fP struct \fBisl_upoly\fP *up)"
.br
.ti -1c
.RI "int \fBisl_upoly_is_one\fP (\fB__isl_keep\fP struct \fBisl_upoly\fP *up)"
.br
.ti -1c
.RI "int \fBisl_upoly_is_negone\fP (\fB__isl_keep\fP struct \fBisl_upoly\fP *up)"
.br
.ti -1c
.RI "\fB__isl_give\fP struct \fBisl_upoly_cst\fP * \fBisl_upoly_cst_alloc\fP (struct \fBisl_ctx\fP *ctx)"
.br
.ti -1c
.RI "\fB__isl_give\fP struct \fBisl_upoly\fP * \fBisl_upoly_zero\fP (struct \fBisl_ctx\fP *ctx)"
.br
.ti -1c
.RI "\fB__isl_give\fP struct \fBisl_upoly\fP * \fBisl_upoly_one\fP (struct \fBisl_ctx\fP *ctx)"
.br
.ti -1c
.RI "\fB__isl_give\fP struct \fBisl_upoly\fP * \fBisl_upoly_infty\fP (struct \fBisl_ctx\fP *ctx)"
.br
.ti -1c
.RI "\fB__isl_give\fP struct \fBisl_upoly\fP * \fBisl_upoly_neginfty\fP (struct \fBisl_ctx\fP *ctx)"
.br
.ti -1c
.RI "\fB__isl_give\fP struct \fBisl_upoly\fP * \fBisl_upoly_nan\fP (struct \fBisl_ctx\fP *ctx)"
.br
.ti -1c
.RI "\fB__isl_give\fP struct \fBisl_upoly\fP * \fBisl_upoly_rat_cst\fP (struct \fBisl_ctx\fP *ctx, \fBisl_int\fP \fBn\fP, \fBisl_int\fP d)"
.br
.ti -1c
.RI "\fB__isl_give\fP struct \fBisl_upoly_rec\fP * \fBisl_upoly_alloc_rec\fP (struct \fBisl_ctx\fP *ctx, int \fBvar\fP, int \fBsize\fP)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_qpolynomial\fP * \fBisl_qpolynomial_reset_domain_space\fP (\fB__isl_take\fP \fBisl_qpolynomial\fP *qp, \fB__isl_take\fP \fBisl_space\fP *\fBdim\fP)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_qpolynomial\fP * \fBisl_qpolynomial_reset_space_and_domain\fP (\fB__isl_take\fP \fBisl_qpolynomial\fP *qp, \fB__isl_take\fP \fBisl_space\fP *space, \fB__isl_take\fP \fBisl_space\fP *\fBdomain\fP)"
.br
.ti -1c
.RI "\fBisl_ctx\fP * \fBisl_qpolynomial_get_ctx\fP (\fB__isl_keep\fP \fBisl_qpolynomial\fP *qp)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_space\fP * \fBisl_qpolynomial_get_domain_space\fP (\fB__isl_keep\fP \fBisl_qpolynomial\fP *qp)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_space\fP * \fBisl_qpolynomial_get_space\fP (\fB__isl_keep\fP \fBisl_qpolynomial\fP *qp)"
.br
.ti -1c
.RI "unsigned \fBisl_qpolynomial_dim\fP (\fB__isl_keep\fP \fBisl_qpolynomial\fP *qp, enum \fBisl_dim_type\fP type)"
.br
.ti -1c
.RI "\fBisl_bool\fP \fBisl_qpolynomial_is_zero\fP (\fB__isl_keep\fP \fBisl_qpolynomial\fP *qp)"
.br
.ti -1c
.RI "\fBisl_bool\fP \fBisl_qpolynomial_is_one\fP (\fB__isl_keep\fP \fBisl_qpolynomial\fP *qp)"
.br
.ti -1c
.RI "\fBisl_bool\fP \fBisl_qpolynomial_is_nan\fP (\fB__isl_keep\fP \fBisl_qpolynomial\fP *qp)"
.br
.ti -1c
.RI "\fBisl_bool\fP \fBisl_qpolynomial_is_infty\fP (\fB__isl_keep\fP \fBisl_qpolynomial\fP *qp)"
.br
.ti -1c
.RI "\fBisl_bool\fP \fBisl_qpolynomial_is_neginfty\fP (\fB__isl_keep\fP \fBisl_qpolynomial\fP *qp)"
.br
.ti -1c
.RI "int \fBisl_qpolynomial_sgn\fP (\fB__isl_keep\fP \fBisl_qpolynomial\fP *qp)"
.br
.ti -1c
.RI "\fB__isl_give\fP struct \fBisl_upoly\fP * \fBisl_upoly_copy\fP (\fB__isl_keep\fP struct \fBisl_upoly\fP *up)"
.br
.ti -1c
.RI "\fB__isl_give\fP struct \fBisl_upoly\fP * \fBisl_upoly_dup_cst\fP (\fB__isl_keep\fP struct \fBisl_upoly\fP *up)"
.br
.ti -1c
.RI "\fB__isl_give\fP struct \fBisl_upoly\fP * \fBisl_upoly_dup_rec\fP (\fB__isl_keep\fP struct \fBisl_upoly\fP *up)"
.br
.ti -1c
.RI "\fB__isl_give\fP struct \fBisl_upoly\fP * \fBisl_upoly_dup\fP (\fB__isl_keep\fP struct \fBisl_upoly\fP *up)"
.br
.ti -1c
.RI "\fB__isl_give\fP struct \fBisl_upoly\fP * \fBisl_upoly_cow\fP (\fB__isl_take\fP struct \fBisl_upoly\fP *up)"
.br
.ti -1c
.RI "void \fBisl_upoly_free\fP (\fB__isl_take\fP struct \fBisl_upoly\fP *up)"
.br
.ti -1c
.RI "\fB__isl_give\fP struct \fBisl_upoly\fP * \fBisl_upoly_sum_cst\fP (\fB__isl_take\fP struct \fBisl_upoly\fP *up1, \fB__isl_take\fP struct \fBisl_upoly\fP *up2)"
.br
.ti -1c
.RI "\fB__isl_give\fP struct \fBisl_upoly\fP * \fBisl_upoly_sum\fP (\fB__isl_take\fP struct \fBisl_upoly\fP *up1, \fB__isl_take\fP struct \fBisl_upoly\fP *up2)"
.br
.ti -1c
.RI "\fB__isl_give\fP struct \fBisl_upoly\fP * \fBisl_upoly_cst_add_isl_int\fP (\fB__isl_take\fP struct \fBisl_upoly\fP *up, \fBisl_int\fP v)"
.br
.ti -1c
.RI "\fB__isl_give\fP struct \fBisl_upoly\fP * \fBisl_upoly_add_isl_int\fP (\fB__isl_take\fP struct \fBisl_upoly\fP *up, \fBisl_int\fP v)"
.br
.ti -1c
.RI "\fB__isl_give\fP struct \fBisl_upoly\fP * \fBisl_upoly_cst_mul_isl_int\fP (\fB__isl_take\fP struct \fBisl_upoly\fP *up, \fBisl_int\fP v)"
.br
.ti -1c
.RI "\fB__isl_give\fP struct \fBisl_upoly\fP * \fBisl_upoly_mul_isl_int\fP (\fB__isl_take\fP struct \fBisl_upoly\fP *up, \fBisl_int\fP v)"
.br
.ti -1c
.RI "\fB__isl_give\fP struct \fBisl_upoly\fP * \fBisl_upoly_mul_cst\fP (\fB__isl_take\fP struct \fBisl_upoly\fP *up1, \fB__isl_take\fP struct \fBisl_upoly\fP *up2)"
.br
.ti -1c
.RI "\fB__isl_give\fP struct \fBisl_upoly\fP * \fBisl_upoly_mul_rec\fP (\fB__isl_take\fP struct \fBisl_upoly\fP *up1, \fB__isl_take\fP struct \fBisl_upoly\fP *up2)"
.br
.ti -1c
.RI "\fB__isl_give\fP struct \fBisl_upoly\fP * \fBisl_upoly_mul\fP (\fB__isl_take\fP struct \fBisl_upoly\fP *up1, \fB__isl_take\fP struct \fBisl_upoly\fP *up2)"
.br
.ti -1c
.RI "\fB__isl_give\fP struct \fBisl_upoly\fP * \fBisl_upoly_pow\fP (\fB__isl_take\fP struct \fBisl_upoly\fP *up, unsigned power)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_qpolynomial\fP * \fBisl_qpolynomial_alloc\fP (\fB__isl_take\fP \fBisl_space\fP *\fBdim\fP, unsigned n_div, \fB__isl_take\fP struct \fBisl_upoly\fP *up)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_qpolynomial\fP * \fBisl_qpolynomial_copy\fP (\fB__isl_keep\fP \fBisl_qpolynomial\fP *qp)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_qpolynomial\fP * \fBisl_qpolynomial_dup\fP (\fB__isl_keep\fP \fBisl_qpolynomial\fP *qp)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_qpolynomial\fP * \fBisl_qpolynomial_cow\fP (\fB__isl_take\fP \fBisl_qpolynomial\fP *qp)"
.br
.ti -1c
.RI "\fB__isl_null\fP \fBisl_qpolynomial\fP * \fBisl_qpolynomial_free\fP (\fB__isl_take\fP \fBisl_qpolynomial\fP *qp)"
.br
.ti -1c
.RI "\fB__isl_give\fP struct \fBisl_upoly\fP * \fBisl_upoly_var_pow\fP (\fBisl_ctx\fP *ctx, int \fBpos\fP, int power)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_qpolynomial\fP * \fBisl_qpolynomial_add\fP (\fB__isl_take\fP \fBisl_qpolynomial\fP *qp1, \fB__isl_take\fP \fBisl_qpolynomial\fP *qp2)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_qpolynomial\fP * \fBisl_qpolynomial_add_on_domain\fP (\fB__isl_keep\fP \fBisl_set\fP *dom, \fB__isl_take\fP \fBisl_qpolynomial\fP *qp1, \fB__isl_take\fP \fBisl_qpolynomial\fP *qp2)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_qpolynomial\fP * \fBisl_qpolynomial_sub\fP (\fB__isl_take\fP \fBisl_qpolynomial\fP *qp1, \fB__isl_take\fP \fBisl_qpolynomial\fP *qp2)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_qpolynomial\fP * \fBisl_qpolynomial_add_isl_int\fP (\fB__isl_take\fP \fBisl_qpolynomial\fP *qp, \fBisl_int\fP v)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_qpolynomial\fP * \fBisl_qpolynomial_neg\fP (\fB__isl_take\fP \fBisl_qpolynomial\fP *qp)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_qpolynomial\fP * \fBisl_qpolynomial_mul_isl_int\fP (\fB__isl_take\fP \fBisl_qpolynomial\fP *qp, \fBisl_int\fP v)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_qpolynomial\fP * \fBisl_qpolynomial_scale\fP (\fB__isl_take\fP \fBisl_qpolynomial\fP *qp, \fBisl_int\fP v)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_qpolynomial\fP * \fBisl_qpolynomial_scale_val\fP (\fB__isl_take\fP \fBisl_qpolynomial\fP *qp, \fB__isl_take\fP \fBisl_val\fP *v)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_qpolynomial\fP * \fBisl_qpolynomial_scale_down_val\fP (\fB__isl_take\fP \fBisl_qpolynomial\fP *qp, \fB__isl_take\fP \fBisl_val\fP *v)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_qpolynomial\fP * \fBisl_qpolynomial_mul\fP (\fB__isl_take\fP \fBisl_qpolynomial\fP *qp1, \fB__isl_take\fP \fBisl_qpolynomial\fP *qp2)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_qpolynomial\fP * \fBisl_qpolynomial_pow\fP (\fB__isl_take\fP \fBisl_qpolynomial\fP *qp, unsigned power)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_pw_qpolynomial\fP * \fBisl_pw_qpolynomial_pow\fP (\fB__isl_take\fP \fBisl_pw_qpolynomial\fP *\fBpwqp\fP, unsigned power)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_qpolynomial\fP * \fBisl_qpolynomial_zero_on_domain\fP (\fB__isl_take\fP \fBisl_space\fP *\fBdim\fP)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_qpolynomial\fP * \fBisl_qpolynomial_one_on_domain\fP (\fB__isl_take\fP \fBisl_space\fP *\fBdim\fP)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_qpolynomial\fP * \fBisl_qpolynomial_infty_on_domain\fP (\fB__isl_take\fP \fBisl_space\fP *\fBdim\fP)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_qpolynomial\fP * \fBisl_qpolynomial_neginfty_on_domain\fP (\fB__isl_take\fP \fBisl_space\fP *\fBdim\fP)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_qpolynomial\fP * \fBisl_qpolynomial_nan_on_domain\fP (\fB__isl_take\fP \fBisl_space\fP *\fBdim\fP)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_qpolynomial\fP * \fBisl_qpolynomial_cst_on_domain\fP (\fB__isl_take\fP \fBisl_space\fP *\fBdim\fP, \fBisl_int\fP v)"
.br
.ti -1c
.RI "int \fBisl_qpolynomial_is_cst\fP (\fB__isl_keep\fP \fBisl_qpolynomial\fP *qp, \fBisl_int\fP *\fBn\fP, \fBisl_int\fP *d)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_val\fP * \fBisl_qpolynomial_get_constant_val\fP (\fB__isl_keep\fP \fBisl_qpolynomial\fP *qp)"
.br
.ti -1c
.RI "int \fBisl_upoly_is_affine\fP (\fB__isl_keep\fP struct \fBisl_upoly\fP *up)"
.br
.ti -1c
.RI "int \fBisl_qpolynomial_is_affine\fP (\fB__isl_keep\fP \fBisl_qpolynomial\fP *qp)"
.br
.ti -1c
.RI "int \fBisl_upoly_update_affine\fP (\fB__isl_keep\fP struct \fBisl_upoly\fP *up, \fB__isl_keep\fP \fBisl_vec\fP *aff)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_vec\fP * \fBisl_qpolynomial_extract_affine\fP (\fB__isl_keep\fP \fBisl_qpolynomial\fP *qp)"
.br
.ti -1c
.RI "\fBisl_bool\fP \fBisl_qpolynomial_plain_is_equal\fP (\fB__isl_keep\fP \fBisl_qpolynomial\fP *qp1, \fB__isl_keep\fP \fBisl_qpolynomial\fP *qp2)"
.br
.ti -1c
.RI "void \fBisl_qpolynomial_get_den\fP (\fB__isl_keep\fP \fBisl_qpolynomial\fP *qp, \fBisl_int\fP *d)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_qpolynomial\fP * \fBisl_qpolynomial_var_pow_on_domain\fP (\fB__isl_take\fP \fBisl_space\fP *\fBdim\fP, int \fBpos\fP, int power)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_qpolynomial\fP * \fBisl_qpolynomial_var_on_domain\fP (\fB__isl_take\fP \fBisl_space\fP *\fBdim\fP, enum \fBisl_dim_type\fP type, unsigned \fBpos\fP)"
.br
.ti -1c
.RI "\fB__isl_give\fP struct \fBisl_upoly\fP * \fBisl_upoly_subs\fP (\fB__isl_take\fP struct \fBisl_upoly\fP *up, unsigned first, unsigned \fBn\fP, \fB__isl_keep\fP struct \fBisl_upoly\fP **subs)"
.br
.ti -1c
.RI "\fB__isl_give\fP struct \fBisl_upoly\fP * \fBisl_upoly_from_affine\fP (\fBisl_ctx\fP *ctx, \fBisl_int\fP *\fBf\fP, \fBisl_int\fP denom, unsigned len)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_qpolynomial\fP * \fBisl_qpolynomial_rat_cst_on_domain\fP (\fB__isl_take\fP \fBisl_space\fP *\fBdim\fP, \fBconst\fP \fBisl_int\fP \fBn\fP, \fBconst\fP \fBisl_int\fP d)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_qpolynomial\fP * \fBisl_qpolynomial_val_on_domain\fP (\fB__isl_take\fP \fBisl_space\fP *\fBdomain\fP, \fB__isl_take\fP \fBisl_val\fP *\fBval\fP)"
.br
.ti -1c
.RI "\fBisl_bool\fP \fBisl_qpolynomial_involves_dims\fP (\fB__isl_keep\fP \fBisl_qpolynomial\fP *qp, enum \fBisl_dim_type\fP type, unsigned first, unsigned \fBn\fP)"
.br
.ti -1c
.RI "\fB__isl_give\fP struct \fBisl_upoly\fP * \fBisl_upoly_drop\fP (\fB__isl_take\fP struct \fBisl_upoly\fP *up, unsigned first, unsigned \fBn\fP)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_qpolynomial\fP * \fBisl_qpolynomial_set_dim_name\fP (\fB__isl_take\fP \fBisl_qpolynomial\fP *qp, enum \fBisl_dim_type\fP type, unsigned \fBpos\fP, \fBconst\fP char *s)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_qpolynomial\fP * \fBisl_qpolynomial_drop_dims\fP (\fB__isl_take\fP \fBisl_qpolynomial\fP *qp, enum \fBisl_dim_type\fP type, unsigned first, unsigned \fBn\fP)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_qpolynomial\fP * \fBisl_qpolynomial_project_domain_on_params\fP (\fB__isl_take\fP \fBisl_qpolynomial\fP *qp)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_qpolynomial\fP * \fBisl_qpolynomial_substitute_equalities\fP (\fB__isl_take\fP \fBisl_qpolynomial\fP *qp, \fB__isl_take\fP \fBisl_basic_set\fP *\fBeq\fP)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_qpolynomial\fP * \fBisl_qpolynomial_gist\fP (\fB__isl_take\fP \fBisl_qpolynomial\fP *qp, \fB__isl_take\fP \fBisl_set\fP *\fBcontext\fP)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_qpolynomial\fP * \fBisl_qpolynomial_gist_params\fP (\fB__isl_take\fP \fBisl_qpolynomial\fP *qp, \fB__isl_take\fP \fBisl_set\fP *\fBcontext\fP)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_pw_qpolynomial\fP * \fBisl_pw_qpolynomial_from_qpolynomial\fP (\fB__isl_take\fP \fBisl_qpolynomial\fP *qp)"
.br
.ti -1c
.RI "int \fBisl_pw_qpolynomial_is_one\fP (\fB__isl_keep\fP \fBisl_pw_qpolynomial\fP *\fBpwqp\fP)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_pw_qpolynomial\fP * \fBisl_pw_qpolynomial_add\fP (\fB__isl_take\fP \fBisl_pw_qpolynomial\fP *pwqp1, \fB__isl_take\fP \fBisl_pw_qpolynomial\fP *pwqp2)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_pw_qpolynomial\fP * \fBisl_pw_qpolynomial_mul\fP (\fB__isl_take\fP \fBisl_pw_qpolynomial\fP *pwqp1, \fB__isl_take\fP \fBisl_pw_qpolynomial\fP *pwqp2)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_val\fP * \fBisl_upoly_eval\fP (\fB__isl_take\fP struct \fBisl_upoly\fP *up, \fB__isl_take\fP \fBisl_vec\fP *vec)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_val\fP * \fBisl_qpolynomial_eval\fP (\fB__isl_take\fP \fBisl_qpolynomial\fP *qp, \fB__isl_take\fP \fBisl_point\fP *pnt)"
.br
.ti -1c
.RI "int \fBisl_upoly_cmp\fP (\fB__isl_keep\fP struct \fBisl_upoly_cst\fP *cst1, \fB__isl_keep\fP struct \fBisl_upoly_cst\fP *cst2)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_qpolynomial\fP * \fBisl_qpolynomial_insert_dims\fP (\fB__isl_take\fP \fBisl_qpolynomial\fP *qp, enum \fBisl_dim_type\fP type, unsigned first, unsigned \fBn\fP)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_qpolynomial\fP * \fBisl_qpolynomial_add_dims\fP (\fB__isl_take\fP \fBisl_qpolynomial\fP *qp, enum \fBisl_dim_type\fP type, unsigned \fBn\fP)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_pw_qpolynomial\fP * \fBisl_pw_qpolynomial_add_dims\fP (\fB__isl_take\fP \fBisl_pw_qpolynomial\fP *\fBpwqp\fP, enum \fBisl_dim_type\fP type, unsigned \fBn\fP)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_qpolynomial\fP * \fBisl_qpolynomial_move_dims\fP (\fB__isl_take\fP \fBisl_qpolynomial\fP *qp, enum \fBisl_dim_type\fP dst_type, unsigned dst_pos, enum \fBisl_dim_type\fP src_type, unsigned src_pos, unsigned \fBn\fP)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_qpolynomial\fP * \fBisl_qpolynomial_from_affine\fP (\fB__isl_take\fP \fBisl_space\fP *\fBdim\fP, \fBisl_int\fP *\fBf\fP, \fBisl_int\fP denom)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_qpolynomial\fP * \fBisl_qpolynomial_from_aff\fP (\fB__isl_take\fP \fBisl_aff\fP *aff)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_pw_qpolynomial\fP * \fBisl_pw_qpolynomial_from_pw_aff\fP (\fB__isl_take\fP \fBisl_pw_aff\fP *pwaff)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_qpolynomial\fP * \fBisl_qpolynomial_from_constraint\fP (\fB__isl_take\fP \fBisl_constraint\fP *\fBc\fP, enum \fBisl_dim_type\fP type, unsigned \fBpos\fP)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_qpolynomial\fP * \fBisl_qpolynomial_substitute\fP (\fB__isl_take\fP \fBisl_qpolynomial\fP *qp, enum \fBisl_dim_type\fP type, unsigned first, unsigned \fBn\fP, \fB__isl_keep\fP \fBisl_qpolynomial\fP **subs)"
.br
.ti -1c
.RI "int \fBisl_qpolynomial_as_polynomial_on_domain\fP (\fB__isl_keep\fP \fBisl_qpolynomial\fP *qp, \fB__isl_keep\fP \fBisl_basic_set\fP *bset, int(*\fBfn\fP)(\fB__isl_take\fP \fBisl_basic_set\fP *bset, \fB__isl_take\fP \fBisl_qpolynomial\fP *poly, void *\fBuser\fP), void *\fBuser\fP)"
.br
.ti -1c
.RI "int \fBisl_upoly_degree\fP (\fB__isl_keep\fP struct \fBisl_upoly\fP *up, int first, int last)"
.br
.ti -1c
.RI "int \fBisl_qpolynomial_degree\fP (\fB__isl_keep\fP \fBisl_qpolynomial\fP *poly)"
.br
.ti -1c
.RI "\fB__isl_give\fP struct \fBisl_upoly\fP * \fBisl_upoly_coeff\fP (\fB__isl_keep\fP struct \fBisl_upoly\fP *up, unsigned \fBpos\fP, int deg)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_qpolynomial\fP * \fBisl_qpolynomial_coeff\fP (\fB__isl_keep\fP \fBisl_qpolynomial\fP *qp, enum \fBisl_dim_type\fP type, unsigned t_pos, int deg)"
.br
.ti -1c
.RI "\fB__isl_give\fP struct \fBisl_upoly\fP * \fBisl_upoly_homogenize\fP (\fB__isl_take\fP struct \fBisl_upoly\fP *up, int deg, int target, int first, int last)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_qpolynomial\fP * \fBisl_qpolynomial_homogenize\fP (\fB__isl_take\fP \fBisl_qpolynomial\fP *poly)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_term\fP * \fBisl_term_alloc\fP (\fB__isl_take\fP \fBisl_space\fP *\fBdim\fP, \fB__isl_take\fP \fBisl_mat\fP *div)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_term\fP * \fBisl_term_copy\fP (\fB__isl_keep\fP \fBisl_term\fP *term)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_term\fP * \fBisl_term_dup\fP (\fB__isl_keep\fP \fBisl_term\fP *term)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_term\fP * \fBisl_term_cow\fP (\fB__isl_take\fP \fBisl_term\fP *term)"
.br
.ti -1c
.RI "void \fBisl_term_free\fP (\fB__isl_take\fP \fBisl_term\fP *term)"
.br
.ti -1c
.RI "unsigned \fBisl_term_dim\fP (\fB__isl_keep\fP \fBisl_term\fP *term, enum \fBisl_dim_type\fP type)"
.br
.ti -1c
.RI "\fBisl_ctx\fP * \fBisl_term_get_ctx\fP (\fB__isl_keep\fP \fBisl_term\fP *term)"
.br
.ti -1c
.RI "void \fBisl_term_get_num\fP (\fB__isl_keep\fP \fBisl_term\fP *term, \fBisl_int\fP *\fBn\fP)"
.br
.ti -1c
.RI "void \fBisl_term_get_den\fP (\fB__isl_keep\fP \fBisl_term\fP *term, \fBisl_int\fP *d)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_val\fP * \fBisl_term_get_coefficient_val\fP (\fB__isl_keep\fP \fBisl_term\fP *term)"
.br
.ti -1c
.RI "int \fBisl_term_get_exp\fP (\fB__isl_keep\fP \fBisl_term\fP *term, enum \fBisl_dim_type\fP type, unsigned \fBpos\fP)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_aff\fP * \fBisl_term_get_div\fP (\fB__isl_keep\fP \fBisl_term\fP *term, unsigned \fBpos\fP)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_term\fP * \fBisl_upoly_foreach_term\fP (\fB__isl_keep\fP struct \fBisl_upoly\fP *up, \fBisl_stat\fP(*\fBfn\fP)(\fB__isl_take\fP \fBisl_term\fP *term, void *\fBuser\fP), \fB__isl_take\fP \fBisl_term\fP *term, void *\fBuser\fP)"
.br
.ti -1c
.RI "\fBisl_stat\fP \fBisl_qpolynomial_foreach_term\fP (\fB__isl_keep\fP \fBisl_qpolynomial\fP *qp, \fBisl_stat\fP(*\fBfn\fP)(\fB__isl_take\fP \fBisl_term\fP *term, void *\fBuser\fP), void *\fBuser\fP)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_qpolynomial\fP * \fBisl_qpolynomial_from_term\fP (\fB__isl_take\fP \fBisl_term\fP *term)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_qpolynomial\fP * \fBisl_qpolynomial_lift\fP (\fB__isl_take\fP \fBisl_qpolynomial\fP *qp, \fB__isl_take\fP \fBisl_space\fP *\fBdim\fP)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_val\fP * \fBisl_qpolynomial_opt_on_domain\fP (\fB__isl_take\fP \fBisl_qpolynomial\fP *qp, \fB__isl_take\fP \fBisl_set\fP *\fBset\fP, int \fBmax\fP)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_qpolynomial\fP * \fBisl_qpolynomial_morph_domain\fP (\fB__isl_take\fP \fBisl_qpolynomial\fP *qp, \fB__isl_take\fP \fBisl_morph\fP *morph)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_union_pw_qpolynomial\fP * \fBisl_union_pw_qpolynomial_mul\fP (\fB__isl_take\fP \fBisl_union_pw_qpolynomial\fP *upwqp1, \fB__isl_take\fP \fBisl_union_pw_qpolynomial\fP *upwqp2)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_qpolynomial\fP * \fBisl_qpolynomial_realign_domain\fP (\fB__isl_take\fP \fBisl_qpolynomial\fP *qp, \fB__isl_take\fP \fBisl_reordering\fP *r)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_qpolynomial\fP * \fBisl_qpolynomial_align_params\fP (\fB__isl_take\fP \fBisl_qpolynomial\fP *qp, \fB__isl_take\fP \fBisl_space\fP *model)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_pw_qpolynomial\fP * \fBisl_pw_qpolynomial_split_periods\fP (\fB__isl_take\fP \fBisl_pw_qpolynomial\fP *\fBpwqp\fP, int max_periods)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_pw_qpolynomial\fP * \fBisl_basic_set_multiplicative_call\fP (\fB__isl_take\fP \fBisl_basic_set\fP *bset, \fB__isl_give\fP \fBisl_pw_qpolynomial\fP *(*\fBfn\fP)(\fB__isl_take\fP \fBisl_basic_set\fP *bset))"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_pw_qpolynomial\fP * \fBisl_pw_qpolynomial_to_polynomial\fP (\fB__isl_take\fP \fBisl_pw_qpolynomial\fP *\fBpwqp\fP, int sign)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_union_pw_qpolynomial\fP * \fBisl_union_pw_qpolynomial_to_polynomial\fP (\fB__isl_take\fP \fBisl_union_pw_qpolynomial\fP *upwqp, int sign)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_basic_map\fP * \fBisl_basic_map_from_qpolynomial\fP (\fB__isl_take\fP \fBisl_qpolynomial\fP *qp)"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define DEFAULT_IS_ZERO   1"

.SS "#define EL   \fBisl_qpolynomial\fP"

.SS "#define EL_IS_ZERO   is_zero"

.SS "#define FIELD   qp"

.SS "#define IS_ZERO   is_zero"

.SS "#define ISL_DIM_H"

.SS "#define NO_PULLBACK"

.SS "#define PART   \fBisl_pw_qpolynomial\fP"

.SS "#define PARTS   pw_qpolynomial"

.SS "#define PW   \fBisl_pw_qpolynomial\fP"

.SS "#define \fBUNION\fP   \fBisl_union_pw_qpolynomial\fP"

.SS "#define ZERO   zero"

.SH "Function Documentation"
.PP 
.SS "\fB__isl_give\fP \fBisl_basic_map\fP* isl_basic_map_from_qpolynomial (\fB__isl_take\fP \fBisl_qpolynomial\fP * qp)"

.SS "\fB__isl_give\fP \fBisl_pw_qpolynomial\fP* isl_basic_set_multiplicative_call (\fB__isl_take\fP \fBisl_basic_set\fP * bset, \fB__isl_give\fP \fBisl_pw_qpolynomial\fP *(*)(\fB__isl_take\fP \fBisl_basic_set\fP *bset) fn)"

.SS "\fB__isl_give\fP \fBisl_pw_qpolynomial\fP* isl_pw_qpolynomial_add (\fB__isl_take\fP \fBisl_pw_qpolynomial\fP * pwqp1, \fB__isl_take\fP \fBisl_pw_qpolynomial\fP * pwqp2)"

.SS "\fB__isl_give\fP \fBisl_pw_qpolynomial\fP* isl_pw_qpolynomial_add_dims (\fB__isl_take\fP \fBisl_pw_qpolynomial\fP * pwqp, enum \fBisl_dim_type\fP type, unsigned n)"

.SS "\fB__isl_give\fP \fBisl_pw_qpolynomial\fP* isl_pw_qpolynomial_from_pw_aff (\fB__isl_take\fP \fBisl_pw_aff\fP * pwaff)"

.SS "\fB__isl_give\fP \fBisl_pw_qpolynomial\fP* isl_pw_qpolynomial_from_qpolynomial (\fB__isl_take\fP \fBisl_qpolynomial\fP * qp)"

.SS "int isl_pw_qpolynomial_is_one (\fB__isl_keep\fP \fBisl_pw_qpolynomial\fP * pwqp)"

.SS "\fB__isl_give\fP \fBisl_pw_qpolynomial\fP* isl_pw_qpolynomial_mul (\fB__isl_take\fP \fBisl_pw_qpolynomial\fP * pwqp1, \fB__isl_take\fP \fBisl_pw_qpolynomial\fP * pwqp2)"

.SS "\fB__isl_give\fP \fBisl_pw_qpolynomial\fP* isl_pw_qpolynomial_pow (\fB__isl_take\fP \fBisl_pw_qpolynomial\fP * pwqp, unsigned power)"

.SS "\fB__isl_give\fP \fBisl_pw_qpolynomial\fP* isl_pw_qpolynomial_split_periods (\fB__isl_take\fP \fBisl_pw_qpolynomial\fP * pwqp, int max_periods)"

.SS "\fB__isl_give\fP \fBisl_pw_qpolynomial\fP* isl_pw_qpolynomial_to_polynomial (\fB__isl_take\fP \fBisl_pw_qpolynomial\fP * pwqp, int sign)"

.SS "\fB__isl_give\fP \fBisl_qpolynomial\fP* isl_qpolynomial_add (\fB__isl_take\fP \fBisl_qpolynomial\fP * qp1, \fB__isl_take\fP \fBisl_qpolynomial\fP * qp2)"

.SS "\fB__isl_give\fP \fBisl_qpolynomial\fP* isl_qpolynomial_add_dims (\fB__isl_take\fP \fBisl_qpolynomial\fP * qp, enum \fBisl_dim_type\fP type, unsigned n)"

.SS "\fB__isl_give\fP \fBisl_qpolynomial\fP* isl_qpolynomial_add_isl_int (\fB__isl_take\fP \fBisl_qpolynomial\fP * qp, \fBisl_int\fP v)"

.SS "\fB__isl_give\fP \fBisl_qpolynomial\fP* isl_qpolynomial_add_on_domain (\fB__isl_keep\fP \fBisl_set\fP * dom, \fB__isl_take\fP \fBisl_qpolynomial\fP * qp1, \fB__isl_take\fP \fBisl_qpolynomial\fP * qp2)"

.SS "\fB__isl_give\fP \fBisl_qpolynomial\fP* isl_qpolynomial_align_params (\fB__isl_take\fP \fBisl_qpolynomial\fP * qp, \fB__isl_take\fP \fBisl_space\fP * model)"

.SS "\fB__isl_give\fP \fBisl_qpolynomial\fP* isl_qpolynomial_alloc (\fB__isl_take\fP \fBisl_space\fP * dim, unsigned n_div, \fB__isl_take\fP struct \fBisl_upoly\fP * up)"

.SS "int isl_qpolynomial_as_polynomial_on_domain (\fB__isl_keep\fP \fBisl_qpolynomial\fP * qp, \fB__isl_keep\fP \fBisl_basic_set\fP * bset, int(*)(\fB__isl_take\fP \fBisl_basic_set\fP *bset, \fB__isl_take\fP \fBisl_qpolynomial\fP *poly, void *\fBuser\fP) fn, void * user)"

.SS "\fB__isl_give\fP \fBisl_qpolynomial\fP* isl_qpolynomial_coeff (\fB__isl_keep\fP \fBisl_qpolynomial\fP * qp, enum \fBisl_dim_type\fP type, unsigned t_pos, int deg)"

.SS "\fB__isl_give\fP \fBisl_qpolynomial\fP* isl_qpolynomial_copy (\fB__isl_keep\fP \fBisl_qpolynomial\fP * qp)"

.SS "\fB__isl_give\fP \fBisl_qpolynomial\fP* isl_qpolynomial_cow (\fB__isl_take\fP \fBisl_qpolynomial\fP * qp)"

.SS "\fB__isl_give\fP \fBisl_qpolynomial\fP* isl_qpolynomial_cst_on_domain (\fB__isl_take\fP \fBisl_space\fP * dim, \fBisl_int\fP v)"

.SS "int isl_qpolynomial_degree (\fB__isl_keep\fP \fBisl_qpolynomial\fP * poly)"

.SS "unsigned isl_qpolynomial_dim (\fB__isl_keep\fP \fBisl_qpolynomial\fP * qp, enum \fBisl_dim_type\fP type)"

.SS "\fB__isl_give\fP \fBisl_qpolynomial\fP* isl_qpolynomial_drop_dims (\fB__isl_take\fP \fBisl_qpolynomial\fP * qp, enum \fBisl_dim_type\fP type, unsigned first, unsigned n)"

.SS "\fB__isl_give\fP \fBisl_qpolynomial\fP* isl_qpolynomial_dup (\fB__isl_keep\fP \fBisl_qpolynomial\fP * qp)"

.SS "\fB__isl_give\fP \fBisl_val\fP* isl_qpolynomial_eval (\fB__isl_take\fP \fBisl_qpolynomial\fP * qp, \fB__isl_take\fP \fBisl_point\fP * pnt)"

.SS "\fB__isl_give\fP \fBisl_vec\fP* isl_qpolynomial_extract_affine (\fB__isl_keep\fP \fBisl_qpolynomial\fP * qp)"

.SS "\fBisl_stat\fP isl_qpolynomial_foreach_term (\fB__isl_keep\fP \fBisl_qpolynomial\fP * qp, \fBisl_stat\fP(*)(\fB__isl_take\fP \fBisl_term\fP *term, void *\fBuser\fP) fn, void * user)"

.SS "\fB__isl_null\fP \fBisl_qpolynomial\fP* isl_qpolynomial_free (\fB__isl_take\fP \fBisl_qpolynomial\fP * qp)"

.SS "\fB__isl_give\fP \fBisl_qpolynomial\fP* isl_qpolynomial_from_aff (\fB__isl_take\fP \fBisl_aff\fP * aff)"

.SS "\fB__isl_give\fP \fBisl_qpolynomial\fP* isl_qpolynomial_from_affine (\fB__isl_take\fP \fBisl_space\fP * dim, \fBisl_int\fP * f, \fBisl_int\fP denom)"

.SS "\fB__isl_give\fP \fBisl_qpolynomial\fP* isl_qpolynomial_from_constraint (\fB__isl_take\fP \fBisl_constraint\fP * c, enum \fBisl_dim_type\fP type, unsigned pos)"

.SS "\fB__isl_give\fP \fBisl_qpolynomial\fP* isl_qpolynomial_from_term (\fB__isl_take\fP \fBisl_term\fP * term)"

.SS "\fB__isl_give\fP \fBisl_val\fP* isl_qpolynomial_get_constant_val (\fB__isl_keep\fP \fBisl_qpolynomial\fP * qp)"

.SS "\fBisl_ctx\fP* isl_qpolynomial_get_ctx (\fB__isl_keep\fP \fBisl_qpolynomial\fP * qp)"

.SS "void isl_qpolynomial_get_den (\fB__isl_keep\fP \fBisl_qpolynomial\fP * qp, \fBisl_int\fP * d)"

.SS "\fB__isl_give\fP \fBisl_space\fP* isl_qpolynomial_get_domain_space (\fB__isl_keep\fP \fBisl_qpolynomial\fP * qp)"

.SS "\fB__isl_give\fP \fBisl_space\fP* isl_qpolynomial_get_space (\fB__isl_keep\fP \fBisl_qpolynomial\fP * qp)"

.SS "\fB__isl_give\fP \fBisl_qpolynomial\fP* isl_qpolynomial_gist (\fB__isl_take\fP \fBisl_qpolynomial\fP * qp, \fB__isl_take\fP \fBisl_set\fP * context)"

.SS "\fB__isl_give\fP \fBisl_qpolynomial\fP* isl_qpolynomial_gist_params (\fB__isl_take\fP \fBisl_qpolynomial\fP * qp, \fB__isl_take\fP \fBisl_set\fP * context)"

.SS "\fB__isl_give\fP \fBisl_qpolynomial\fP* isl_qpolynomial_homogenize (\fB__isl_take\fP \fBisl_qpolynomial\fP * poly)"

.SS "\fB__isl_give\fP \fBisl_qpolynomial\fP* isl_qpolynomial_infty_on_domain (\fB__isl_take\fP \fBisl_space\fP * dim)"

.SS "\fB__isl_give\fP \fBisl_qpolynomial\fP* isl_qpolynomial_insert_dims (\fB__isl_take\fP \fBisl_qpolynomial\fP * qp, enum \fBisl_dim_type\fP type, unsigned first, unsigned n)"

.SS "\fBisl_bool\fP isl_qpolynomial_involves_dims (\fB__isl_keep\fP \fBisl_qpolynomial\fP * qp, enum \fBisl_dim_type\fP type, unsigned first, unsigned n)"

.SS "int isl_qpolynomial_is_affine (\fB__isl_keep\fP \fBisl_qpolynomial\fP * qp)"

.SS "int isl_qpolynomial_is_cst (\fB__isl_keep\fP \fBisl_qpolynomial\fP * qp, \fBisl_int\fP * n, \fBisl_int\fP * d)"

.SS "\fBisl_bool\fP isl_qpolynomial_is_infty (\fB__isl_keep\fP \fBisl_qpolynomial\fP * qp)"

.SS "\fBisl_bool\fP isl_qpolynomial_is_nan (\fB__isl_keep\fP \fBisl_qpolynomial\fP * qp)"

.SS "\fBisl_bool\fP isl_qpolynomial_is_neginfty (\fB__isl_keep\fP \fBisl_qpolynomial\fP * qp)"

.SS "\fBisl_bool\fP isl_qpolynomial_is_one (\fB__isl_keep\fP \fBisl_qpolynomial\fP * qp)"

.SS "\fBisl_bool\fP isl_qpolynomial_is_zero (\fB__isl_keep\fP \fBisl_qpolynomial\fP * qp)"

.SS "\fB__isl_give\fP \fBisl_qpolynomial\fP* isl_qpolynomial_lift (\fB__isl_take\fP \fBisl_qpolynomial\fP * qp, \fB__isl_take\fP \fBisl_space\fP * dim)"

.SS "\fB__isl_give\fP \fBisl_qpolynomial\fP* isl_qpolynomial_morph_domain (\fB__isl_take\fP \fBisl_qpolynomial\fP * qp, \fB__isl_take\fP \fBisl_morph\fP * morph)"

.SS "\fB__isl_give\fP \fBisl_qpolynomial\fP* isl_qpolynomial_move_dims (\fB__isl_take\fP \fBisl_qpolynomial\fP * qp, enum \fBisl_dim_type\fP dst_type, unsigned dst_pos, enum \fBisl_dim_type\fP src_type, unsigned src_pos, unsigned n)"

.SS "\fB__isl_give\fP \fBisl_qpolynomial\fP* isl_qpolynomial_mul (\fB__isl_take\fP \fBisl_qpolynomial\fP * qp1, \fB__isl_take\fP \fBisl_qpolynomial\fP * qp2)"

.SS "\fB__isl_give\fP \fBisl_qpolynomial\fP* isl_qpolynomial_mul_isl_int (\fB__isl_take\fP \fBisl_qpolynomial\fP * qp, \fBisl_int\fP v)"

.SS "\fB__isl_give\fP \fBisl_qpolynomial\fP* isl_qpolynomial_nan_on_domain (\fB__isl_take\fP \fBisl_space\fP * dim)"

.SS "\fB__isl_give\fP \fBisl_qpolynomial\fP* isl_qpolynomial_neg (\fB__isl_take\fP \fBisl_qpolynomial\fP * qp)"

.SS "\fB__isl_give\fP \fBisl_qpolynomial\fP* isl_qpolynomial_neginfty_on_domain (\fB__isl_take\fP \fBisl_space\fP * dim)"

.SS "\fB__isl_give\fP \fBisl_qpolynomial\fP* isl_qpolynomial_one_on_domain (\fB__isl_take\fP \fBisl_space\fP * dim)"

.SS "\fB__isl_give\fP \fBisl_val\fP* isl_qpolynomial_opt_on_domain (\fB__isl_take\fP \fBisl_qpolynomial\fP * qp, \fB__isl_take\fP \fBisl_set\fP * set, int max)"

.SS "\fBisl_bool\fP isl_qpolynomial_plain_is_equal (\fB__isl_keep\fP \fBisl_qpolynomial\fP * qp1, \fB__isl_keep\fP \fBisl_qpolynomial\fP * qp2)"

.SS "\fB__isl_give\fP \fBisl_qpolynomial\fP* isl_qpolynomial_pow (\fB__isl_take\fP \fBisl_qpolynomial\fP * qp, unsigned power)"

.SS "\fB__isl_give\fP \fBisl_qpolynomial\fP* isl_qpolynomial_project_domain_on_params (\fB__isl_take\fP \fBisl_qpolynomial\fP * qp)"

.SS "\fB__isl_give\fP \fBisl_qpolynomial\fP* isl_qpolynomial_rat_cst_on_domain (\fB__isl_take\fP \fBisl_space\fP * dim, \fBconst\fP \fBisl_int\fP n, \fBconst\fP \fBisl_int\fP d)"

.SS "\fB__isl_give\fP \fBisl_qpolynomial\fP* isl_qpolynomial_realign_domain (\fB__isl_take\fP \fBisl_qpolynomial\fP * qp, \fB__isl_take\fP \fBisl_reordering\fP * r)"

.SS "\fB__isl_give\fP \fBisl_qpolynomial\fP* isl_qpolynomial_reset_domain_space (\fB__isl_take\fP \fBisl_qpolynomial\fP * qp, \fB__isl_take\fP \fBisl_space\fP * dim)"

.SS "\fB__isl_give\fP \fBisl_qpolynomial\fP* isl_qpolynomial_reset_space_and_domain (\fB__isl_take\fP \fBisl_qpolynomial\fP * qp, \fB__isl_take\fP \fBisl_space\fP * space, \fB__isl_take\fP \fBisl_space\fP * domain)"

.SS "\fB__isl_give\fP \fBisl_qpolynomial\fP* isl_qpolynomial_scale (\fB__isl_take\fP \fBisl_qpolynomial\fP * qp, \fBisl_int\fP v)"

.SS "\fB__isl_give\fP \fBisl_qpolynomial\fP* isl_qpolynomial_scale_down_val (\fB__isl_take\fP \fBisl_qpolynomial\fP * qp, \fB__isl_take\fP \fBisl_val\fP * v)"

.SS "\fB__isl_give\fP \fBisl_qpolynomial\fP* isl_qpolynomial_scale_val (\fB__isl_take\fP \fBisl_qpolynomial\fP * qp, \fB__isl_take\fP \fBisl_val\fP * v)"

.SS "\fB__isl_give\fP \fBisl_qpolynomial\fP* isl_qpolynomial_set_dim_name (\fB__isl_take\fP \fBisl_qpolynomial\fP * qp, enum \fBisl_dim_type\fP type, unsigned pos, \fBconst\fP char * s)"

.SS "int isl_qpolynomial_sgn (\fB__isl_keep\fP \fBisl_qpolynomial\fP * qp)"

.SS "\fB__isl_give\fP \fBisl_qpolynomial\fP* isl_qpolynomial_sub (\fB__isl_take\fP \fBisl_qpolynomial\fP * qp1, \fB__isl_take\fP \fBisl_qpolynomial\fP * qp2)"

.SS "\fB__isl_give\fP \fBisl_qpolynomial\fP* isl_qpolynomial_substitute (\fB__isl_take\fP \fBisl_qpolynomial\fP * qp, enum \fBisl_dim_type\fP type, unsigned first, unsigned n, \fB__isl_keep\fP \fBisl_qpolynomial\fP ** subs)"

.SS "\fB__isl_give\fP \fBisl_qpolynomial\fP* isl_qpolynomial_substitute_equalities (\fB__isl_take\fP \fBisl_qpolynomial\fP * qp, \fB__isl_take\fP \fBisl_basic_set\fP * eq)"

.SS "\fB__isl_give\fP \fBisl_qpolynomial\fP* isl_qpolynomial_val_on_domain (\fB__isl_take\fP \fBisl_space\fP * domain, \fB__isl_take\fP \fBisl_val\fP * val)"

.SS "\fB__isl_give\fP \fBisl_qpolynomial\fP* isl_qpolynomial_var_on_domain (\fB__isl_take\fP \fBisl_space\fP * dim, enum \fBisl_dim_type\fP type, unsigned pos)"

.SS "\fB__isl_give\fP \fBisl_qpolynomial\fP* isl_qpolynomial_var_pow_on_domain (\fB__isl_take\fP \fBisl_space\fP * dim, int pos, int power)"

.SS "\fB__isl_give\fP \fBisl_qpolynomial\fP* isl_qpolynomial_zero_on_domain (\fB__isl_take\fP \fBisl_space\fP * dim)"

.SS "\fB__isl_give\fP \fBisl_term\fP* isl_term_alloc (\fB__isl_take\fP \fBisl_space\fP * dim, \fB__isl_take\fP \fBisl_mat\fP * div)"

.SS "\fB__isl_give\fP \fBisl_term\fP* isl_term_copy (\fB__isl_keep\fP \fBisl_term\fP * term)"

.SS "\fB__isl_give\fP \fBisl_term\fP* isl_term_cow (\fB__isl_take\fP \fBisl_term\fP * term)"

.SS "unsigned isl_term_dim (\fB__isl_keep\fP \fBisl_term\fP * term, enum \fBisl_dim_type\fP type)"

.SS "\fB__isl_give\fP \fBisl_term\fP* isl_term_dup (\fB__isl_keep\fP \fBisl_term\fP * term)"

.SS "void isl_term_free (\fB__isl_take\fP \fBisl_term\fP * term)"

.SS "\fB__isl_give\fP \fBisl_val\fP* isl_term_get_coefficient_val (\fB__isl_keep\fP \fBisl_term\fP * term)"

.SS "\fBisl_ctx\fP* isl_term_get_ctx (\fB__isl_keep\fP \fBisl_term\fP * term)"

.SS "void isl_term_get_den (\fB__isl_keep\fP \fBisl_term\fP * term, \fBisl_int\fP * d)"

.SS "\fB__isl_give\fP \fBisl_aff\fP* isl_term_get_div (\fB__isl_keep\fP \fBisl_term\fP * term, unsigned pos)"

.SS "int isl_term_get_exp (\fB__isl_keep\fP \fBisl_term\fP * term, enum \fBisl_dim_type\fP type, unsigned pos)"

.SS "void isl_term_get_num (\fB__isl_keep\fP \fBisl_term\fP * term, \fBisl_int\fP * n)"

.SS "\fB__isl_give\fP \fBisl_union_pw_qpolynomial\fP* isl_union_pw_qpolynomial_mul (\fB__isl_take\fP \fBisl_union_pw_qpolynomial\fP * upwqp1, \fB__isl_take\fP \fBisl_union_pw_qpolynomial\fP * upwqp2)"

.SS "\fB__isl_give\fP \fBisl_union_pw_qpolynomial\fP* isl_union_pw_qpolynomial_to_polynomial (\fB__isl_take\fP \fBisl_union_pw_qpolynomial\fP * upwqp, int sign)"

.SS "\fB__isl_give\fP struct \fBisl_upoly\fP* isl_upoly_add_isl_int (\fB__isl_take\fP struct \fBisl_upoly\fP * up, \fBisl_int\fP v)"

.SS "\fB__isl_give\fP struct \fBisl_upoly_rec\fP* isl_upoly_alloc_rec (struct \fBisl_ctx\fP * ctx, int var, int size)"

.SS "\fB__isl_keep\fP struct \fBisl_upoly_cst\fP* isl_upoly_as_cst (\fB__isl_keep\fP struct \fBisl_upoly\fP * up)"

.SS "\fB__isl_keep\fP struct \fBisl_upoly_rec\fP* isl_upoly_as_rec (\fB__isl_keep\fP struct \fBisl_upoly\fP * up)"

.SS "int isl_upoly_cmp (\fB__isl_keep\fP struct \fBisl_upoly_cst\fP * cst1, \fB__isl_keep\fP struct \fBisl_upoly_cst\fP * cst2)"

.SS "\fB__isl_give\fP struct \fBisl_upoly\fP* isl_upoly_coeff (\fB__isl_keep\fP struct \fBisl_upoly\fP * up, unsigned pos, int deg)"

.SS "\fB__isl_give\fP struct \fBisl_upoly\fP* isl_upoly_copy (\fB__isl_keep\fP struct \fBisl_upoly\fP * up)"

.SS "\fB__isl_give\fP struct \fBisl_upoly\fP* isl_upoly_cow (\fB__isl_take\fP struct \fBisl_upoly\fP * up)"

.SS "\fB__isl_give\fP struct \fBisl_upoly\fP* isl_upoly_cst_add_isl_int (\fB__isl_take\fP struct \fBisl_upoly\fP * up, \fBisl_int\fP v)"

.SS "\fB__isl_give\fP struct \fBisl_upoly_cst\fP* isl_upoly_cst_alloc (struct \fBisl_ctx\fP * ctx)"

.SS "\fB__isl_give\fP struct \fBisl_upoly\fP* isl_upoly_cst_mul_isl_int (\fB__isl_take\fP struct \fBisl_upoly\fP * up, \fBisl_int\fP v)"

.SS "int isl_upoly_degree (\fB__isl_keep\fP struct \fBisl_upoly\fP * up, int first, int last)"

.SS "\fB__isl_give\fP struct \fBisl_upoly\fP* isl_upoly_drop (\fB__isl_take\fP struct \fBisl_upoly\fP * up, unsigned first, unsigned n)"

.SS "\fB__isl_give\fP struct \fBisl_upoly\fP* isl_upoly_dup (\fB__isl_keep\fP struct \fBisl_upoly\fP * up)"

.SS "\fB__isl_give\fP struct \fBisl_upoly\fP* isl_upoly_dup_cst (\fB__isl_keep\fP struct \fBisl_upoly\fP * up)"

.SS "\fB__isl_give\fP struct \fBisl_upoly\fP* isl_upoly_dup_rec (\fB__isl_keep\fP struct \fBisl_upoly\fP * up)"

.SS "\fB__isl_give\fP \fBisl_val\fP* isl_upoly_eval (\fB__isl_take\fP struct \fBisl_upoly\fP * up, \fB__isl_take\fP \fBisl_vec\fP * vec)"

.SS "\fB__isl_give\fP \fBisl_term\fP* isl_upoly_foreach_term (\fB__isl_keep\fP struct \fBisl_upoly\fP * up, \fBisl_stat\fP(*)(\fB__isl_take\fP \fBisl_term\fP *term, void *\fBuser\fP) fn, \fB__isl_take\fP \fBisl_term\fP * term, void * user)"

.SS "void isl_upoly_free (\fB__isl_take\fP struct \fBisl_upoly\fP * up)"

.SS "\fB__isl_give\fP struct \fBisl_upoly\fP* isl_upoly_from_affine (\fBisl_ctx\fP * ctx, \fBisl_int\fP * f, \fBisl_int\fP denom, unsigned len)"

.SS "\fB__isl_give\fP struct \fBisl_upoly\fP* isl_upoly_homogenize (\fB__isl_take\fP struct \fBisl_upoly\fP * up, int deg, int target, int first, int last)"

.SS "\fB__isl_give\fP struct \fBisl_upoly\fP* isl_upoly_infty (struct \fBisl_ctx\fP * ctx)"

.SS "int isl_upoly_is_affine (\fB__isl_keep\fP struct \fBisl_upoly\fP * up)"

.SS "int isl_upoly_is_cst (\fB__isl_keep\fP struct \fBisl_upoly\fP * up)"

.SS "\fBisl_bool\fP isl_upoly_is_equal (\fB__isl_keep\fP struct \fBisl_upoly\fP * up1, \fB__isl_keep\fP struct \fBisl_upoly\fP * up2)"

.SS "int isl_upoly_is_infty (\fB__isl_keep\fP struct \fBisl_upoly\fP * up)"

.SS "int isl_upoly_is_nan (\fB__isl_keep\fP struct \fBisl_upoly\fP * up)"

.SS "int isl_upoly_is_neginfty (\fB__isl_keep\fP struct \fBisl_upoly\fP * up)"

.SS "int isl_upoly_is_negone (\fB__isl_keep\fP struct \fBisl_upoly\fP * up)"

.SS "int isl_upoly_is_one (\fB__isl_keep\fP struct \fBisl_upoly\fP * up)"

.SS "int isl_upoly_is_zero (\fB__isl_keep\fP struct \fBisl_upoly\fP * up)"

.SS "\fB__isl_give\fP struct \fBisl_upoly\fP* isl_upoly_mul (\fB__isl_take\fP struct \fBisl_upoly\fP * up1, \fB__isl_take\fP struct \fBisl_upoly\fP * up2)"

.SS "\fB__isl_give\fP struct \fBisl_upoly\fP* isl_upoly_mul_cst (\fB__isl_take\fP struct \fBisl_upoly\fP * up1, \fB__isl_take\fP struct \fBisl_upoly\fP * up2)"

.SS "\fB__isl_give\fP struct \fBisl_upoly\fP* isl_upoly_mul_isl_int (\fB__isl_take\fP struct \fBisl_upoly\fP * up, \fBisl_int\fP v)"

.SS "\fB__isl_give\fP struct \fBisl_upoly\fP* isl_upoly_mul_rec (\fB__isl_take\fP struct \fBisl_upoly\fP * up1, \fB__isl_take\fP struct \fBisl_upoly\fP * up2)"

.SS "\fB__isl_give\fP struct \fBisl_upoly\fP* isl_upoly_nan (struct \fBisl_ctx\fP * ctx)"

.SS "\fB__isl_give\fP struct \fBisl_upoly\fP* isl_upoly_neginfty (struct \fBisl_ctx\fP * ctx)"

.SS "\fB__isl_give\fP struct \fBisl_upoly\fP* isl_upoly_one (struct \fBisl_ctx\fP * ctx)"

.SS "\fB__isl_give\fP struct \fBisl_upoly\fP* isl_upoly_pow (\fB__isl_take\fP struct \fBisl_upoly\fP * up, unsigned power)"

.SS "\fB__isl_give\fP struct \fBisl_upoly\fP* isl_upoly_rat_cst (struct \fBisl_ctx\fP * ctx, \fBisl_int\fP n, \fBisl_int\fP d)"

.SS "int isl_upoly_sgn (\fB__isl_keep\fP struct \fBisl_upoly\fP * up)"

.SS "\fB__isl_give\fP struct \fBisl_upoly\fP* isl_upoly_subs (\fB__isl_take\fP struct \fBisl_upoly\fP * up, unsigned first, unsigned n, \fB__isl_keep\fP struct \fBisl_upoly\fP ** subs)"

.SS "\fB__isl_give\fP struct \fBisl_upoly\fP* isl_upoly_sum (\fB__isl_take\fP struct \fBisl_upoly\fP * up1, \fB__isl_take\fP struct \fBisl_upoly\fP * up2)"

.SS "\fB__isl_give\fP struct \fBisl_upoly\fP* isl_upoly_sum_cst (\fB__isl_take\fP struct \fBisl_upoly\fP * up1, \fB__isl_take\fP struct \fBisl_upoly\fP * up2)"

.SS "int isl_upoly_update_affine (\fB__isl_keep\fP struct \fBisl_upoly\fP * up, \fB__isl_keep\fP \fBisl_vec\fP * aff)"

.SS "\fB__isl_give\fP struct \fBisl_upoly\fP* isl_upoly_var_pow (\fBisl_ctx\fP * ctx, int pos, int power)"

.SS "\fB__isl_give\fP struct \fBisl_upoly\fP* isl_upoly_zero (struct \fBisl_ctx\fP * ctx)"

.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
