.TH "omega::Simple_List< T >" 3 "Sun Jul 12 2020" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
omega::Simple_List< T >
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <SimpleList\&.h>\fP
.PP
Inherits \fBomega::Sequence< T >\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBSimple_List\fP (\fBconst\fP \fBSimple_List\fP< \fBT\fP > &l)"
.br
.ti -1c
.RI "\fBSimple_List\fP ()"
.br
.ti -1c
.RI "virtual \fB~Simple_List\fP ()"
.br
.ti -1c
.RI "\fBIterator\fP< \fBT\fP > * \fBnew_iterator\fP ()"
.br
.ti -1c
.RI "\fBconst\fP \fBT\fP & \fBoperator[]\fP (int) \fBconst\fP"
.br
.ti -1c
.RI "\fBT\fP & \fBoperator[]\fP (int)"
.br
.ti -1c
.RI "int \fBsize\fP () \fBconst\fP"
.br
.ti -1c
.RI "int \fBlength\fP () \fBconst\fP"
.br
.ti -1c
.RI "int \fBempty\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBT\fP & \fBfront\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBT\fP \fBremove_front\fP ()"
.br
.ti -1c
.RI "void \fBprepend\fP (\fBconst\fP \fBT\fP &item)"
.br
.ti -1c
.RI "void \fBappend\fP (\fBconst\fP \fBT\fP &item)"
.br
.ti -1c
.RI "void \fBdel_front\fP ()"
.br
.ti -1c
.RI "void \fBclear\fP ()"
.br
.ti -1c
.RI "void \fBjoin\fP (\fBSimple_List\fP< \fBT\fP > &consumed)"
.br
.ti -1c
.RI "int \fBindex\fP (\fBconst\fP \fBT\fP &) \fBconst\fP"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fBSimple_List_Iterator< T >\fP"
.br
.in -1c
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<class T > \fBomega::Simple_List\fP< \fBT\fP >::\fBSimple_List\fP (\fBconst\fP \fBSimple_List\fP< \fBT\fP > & l)\fC [inline]\fP"

.SS "template<class T > \fBomega::Simple_List\fP< \fBT\fP >::\fBSimple_List\fP ()\fC [inline]\fP"

.SS "template<class T > virtual \fBomega::Simple_List\fP< \fBT\fP >::~\fBSimple_List\fP ()\fC [inline]\fP, \fC [virtual]\fP"

.SH "Member Function Documentation"
.PP 
.SS "template<class T > void \fBomega::Simple_List\fP< \fBT\fP >::append (\fBconst\fP \fBT\fP & item)"

.SS "template<class T > void \fBomega::Simple_List\fP< \fBT\fP >::clear"

.SS "template<class T > void \fBomega::Simple_List\fP< \fBT\fP >::del_front"

.SS "template<class T > int \fBomega::Simple_List\fP< \fBT\fP >::empty () const\fC [inline]\fP"

.SS "template<class T > \fBT\fP & \fBomega::Simple_List\fP< \fBT\fP >::front"

.SS "template<class T > int \fBomega::Simple_List\fP< \fBT\fP >::index (\fBconst\fP \fBT\fP &) const\fC [inline]\fP, \fC [virtual]\fP"

.PP
Implements \fBomega::Sequence< T >\fP\&.
.SS "template<class T > void \fBomega::Simple_List\fP< \fBT\fP >::join (\fBSimple_List\fP< \fBT\fP > & consumed)"

.SS "template<class T > int \fBomega::Simple_List\fP< \fBT\fP >::length () const\fC [inline]\fP"

.SS "template<class T > \fBIterator\fP< \fBT\fP > * \fBomega::Simple_List\fP< \fBT\fP >::new_iterator\fC [virtual]\fP"

.PP
Implements \fBomega::Collection< T >\fP\&.
.SS "template<class T > \fBT\fP & \fBomega::Simple_List\fP< \fBT\fP >::operator[] (int i)\fC [virtual]\fP"

.PP
Implements \fBomega::Sequence< T >\fP\&.
.SS "template<class T > \fBconst\fP \fBT\fP & \fBomega::Simple_List\fP< \fBT\fP >::operator[] (int i) const\fC [virtual]\fP"

.PP
Implements \fBomega::Sequence< T >\fP\&.
.SS "template<class T > void \fBomega::Simple_List\fP< \fBT\fP >::prepend (\fBconst\fP \fBT\fP & item)"

.SS "template<class T > \fBT\fP \fBomega::Simple_List\fP< \fBT\fP >::remove_front"

.SS "template<class T > int \fBomega::Simple_List\fP< \fBT\fP >::size\fC [virtual]\fP"

.PP
Implements \fBomega::Collection< T >\fP\&.
.SH "Friends And Related Function Documentation"
.PP 
.SS "template<class T > friend class \fBSimple_List_Iterator\fP< \fBT\fP >\fC [friend]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
