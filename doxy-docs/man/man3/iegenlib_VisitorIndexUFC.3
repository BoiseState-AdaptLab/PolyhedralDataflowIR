.TH "iegenlib::VisitorIndexUFC" 3 "Sun Jul 12 2020" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
iegenlib::VisitorIndexUFC
.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBVisitor\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBVisitorIndexUFC\fP ()"
.br
.ti -1c
.RI "void \fBpostVisitUFCallTerm\fP (\fBUFCallTerm\fP *t)"
.br
.RI "For each UFC adds Domain & Range constraints to addedConstSet\&. "
.in -1c
.SH "Detailed Description"
.PP 
Vistor Class used for indexing, non-indexing UFCs Sometimes to provide arguments of an UFC like sigma(a1, a2, \&.\&.\&.) we use another UFC that is not indexed like left(f)\&. Here, the expanded form would look like this: sigma(left(f)[0], left(f)[1], \&.\&.\&.) 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "iegenlib::VisitorIndexUFC::VisitorIndexUFC ()\fC [inline]\fP"

.SH "Member Function Documentation"
.PP 
.SS "void iegenlib::VisitorIndexUFC::postVisitUFCallTerm (\fBUFCallTerm\fP * t)\fC [inline]\fP, \fC [virtual]\fP"

.PP
For each UFC adds Domain & Range constraints to addedConstSet\&. 
.PP
Reimplemented from \fBVisitor\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
