.TH "testing::internal::linked_ptr< T >" 3 "Sun Jul 12 2020" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
testing::internal::linked_ptr< T >
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <gtest\-linked_ptr\&.h>\fP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef \fBT\fP \fBelement_type\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBlinked_ptr\fP (\fBT\fP *ptr=\fBNULL\fP)"
.br
.ti -1c
.RI "\fB~linked_ptr\fP ()"
.br
.ti -1c
.RI "template<typename U > \fBlinked_ptr\fP (\fBlinked_ptr\fP< \fBU\fP > \fBconst\fP &ptr)"
.br
.ti -1c
.RI "\fBlinked_ptr\fP (\fBlinked_ptr\fP \fBconst\fP &ptr)"
.br
.ti -1c
.RI "template<typename U > \fBlinked_ptr\fP & \fBoperator=\fP (\fBlinked_ptr\fP< \fBU\fP > \fBconst\fP &ptr)"
.br
.ti -1c
.RI "\fBlinked_ptr\fP & \fBoperator=\fP (\fBlinked_ptr\fP \fBconst\fP &ptr)"
.br
.ti -1c
.RI "void \fBreset\fP (\fBT\fP *ptr=\fBNULL\fP)"
.br
.ti -1c
.RI "\fBT\fP * \fBget\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBT\fP * \fBoperator\->\fP () \fBconst\fP"
.br
.ti -1c
.RI "\fBT\fP & \fBoperator*\fP () \fBconst\fP"
.br
.ti -1c
.RI "bool \fBoperator==\fP (\fBT\fP *\fBp\fP) \fBconst\fP"
.br
.ti -1c
.RI "bool \fBoperator!=\fP (\fBT\fP *\fBp\fP) \fBconst\fP"
.br
.ti -1c
.RI "template<typename U > bool \fBoperator==\fP (\fBlinked_ptr\fP< \fBU\fP > \fBconst\fP &ptr) \fBconst\fP"
.br
.ti -1c
.RI "template<typename U > bool \fBoperator!=\fP (\fBlinked_ptr\fP< \fBU\fP > \fBconst\fP &ptr) \fBconst\fP"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "template<typename U > class \fBlinked_ptr\fP"
.br
.in -1c
.SH "Member Typedef Documentation"
.PP 
.SS "template<typename T > typedef \fBT\fP \fBtesting::internal::linked_ptr\fP< \fBT\fP >::\fBelement_type\fP"

.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename T > \fBtesting::internal::linked_ptr\fP< \fBT\fP >::\fBlinked_ptr\fP (\fBT\fP * ptr = \fC\fBNULL\fP\fP)\fC [inline]\fP, \fC [explicit]\fP"

.SS "template<typename T > \fBtesting::internal::linked_ptr\fP< \fBT\fP >::~\fBlinked_ptr\fP ()\fC [inline]\fP"

.SS "template<typename T > template<typename U > \fBtesting::internal::linked_ptr\fP< \fBT\fP >::\fBlinked_ptr\fP (\fBlinked_ptr\fP< \fBU\fP > \fBconst\fP & ptr)\fC [inline]\fP"

.SS "template<typename T > \fBtesting::internal::linked_ptr\fP< \fBT\fP >::\fBlinked_ptr\fP (\fBlinked_ptr\fP< \fBT\fP > \fBconst\fP & ptr)\fC [inline]\fP"

.SH "Member Function Documentation"
.PP 
.SS "template<typename T > \fBT\fP* \fBtesting::internal::linked_ptr\fP< \fBT\fP >::get () const\fC [inline]\fP"

.SS "template<typename T > template<typename U > bool \fBtesting::internal::linked_ptr\fP< \fBT\fP >::operator!= (\fBlinked_ptr\fP< \fBU\fP > \fBconst\fP & ptr) const\fC [inline]\fP"

.SS "template<typename T > bool \fBtesting::internal::linked_ptr\fP< \fBT\fP >::operator!= (\fBT\fP * p) const\fC [inline]\fP"

.SS "template<typename T > \fBT\fP& \fBtesting::internal::linked_ptr\fP< \fBT\fP >::operator* () const\fC [inline]\fP"

.SS "template<typename T > \fBT\fP* \fBtesting::internal::linked_ptr\fP< \fBT\fP >::operator\-> () const\fC [inline]\fP"

.SS "template<typename T > \fBlinked_ptr\fP& \fBtesting::internal::linked_ptr\fP< \fBT\fP >::operator= (\fBlinked_ptr\fP< \fBT\fP > \fBconst\fP & ptr)\fC [inline]\fP"

.SS "template<typename T > template<typename U > \fBlinked_ptr\fP& \fBtesting::internal::linked_ptr\fP< \fBT\fP >::operator= (\fBlinked_ptr\fP< \fBU\fP > \fBconst\fP & ptr)\fC [inline]\fP"

.SS "template<typename T > template<typename U > bool \fBtesting::internal::linked_ptr\fP< \fBT\fP >::operator== (\fBlinked_ptr\fP< \fBU\fP > \fBconst\fP & ptr) const\fC [inline]\fP"

.SS "template<typename T > bool \fBtesting::internal::linked_ptr\fP< \fBT\fP >::operator== (\fBT\fP * p) const\fC [inline]\fP"

.SS "template<typename T > void \fBtesting::internal::linked_ptr\fP< \fBT\fP >::reset (\fBT\fP * ptr = \fC\fBNULL\fP\fP)\fC [inline]\fP"

.SH "Friends And Related Function Documentation"
.PP 
.SS "template<typename T > template<typename U > friend class \fBlinked_ptr\fP\fC [friend]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
