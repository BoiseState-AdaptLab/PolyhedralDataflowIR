.TH "Visitor" 3 "Sun Jul 12 2020" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Visitor
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Visitor\&.h>\fP
.PP
Inherited by \fBiegenlib::VisitorBoundDomainRange\fP, \fBiegenlib::VisitorCalculateComplexity\fP, \fBiegenlib::VisitorGatherAllParameters\fP, \fBiegenlib::VisitorGetString\fP, \fBiegenlib::VisitorIndexUFC\fP, \fBiegenlib::VisitorIsUFCallParam\fP, \fBiegenlib::VisitorNumUFCallConstsMustRemove\fP, \fBiegenlib::VisitorProjectOut\fP, \fBiegenlib::VisitorProjectOutCleanUp\fP, \fBiegenlib::VisitorRemoveUFCallConsts\fP, \fBiegenlib::VisitorReverseAffineSubstitution\fP, \fBiegenlib::VisitorSuperAffineSet\fP, and \fBVisitorDebugTest\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBVisitor\fP ()"
.br
.ti -1c
.RI "virtual \fB~Visitor\fP ()"
.br
.ti -1c
.RI "virtual void \fBpreVisitTerm\fP (\fBiegenlib::Term\fP *\fBt\fP)"
.br
.ti -1c
.RI "virtual void \fBpreVisitUFCallTerm\fP (\fBiegenlib::UFCallTerm\fP *\fBt\fP)"
.br
.ti -1c
.RI "virtual void \fBpreVisitTupleVarTerm\fP (\fBiegenlib::TupleVarTerm\fP *\fBt\fP)"
.br
.ti -1c
.RI "virtual void \fBpreVisitVarTerm\fP (\fBiegenlib::VarTerm\fP *\fBt\fP)"
.br
.ti -1c
.RI "virtual void \fBpreVisitTupleExpTerm\fP (\fBiegenlib::TupleExpTerm\fP *\fBt\fP)"
.br
.ti -1c
.RI "virtual void \fBpreVisitExp\fP (\fBiegenlib::Exp\fP *\fBe\fP)"
.br
.ti -1c
.RI "virtual void \fBpostVisitTerm\fP (\fBiegenlib::Term\fP *\fBt\fP)"
.br
.ti -1c
.RI "virtual void \fBpostVisitUFCallTerm\fP (\fBiegenlib::UFCallTerm\fP *\fBt\fP)"
.br
.ti -1c
.RI "virtual void \fBpostVisitTupleVarTerm\fP (\fBiegenlib::TupleVarTerm\fP *\fBt\fP)"
.br
.ti -1c
.RI "virtual void \fBpostVisitVarTerm\fP (\fBiegenlib::VarTerm\fP *\fBt\fP)"
.br
.ti -1c
.RI "virtual void \fBpostVisitTupleExpTerm\fP (\fBiegenlib::TupleExpTerm\fP *\fBt\fP)"
.br
.ti -1c
.RI "virtual void \fBpostVisitExp\fP (\fBiegenlib::Exp\fP *\fBe\fP)"
.br
.ti -1c
.RI "virtual void \fBpreVisitConjunction\fP (\fBiegenlib::Conjunction\fP *\fBc\fP)"
.br
.ti -1c
.RI "virtual void \fBpreVisitSparseConstraints\fP (\fBiegenlib::SparseConstraints\fP *sc)"
.br
.ti -1c
.RI "virtual void \fBpreVisitSet\fP (\fBiegenlib::Set\fP *s)"
.br
.ti -1c
.RI "virtual void \fBpreVisitRelation\fP (\fBiegenlib::Relation\fP *r)"
.br
.ti -1c
.RI "virtual void \fBpostVisitConjunction\fP (\fBiegenlib::Conjunction\fP *\fBc\fP)"
.br
.ti -1c
.RI "virtual void \fBpostVisitSparseConstraints\fP (\fBiegenlib::SparseConstraints\fP *sc)"
.br
.ti -1c
.RI "virtual void \fBpostVisitSet\fP (\fBiegenlib::Set\fP *s)"
.br
.ti -1c
.RI "virtual void \fBpostVisitRelation\fP (\fBiegenlib::Relation\fP *r)"
.br
.in -1c
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Visitor::Visitor ()\fC [inline]\fP"

.SS "virtual Visitor::~Visitor ()\fC [inline]\fP, \fC [virtual]\fP"

.SH "Member Function Documentation"
.PP 
.SS "virtual void Visitor::postVisitConjunction (\fBiegenlib::Conjunction\fP * c)\fC [inline]\fP, \fC [virtual]\fP"

.PP
Reimplemented in \fBiegenlib::VisitorGetString\fP, \fBVisitorDebugTest\fP, \fBiegenlib::VisitorRemoveUFCallConsts\fP, \fBiegenlib::VisitorProjectOut\fP, \fBiegenlib::VisitorReverseAffineSubstitution\fP, \fBiegenlib::VisitorSuperAffineSet\fP, and \fBiegenlib::VisitorBoundDomainRange\fP\&.
.SS "virtual void Visitor::postVisitExp (\fBiegenlib::Exp\fP * e)\fC [inline]\fP, \fC [virtual]\fP"

.PP
Reimplemented in \fBVisitorDebugTest\fP, \fBiegenlib::VisitorRemoveUFCallConsts\fP, \fBiegenlib::VisitorNumUFCallConstsMustRemove\fP, \fBiegenlib::VisitorReverseAffineSubstitution\fP, \fBiegenlib::VisitorSuperAffineSet\fP, \fBiegenlib::VisitorIsUFCallParam\fP, and \fBiegenlib::VisitorCalculateComplexity\fP\&.
.SS "virtual void Visitor::postVisitRelation (\fBiegenlib::Relation\fP * r)\fC [inline]\fP, \fC [virtual]\fP"

.PP
Reimplemented in \fBVisitorDebugTest\fP, \fBiegenlib::VisitorProjectOut\fP, \fBiegenlib::VisitorReverseAffineSubstitution\fP, and \fBiegenlib::VisitorSuperAffineSet\fP\&.
.SS "virtual void Visitor::postVisitSet (\fBiegenlib::Set\fP * s)\fC [inline]\fP, \fC [virtual]\fP"

.PP
Reimplemented in \fBVisitorDebugTest\fP, \fBiegenlib::VisitorProjectOut\fP, \fBiegenlib::VisitorReverseAffineSubstitution\fP, and \fBiegenlib::VisitorSuperAffineSet\fP\&.
.SS "virtual void Visitor::postVisitSparseConstraints (\fBiegenlib::SparseConstraints\fP * sc)\fC [inline]\fP, \fC [virtual]\fP"

.PP
Reimplemented in \fBVisitorDebugTest\fP, and \fBiegenlib::VisitorRemoveUFCallConsts\fP\&.
.SS "virtual void Visitor::postVisitTerm (\fBiegenlib::Term\fP * t)\fC [inline]\fP, \fC [virtual]\fP"

.PP
Reimplemented in \fBVisitorDebugTest\fP\&.
.SS "virtual void Visitor::postVisitTupleExpTerm (\fBiegenlib::TupleExpTerm\fP * t)\fC [inline]\fP, \fC [virtual]\fP"

.PP
Reimplemented in \fBVisitorDebugTest\fP\&.
.SS "virtual void Visitor::postVisitTupleVarTerm (\fBiegenlib::TupleVarTerm\fP * t)\fC [inline]\fP, \fC [virtual]\fP"

.PP
Reimplemented in \fBiegenlib::VisitorCalculateComplexity\fP, and \fBVisitorDebugTest\fP\&.
.SS "virtual void Visitor::postVisitUFCallTerm (\fBiegenlib::UFCallTerm\fP * t)\fC [inline]\fP, \fC [virtual]\fP"

.PP
Reimplemented in \fBiegenlib::VisitorIndexUFC\fP, \fBiegenlib::VisitorCalculateComplexity\fP, \fBVisitorDebugTest\fP, and \fBiegenlib::VisitorProjectOutCleanUp\fP\&.
.SS "virtual void Visitor::postVisitVarTerm (\fBiegenlib::VarTerm\fP * t)\fC [inline]\fP, \fC [virtual]\fP"

.PP
Reimplemented in \fBiegenlib::VisitorCalculateComplexity\fP, and \fBVisitorDebugTest\fP\&.
.SS "virtual void Visitor::preVisitConjunction (\fBiegenlib::Conjunction\fP * c)\fC [inline]\fP, \fC [virtual]\fP"

.PP
Reimplemented in \fBiegenlib::VisitorGetString\fP, \fBiegenlib::VisitorRemoveUFCallConsts\fP, \fBiegenlib::VisitorReverseAffineSubstitution\fP, \fBiegenlib::VisitorSuperAffineSet\fP, and \fBiegenlib::VisitorBoundDomainRange\fP\&.
.SS "virtual void Visitor::preVisitExp (\fBiegenlib::Exp\fP * e)\fC [inline]\fP, \fC [virtual]\fP"

.PP
Reimplemented in \fBiegenlib::VisitorGetString\fP, \fBiegenlib::VisitorRemoveUFCallConsts\fP, \fBiegenlib::VisitorNumUFCallConstsMustRemove\fP, \fBiegenlib::VisitorReverseAffineSubstitution\fP, \fBiegenlib::VisitorSuperAffineSet\fP, \fBiegenlib::VisitorIsUFCallParam\fP, and \fBiegenlib::VisitorCalculateComplexity\fP\&.
.SS "virtual void Visitor::preVisitRelation (\fBiegenlib::Relation\fP * r)\fC [inline]\fP, \fC [virtual]\fP"

.PP
Reimplemented in \fBiegenlib::VisitorGetString\fP\&.
.SS "virtual void Visitor::preVisitSet (\fBiegenlib::Set\fP * s)\fC [inline]\fP, \fC [virtual]\fP"

.PP
Reimplemented in \fBiegenlib::VisitorGetString\fP\&.
.SS "virtual void Visitor::preVisitSparseConstraints (\fBiegenlib::SparseConstraints\fP * sc)\fC [inline]\fP, \fC [virtual]\fP"

.SS "virtual void Visitor::preVisitTerm (\fBiegenlib::Term\fP * t)\fC [inline]\fP, \fC [virtual]\fP"

.PP
Reimplemented in \fBiegenlib::VisitorReverseAffineSubstitution\fP, and \fBiegenlib::VisitorSuperAffineSet\fP\&.
.SS "virtual void Visitor::preVisitTupleExpTerm (\fBiegenlib::TupleExpTerm\fP * t)\fC [inline]\fP, \fC [virtual]\fP"

.PP
Reimplemented in \fBiegenlib::VisitorReverseAffineSubstitution\fP, and \fBiegenlib::VisitorSuperAffineSet\fP\&.
.SS "virtual void Visitor::preVisitTupleVarTerm (\fBiegenlib::TupleVarTerm\fP * t)\fC [inline]\fP, \fC [virtual]\fP"

.PP
Reimplemented in \fBiegenlib::VisitorReverseAffineSubstitution\fP, \fBiegenlib::VisitorSuperAffineSet\fP, \fBiegenlib::VisitorRemoveUFCallConsts\fP, \fBiegenlib::VisitorNumUFCallConstsMustRemove\fP, \fBiegenlib::VisitorProjectOutCleanUp\fP, and \fBiegenlib::VisitorIsUFCallParam\fP\&.
.SS "virtual void Visitor::preVisitUFCallTerm (\fBiegenlib::UFCallTerm\fP * t)\fC [inline]\fP, \fC [virtual]\fP"

.PP
Reimplemented in \fBiegenlib::VisitorGatherAllParameters\fP, \fBiegenlib::VisitorReverseAffineSubstitution\fP, \fBiegenlib::VisitorSuperAffineSet\fP, \fBiegenlib::VisitorBoundDomainRange\fP, and \fBiegenlib::VisitorProjectOutCleanUp\fP\&.
.SS "virtual void Visitor::preVisitVarTerm (\fBiegenlib::VarTerm\fP * t)\fC [inline]\fP, \fC [virtual]\fP"

.PP
Reimplemented in \fBiegenlib::VisitorReverseAffineSubstitution\fP, and \fBiegenlib::VisitorSuperAffineSet\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
