.TH "lib/gmp/gmp-impl.h" 3 "Sun Jul 12 2020" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
lib/gmp/gmp-impl.h
.SH SYNOPSIS
.br
.PP
\fC#include <limits\&.h>\fP
.br
\fC#include 'config\&.h'\fP
.br
\fC#include 'gmp\-mparam\&.h'\fP
.br
\fC#include 'fib_table\&.h'\fP
.br
\fC#include 'fac_table\&.h'\fP
.br
\fC#include 'mp_bases\&.h'\fP
.br
\fC#include <inttypes\&.h>\fP
.br
\fC#include <alloca\&.h>\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBgmp_pi1_t\fP"
.br
.ti -1c
.RI "struct \fBgmp_pi2_t\fP"
.br
.ti -1c
.RI "union \fBtmp_align_t\fP"
.br
.ti -1c
.RI "struct \fBtmp_reentrant_t\fP"
.br
.ti -1c
.RI "struct \fBgmp_randfnptr_t\fP"
.br
.ti -1c
.RI "struct \fBgmp_primesieve_t\fP"
.br
.ti -1c
.RI "struct \fBfft_table_nk\fP"
.br
.ti -1c
.RI "struct \fBbases\fP"
.br
.ti -1c
.RI "union \fBieee_double_extract\fP"
.br
.ti -1c
.RI "struct \fBhgcd_matrix1\fP"
.br
.ti -1c
.RI "struct \fBhgcd_matrix\fP"
.br
.ti -1c
.RI "struct \fBgcdext_ctx\fP"
.br
.ti -1c
.RI "struct \fBpowers\fP"
.br
.ti -1c
.RI "struct \fBdoprnt_params_t\fP"
.br
.ti -1c
.RI "struct \fBgmp_doscan_funs_t\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBDECL_add_n\fP(\fBname\fP)   \fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBname\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP)"
.br
.ti -1c
.RI "#define \fBDECL_addlsh1_n\fP(\fBname\fP)   \fBDECL_add_n\fP (\fBname\fP)"
.br
.ti -1c
.RI "#define \fBDECL_addlsh2_n\fP(\fBname\fP)   \fBDECL_add_n\fP (\fBname\fP)"
.br
.ti -1c
.RI "#define \fBDECL_addmul_1\fP(\fBname\fP)   \fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBname\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"
.br
.ti -1c
.RI "#define \fBDECL_addmul_2\fP(\fBname\fP)   \fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBname\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP)"
.br
.ti -1c
.RI "#define \fBDECL_bdiv_dbm1c\fP(\fBname\fP)   \fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBname\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP, \fBmp_limb_t\fP)"
.br
.ti -1c
.RI "#define \fBDECL_cnd_add_n\fP(\fBname\fP)   \fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBname\fP (\fBmp_limb_t\fP, \fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP)"
.br
.ti -1c
.RI "#define \fBDECL_cnd_sub_n\fP(\fBname\fP)   \fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBname\fP (\fBmp_limb_t\fP, \fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP)"
.br
.ti -1c
.RI "#define \fBDECL_com\fP(\fBname\fP)   \fB__GMP_DECLSPEC\fP void \fBname\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP)"
.br
.ti -1c
.RI "#define \fBDECL_copyd\fP(\fBname\fP)   \fB__GMP_DECLSPEC\fP void \fBname\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP)"
.br
.ti -1c
.RI "#define \fBDECL_copyi\fP(\fBname\fP)   \fBDECL_copyd\fP (\fBname\fP)"
.br
.ti -1c
.RI "#define \fBDECL_divexact_1\fP(\fBname\fP)   \fB__GMP_DECLSPEC\fP void \fBname\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"
.br
.ti -1c
.RI "#define \fBDECL_divexact_by3c\fP(\fBname\fP)   \fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBname\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"
.br
.ti -1c
.RI "#define \fBDECL_divrem_1\fP(\fBname\fP)   \fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBname\fP (\fBmp_ptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"
.br
.ti -1c
.RI "#define \fBDECL_gcd_1\fP(\fBname\fP)   \fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBname\fP (\fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"
.br
.ti -1c
.RI "#define \fBDECL_lshift\fP(\fBname\fP)   \fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBname\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, unsigned)"
.br
.ti -1c
.RI "#define \fBDECL_lshiftc\fP(\fBname\fP)   \fBDECL_lshift\fP (\fBname\fP)"
.br
.ti -1c
.RI "#define \fBDECL_mod_1\fP(\fBname\fP)   \fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBname\fP (\fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"
.br
.ti -1c
.RI "#define \fBDECL_mod_1_1p\fP(\fBname\fP)   \fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBname\fP (\fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP, \fBconst\fP \fBmp_limb_t\fP [])"
.br
.ti -1c
.RI "#define \fBDECL_mod_1_1p_cps\fP(\fBname\fP)   \fB__GMP_DECLSPEC\fP void \fBname\fP (\fBmp_limb_t\fP cps[], \fBmp_limb_t\fP \fBb\fP)"
.br
.ti -1c
.RI "#define \fBDECL_mod_1s_2p\fP(\fBname\fP)   \fBDECL_mod_1_1p\fP (\fBname\fP)"
.br
.ti -1c
.RI "#define \fBDECL_mod_1s_2p_cps\fP(\fBname\fP)   \fBDECL_mod_1_1p_cps\fP (\fBname\fP)"
.br
.ti -1c
.RI "#define \fBDECL_mod_1s_4p\fP(\fBname\fP)   \fBDECL_mod_1_1p\fP (\fBname\fP)"
.br
.ti -1c
.RI "#define \fBDECL_mod_1s_4p_cps\fP(\fBname\fP)   \fBDECL_mod_1_1p_cps\fP (\fBname\fP)"
.br
.ti -1c
.RI "#define \fBDECL_mod_34lsub1\fP(\fBname\fP)   \fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBname\fP (\fBmp_srcptr\fP, \fBmp_size_t\fP)"
.br
.ti -1c
.RI "#define \fBDECL_modexact_1c_odd\fP(\fBname\fP)   \fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBname\fP (\fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP, \fBmp_limb_t\fP)"
.br
.ti -1c
.RI "#define \fBDECL_mul_1\fP(\fBname\fP)   \fBDECL_addmul_1\fP (\fBname\fP)"
.br
.ti -1c
.RI "#define \fBDECL_mul_basecase\fP(\fBname\fP)   \fB__GMP_DECLSPEC\fP void \fBname\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP)"
.br
.ti -1c
.RI "#define \fBDECL_mullo_basecase\fP(\fBname\fP)   \fB__GMP_DECLSPEC\fP void \fBname\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP)"
.br
.ti -1c
.RI "#define \fBDECL_preinv_divrem_1\fP(\fBname\fP)   \fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBname\fP (\fBmp_ptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP, \fBmp_limb_t\fP, int)"
.br
.ti -1c
.RI "#define \fBDECL_preinv_mod_1\fP(\fBname\fP)   \fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBname\fP (\fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP, \fBmp_limb_t\fP)"
.br
.ti -1c
.RI "#define \fBDECL_redc_1\fP(\fBname\fP)   \fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBname\fP (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"
.br
.ti -1c
.RI "#define \fBDECL_redc_2\fP(\fBname\fP)   \fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBname\fP (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP)"
.br
.ti -1c
.RI "#define \fBDECL_rshift\fP(\fBname\fP)   \fBDECL_lshift\fP (\fBname\fP)"
.br
.ti -1c
.RI "#define \fBDECL_sqr_basecase\fP(\fBname\fP)   \fB__GMP_DECLSPEC\fP void \fBname\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP)"
.br
.ti -1c
.RI "#define \fBDECL_sub_n\fP(\fBname\fP)   \fBDECL_add_n\fP (\fBname\fP)"
.br
.ti -1c
.RI "#define \fBDECL_sublsh1_n\fP(\fBname\fP)   \fBDECL_add_n\fP (\fBname\fP)"
.br
.ti -1c
.RI "#define \fBDECL_submul_1\fP(\fBname\fP)   \fBDECL_addmul_1\fP (\fBname\fP)"
.br
.ti -1c
.RI "#define \fBWANT_TMP_DEBUG\fP   0"
.br
.ti -1c
.RI "#define \fBGMP_LIMB_BYTES\fP   \fBSIZEOF_MP_LIMB_T\fP"
.br
.ti -1c
.RI "#define \fBGMP_LIMB_BITS\fP   (8 * \fBSIZEOF_MP_LIMB_T\fP)"
.br
.ti -1c
.RI "#define \fBBITS_PER_ULONG\fP   (8 * \fBSIZEOF_UNSIGNED_LONG\fP)"
.br
.ti -1c
.RI "#define \fBATTRIBUTE_CONST\fP   \fB__attribute__\fP ((\fBconst\fP))"
.br
.ti -1c
.RI "#define \fBATTRIBUTE_NORETURN\fP   \fB__attribute__\fP ((noreturn))"
.br
.ti -1c
.RI "#define \fBATTRIBUTE_MALLOC\fP   \fB__attribute__\fP ((\fBmalloc\fP))"
.br
.ti -1c
.RI "#define \fBva_copy\fP(dst,  src)   do { memcpy (&(dst), &(src), sizeof (va_list)); } while (0)"
.br
.ti -1c
.RI "#define \fB__TMP_ALIGN\fP   sizeof (union \fBtmp_align_t\fP)"
.br
.ti -1c
.RI "#define \fBROUND_UP_MULTIPLE\fP(\fBa\fP,  \fBm\fP)"
.br
.ti -1c
.RI "#define \fBTMP_SDECL\fP"
.br
.ti -1c
.RI "#define \fBTMP_DECL\fP   struct \fBtmp_reentrant_t\fP *__tmp_marker"
.br
.ti -1c
.RI "#define \fBTMP_SMARK\fP"
.br
.ti -1c
.RI "#define \fBTMP_MARK\fP   __tmp_marker = 0"
.br
.ti -1c
.RI "#define \fBTMP_SALLOC\fP(\fBn\fP)   alloca(\fBn\fP)"
.br
.ti -1c
.RI "#define \fBTMP_BALLOC\fP(\fBn\fP)   \fB__gmp_tmp_reentrant_alloc\fP (&__tmp_marker, \fBn\fP)"
.br
.ti -1c
.RI "#define \fBTMP_ALLOC\fP(\fBn\fP)   (\fBLIKELY\fP ((\fBn\fP) <= 0x7f00) ? \fBTMP_SALLOC\fP(\fBn\fP) : \fBTMP_BALLOC\fP(\fBn\fP))"
.br
.ti -1c
.RI "#define \fBTMP_SFREE\fP"
.br
.ti -1c
.RI "#define \fBTMP_FREE\fP"
.br
.ti -1c
.RI "#define \fBTMP_ALLOC_TYPE\fP(\fBn\fP,  type)   ((type *) \fBTMP_ALLOC\fP ((\fBn\fP) * sizeof (type)))"
.br
.ti -1c
.RI "#define \fBTMP_SALLOC_TYPE\fP(\fBn\fP,  type)   ((type *) \fBTMP_SALLOC\fP ((\fBn\fP) * sizeof (type)))"
.br
.ti -1c
.RI "#define \fBTMP_BALLOC_TYPE\fP(\fBn\fP,  type)   ((type *) \fBTMP_BALLOC\fP ((\fBn\fP) * sizeof (type)))"
.br
.ti -1c
.RI "#define \fBTMP_ALLOC_LIMBS\fP(\fBn\fP)   \fBTMP_ALLOC_TYPE\fP(\fBn\fP,\fBmp_limb_t\fP)"
.br
.ti -1c
.RI "#define \fBTMP_SALLOC_LIMBS\fP(\fBn\fP)   \fBTMP_SALLOC_TYPE\fP(\fBn\fP,\fBmp_limb_t\fP)"
.br
.ti -1c
.RI "#define \fBTMP_BALLOC_LIMBS\fP(\fBn\fP)   \fBTMP_BALLOC_TYPE\fP(\fBn\fP,\fBmp_limb_t\fP)"
.br
.ti -1c
.RI "#define \fBTMP_ALLOC_MP_PTRS\fP(\fBn\fP)   \fBTMP_ALLOC_TYPE\fP(\fBn\fP,\fBmp_ptr\fP)"
.br
.ti -1c
.RI "#define \fBTMP_SALLOC_MP_PTRS\fP(\fBn\fP)   \fBTMP_SALLOC_TYPE\fP(\fBn\fP,\fBmp_ptr\fP)"
.br
.ti -1c
.RI "#define \fBTMP_BALLOC_MP_PTRS\fP(\fBn\fP)   \fBTMP_BALLOC_TYPE\fP(\fBn\fP,\fBmp_ptr\fP)"
.br
.ti -1c
.RI "#define \fBTMP_ALLOC_LIMBS_2\fP(xp,  xsize,  yp,  ysize)"
.br
.ti -1c
.RI "#define \fBTMP_ALLOC_LIMBS_3\fP(xp,  xsize,  yp,  ysize,  zp,  zsize)"
.br
.ti -1c
.RI "#define \fBCRAY_Pragma\fP(\fBstr\fP)   \fB__GMP_CRAY_Pragma\fP(\fBstr\fP)"
.br
.ti -1c
.RI "#define \fBMPN_CMP\fP(result,  xp,  yp,  \fBsize\fP)   \fB__GMPN_CMP\fP(result, xp, yp, \fBsize\fP)"
.br
.ti -1c
.RI "#define \fBLIKELY\fP(cond)   \fB__GMP_LIKELY\fP(cond)"
.br
.ti -1c
.RI "#define \fBUNLIKELY\fP(cond)   \fB__GMP_UNLIKELY\fP(cond)"
.br
.ti -1c
.RI "#define \fBABS\fP(\fBx\fP)   ((\fBx\fP) >= 0 ? (\fBx\fP) : \-(\fBx\fP))"
.br
.ti -1c
.RI "#define \fBNEG_CAST\fP(\fBT\fP,  \fBx\fP)   (\- (\fB__GMP_CAST\fP (\fBT\fP, (\fBx\fP) + 1) \- 1))"
.br
.ti -1c
.RI "#define \fBABS_CAST\fP(\fBT\fP,  \fBx\fP)   ((\fBx\fP) >= 0 ? \fB__GMP_CAST\fP (\fBT\fP, \fBx\fP) : \fBNEG_CAST\fP (\fBT\fP,\fBx\fP))"
.br
.ti -1c
.RI "#define \fBMIN\fP(l,  o)   ((l) < (o) ? (l) : (o))"
.br
.ti -1c
.RI "#define \fBMAX\fP(h,  \fBi\fP)   ((h) > (\fBi\fP) ? (h) : (\fBi\fP))"
.br
.ti -1c
.RI "#define \fBnumberof\fP(\fBx\fP)   (sizeof (\fBx\fP) / sizeof ((\fBx\fP)[0]))"
.br
.ti -1c
.RI "#define \fBSIZ\fP(\fBx\fP)   ((\fBx\fP)\->_mp_size)"
.br
.ti -1c
.RI "#define \fBABSIZ\fP(\fBx\fP)   \fBABS\fP (\fBSIZ\fP (\fBx\fP))"
.br
.ti -1c
.RI "#define \fBPTR\fP(\fBx\fP)   ((\fBx\fP)\->_mp_d)"
.br
.ti -1c
.RI "#define \fBEXP\fP(\fBx\fP)   ((\fBx\fP)\->_mp_exp)"
.br
.ti -1c
.RI "#define \fBPREC\fP(\fBx\fP)   ((\fBx\fP)\->_mp_prec)"
.br
.ti -1c
.RI "#define \fBALLOC\fP(\fBx\fP)   ((\fBx\fP)\->_mp_alloc)"
.br
.ti -1c
.RI "#define \fBNUM\fP(\fBx\fP)   \fBmpq_numref\fP(\fBx\fP)"
.br
.ti -1c
.RI "#define \fBDEN\fP(\fBx\fP)   \fBmpq_denref\fP(\fBx\fP)"
.br
.ti -1c
.RI "#define \fBPOW2_P\fP(\fBn\fP)   (((\fBn\fP) & ((\fBn\fP) \- 1)) == 0)"
.br
.ti -1c
.RI "#define \fBLOG2C\fP(\fBn\fP)"
.br
.ti -1c
.RI "#define \fBMP_LIMB_T_MAX\fP   (~ (\fBmp_limb_t\fP) 0)"
.br
.ti -1c
.RI "#define \fBULONG_HIGHBIT\fP   (ULONG_MAX ^ ((unsigned long) ULONG_MAX >> 1))"
.br
.ti -1c
.RI "#define \fBUINT_HIGHBIT\fP   (UINT_MAX ^ ((unsigned) UINT_MAX >> 1))"
.br
.ti -1c
.RI "#define \fBUSHRT_HIGHBIT\fP   (USHRT_MAX ^ ((unsigned short) USHRT_MAX >> 1))"
.br
.ti -1c
.RI "#define \fBGMP_LIMB_HIGHBIT\fP   (\fBMP_LIMB_T_MAX\fP ^ (\fBMP_LIMB_T_MAX\fP >> 1))"
.br
.ti -1c
.RI "#define \fBMP_SIZE_T_MAX\fP   LONG_MAX"
.br
.ti -1c
.RI "#define \fBMP_SIZE_T_MIN\fP   LONG_MIN"
.br
.ti -1c
.RI "#define \fBMP_EXP_T_MAX\fP   \fBMP_SIZE_T_MAX\fP"
.br
.ti -1c
.RI "#define \fBMP_EXP_T_MIN\fP   \fBMP_SIZE_T_MIN\fP"
.br
.ti -1c
.RI "#define \fBLONG_HIGHBIT\fP   LONG_MIN"
.br
.ti -1c
.RI "#define \fBINT_HIGHBIT\fP   INT_MIN"
.br
.ti -1c
.RI "#define \fBSHRT_HIGHBIT\fP   SHRT_MIN"
.br
.ti -1c
.RI "#define \fBGMP_NUMB_HIGHBIT\fP   (\fBCNST_LIMB\fP(1) << (\fBGMP_NUMB_BITS\fP\-1))"
.br
.ti -1c
.RI "#define \fBGMP_NAIL_LOWBIT\fP   \fBCNST_LIMB\fP(0)"
.br
.ti -1c
.RI "#define \fBMP_LIMB_T_SWAP\fP(\fBx\fP,  \fBy\fP)"
.br
.ti -1c
.RI "#define \fBMP_SIZE_T_SWAP\fP(\fBx\fP,  \fBy\fP)"
.br
.ti -1c
.RI "#define \fBMP_PTR_SWAP\fP(\fBx\fP,  \fBy\fP)"
.br
.ti -1c
.RI "#define \fBMP_SRCPTR_SWAP\fP(\fBx\fP,  \fBy\fP)"
.br
.ti -1c
.RI "#define \fBMPN_PTR_SWAP\fP(xp,  xs,  yp,  ys)"
.br
.ti -1c
.RI "#define \fBMPN_SRCPTR_SWAP\fP(xp,  xs,  yp,  ys)"
.br
.ti -1c
.RI "#define \fBMPZ_PTR_SWAP\fP(\fBx\fP,  \fBy\fP)"
.br
.ti -1c
.RI "#define \fBMPZ_SRCPTR_SWAP\fP(\fBx\fP,  \fBy\fP)"
.br
.ti -1c
.RI "#define \fBMPQ_PTR_SWAP\fP(\fBx\fP,  \fBy\fP)"
.br
.ti -1c
.RI "#define \fBMPQ_SRCPTR_SWAP\fP(\fBx\fP,  \fBy\fP)"
.br
.ti -1c
.RI "#define \fB__GMP_ALLOCATE_FUNC_TYPE\fP(\fBn\fP,  type)   ((type *) (*\fB__gmp_allocate_func\fP) ((\fBn\fP) * sizeof (type)))"
.br
.ti -1c
.RI "#define \fB__GMP_ALLOCATE_FUNC_LIMBS\fP(\fBn\fP)   \fB__GMP_ALLOCATE_FUNC_TYPE\fP (\fBn\fP, \fBmp_limb_t\fP)"
.br
.ti -1c
.RI "#define \fB__GMP_REALLOCATE_FUNC_TYPE\fP(\fBp\fP,  old_size,  new_size,  type)"
.br
.ti -1c
.RI "#define \fB__GMP_REALLOCATE_FUNC_LIMBS\fP(\fBp\fP,  old_size,  new_size)   \fB__GMP_REALLOCATE_FUNC_TYPE\fP(\fBp\fP, old_size, new_size, \fBmp_limb_t\fP)"
.br
.ti -1c
.RI "#define \fB__GMP_FREE_FUNC_TYPE\fP(\fBp\fP,  \fBn\fP,  type)   (*\fB__gmp_free_func\fP) (\fBp\fP, (\fBn\fP) * sizeof (type))"
.br
.ti -1c
.RI "#define \fB__GMP_FREE_FUNC_LIMBS\fP(\fBp\fP,  \fBn\fP)   \fB__GMP_FREE_FUNC_TYPE\fP (\fBp\fP, \fBn\fP, \fBmp_limb_t\fP)"
.br
.ti -1c
.RI "#define \fB__GMP_REALLOCATE_FUNC_MAYBE\fP(ptr,  oldsize,  newsize)"
.br
.ti -1c
.RI "#define \fB__GMP_REALLOCATE_FUNC_MAYBE_TYPE\fP(ptr,  oldsize,  newsize,  type)"
.br
.ti -1c
.RI "#define \fB__builtin_constant_p\fP(\fBx\fP)   0"
.br
.ti -1c
.RI "#define \fBUSE_LEADING_REGPARM\fP   0"
.br
.ti -1c
.RI "#define \fBREGPARM_2_1\fP(\fBa\fP,  \fBb\fP,  \fBx\fP)   \fBa\fP,\fBb\fP,\fBx\fP"
.br
.ti -1c
.RI "#define \fBREGPARM_3_1\fP(\fBa\fP,  \fBb\fP,  \fBc\fP,  \fBx\fP)   \fBa\fP,\fBb\fP,\fBc\fP,\fBx\fP"
.br
.ti -1c
.RI "#define \fBREGPARM_ATTR\fP(\fBn\fP)"
.br
.ti -1c
.RI "#define \fBASM_L\fP(\fBname\fP)   \fBLSYM_PREFIX\fP 'asm_%=_' #name"
.br
.ti -1c
.RI "#define \fBmpz_aorsmul_1\fP(w,  \fBu\fP,  v,  \fBsub\fP)   \fB__gmpz_aorsmul_1\fP (\fBREGPARM_3_1\fP (w, \fBu\fP, v, \fBsub\fP))"
.br
.ti -1c
.RI "#define \fBmpz_n_pow_ui\fP   __gmpz_n_pow_ui"
.br
.ti -1c
.RI "#define \fBmpn_addmul_1c\fP   \fB__MPN\fP(addmul_1c)"
.br
.ti -1c
.RI "#define \fBmpn_addmul_2\fP   \fB__MPN\fP(addmul_2)"
.br
.ti -1c
.RI "#define \fBmpn_addmul_3\fP   \fB__MPN\fP(addmul_3)"
.br
.ti -1c
.RI "#define \fBmpn_addmul_4\fP   \fB__MPN\fP(addmul_4)"
.br
.ti -1c
.RI "#define \fBmpn_addmul_5\fP   \fB__MPN\fP(addmul_5)"
.br
.ti -1c
.RI "#define \fBmpn_addmul_6\fP   \fB__MPN\fP(addmul_6)"
.br
.ti -1c
.RI "#define \fBmpn_addmul_7\fP   \fB__MPN\fP(addmul_7)"
.br
.ti -1c
.RI "#define \fBmpn_addmul_8\fP   \fB__MPN\fP(addmul_8)"
.br
.ti -1c
.RI "#define \fBmpn_addmul_2s\fP   \fB__MPN\fP(addmul_2s)"
.br
.ti -1c
.RI "#define \fBmpn_addlsh1_n\fP   \fB__MPN\fP(addlsh1_n)"
.br
.ti -1c
.RI "#define \fBmpn_addlsh1_nc\fP   \fB__MPN\fP(addlsh1_nc)"
.br
.ti -1c
.RI "#define \fBmpn_addlsh1_n_ip1\fP(dst,  src,  \fBn\fP)   \fBmpn_addlsh1_n\fP(dst,dst,src,\fBn\fP)"
.br
.ti -1c
.RI "#define \fBHAVE_NATIVE_mpn_addlsh1_n_ip1\fP   1"
.br
.ti -1c
.RI "#define \fBmpn_addlsh1_nc_ip1\fP(dst,  src,  \fBn\fP,  \fBc\fP)   \fBmpn_addlsh1_nc\fP(dst,dst,src,\fBn\fP,\fBc\fP)"
.br
.ti -1c
.RI "#define \fBHAVE_NATIVE_mpn_addlsh1_nc_ip1\fP   1"
.br
.ti -1c
.RI "#define \fBmpn_addlsh2_n\fP   \fB__MPN\fP(addlsh2_n)"
.br
.ti -1c
.RI "#define \fBmpn_addlsh2_nc\fP   \fB__MPN\fP(addlsh2_nc)"
.br
.ti -1c
.RI "#define \fBmpn_addlsh2_n_ip1\fP(dst,  src,  \fBn\fP)   \fBmpn_addlsh2_n\fP(dst,dst,src,\fBn\fP)"
.br
.ti -1c
.RI "#define \fBHAVE_NATIVE_mpn_addlsh2_n_ip1\fP   1"
.br
.ti -1c
.RI "#define \fBmpn_addlsh2_nc_ip1\fP(dst,  src,  \fBn\fP,  \fBc\fP)   \fBmpn_addlsh2_nc\fP(dst,dst,src,\fBn\fP,\fBc\fP)"
.br
.ti -1c
.RI "#define \fBHAVE_NATIVE_mpn_addlsh2_nc_ip1\fP   1"
.br
.ti -1c
.RI "#define \fBmpn_addlsh_n\fP   \fB__MPN\fP(addlsh_n)"
.br
.ti -1c
.RI "#define \fBmpn_addlsh_nc\fP   \fB__MPN\fP(addlsh_nc)"
.br
.ti -1c
.RI "#define \fBmpn_addlsh_n_ip1\fP(dst,  src,  \fBn\fP,  s)   \fBmpn_addlsh_n\fP(dst,dst,src,\fBn\fP,s)"
.br
.ti -1c
.RI "#define \fBHAVE_NATIVE_mpn_addlsh_n_ip1\fP   1"
.br
.ti -1c
.RI "#define \fBmpn_addlsh_nc_ip1\fP(dst,  src,  \fBn\fP,  s,  \fBc\fP)   \fBmpn_addlsh_nc\fP(dst,dst,src,\fBn\fP,s,\fBc\fP)"
.br
.ti -1c
.RI "#define \fBHAVE_NATIVE_mpn_addlsh_nc_ip1\fP   1"
.br
.ti -1c
.RI "#define \fBmpn_sublsh1_n\fP   \fB__MPN\fP(sublsh1_n)"
.br
.ti -1c
.RI "#define \fBmpn_sublsh1_nc\fP   \fB__MPN\fP(sublsh1_nc)"
.br
.ti -1c
.RI "#define \fBmpn_sublsh1_n_ip1\fP(dst,  src,  \fBn\fP)   \fBmpn_sublsh1_n\fP(dst,dst,src,\fBn\fP)"
.br
.ti -1c
.RI "#define \fBHAVE_NATIVE_mpn_sublsh1_n_ip1\fP   1"
.br
.ti -1c
.RI "#define \fBmpn_sublsh1_nc_ip1\fP   \fB__MPN\fP(sublsh1_nc_ip1)"
.br
.ti -1c
.RI "#define \fBmpn_rsblsh1_n\fP   \fB__MPN\fP(rsblsh1_n)"
.br
.ti -1c
.RI "#define \fBmpn_rsblsh1_nc\fP   \fB__MPN\fP(rsblsh1_nc)"
.br
.ti -1c
.RI "#define \fBmpn_sublsh2_n\fP   \fB__MPN\fP(sublsh2_n)"
.br
.ti -1c
.RI "#define \fBmpn_sublsh2_nc\fP   \fB__MPN\fP(sublsh2_nc)"
.br
.ti -1c
.RI "#define \fBmpn_sublsh2_n_ip1\fP(dst,  src,  \fBn\fP)   \fBmpn_sublsh2_n\fP(dst,dst,src,\fBn\fP)"
.br
.ti -1c
.RI "#define \fBHAVE_NATIVE_mpn_sublsh2_n_ip1\fP   1"
.br
.ti -1c
.RI "#define \fBmpn_sublsh2_nc_ip1\fP   \fB__MPN\fP(sublsh2_nc_ip1)"
.br
.ti -1c
.RI "#define \fBmpn_sublsh_n\fP   \fB__MPN\fP(sublsh_n)"
.br
.ti -1c
.RI "#define \fBmpn_sublsh_n_ip1\fP   \fB__MPN\fP(sublsh_n_ip1)"
.br
.ti -1c
.RI "#define \fBmpn_sublsh_nc_ip1\fP   \fB__MPN\fP(sublsh_nc_ip1)"
.br
.ti -1c
.RI "#define \fBmpn_rsblsh2_n\fP   \fB__MPN\fP(rsblsh2_n)"
.br
.ti -1c
.RI "#define \fBmpn_rsblsh2_nc\fP   \fB__MPN\fP(rsblsh2_nc)"
.br
.ti -1c
.RI "#define \fBmpn_rsblsh_n\fP   \fB__MPN\fP(rsblsh_n)"
.br
.ti -1c
.RI "#define \fBmpn_rsblsh_nc\fP   \fB__MPN\fP(rsblsh_nc)"
.br
.ti -1c
.RI "#define \fBmpn_rsh1add_n\fP   \fB__MPN\fP(rsh1add_n)"
.br
.ti -1c
.RI "#define \fBmpn_rsh1add_nc\fP   \fB__MPN\fP(rsh1add_nc)"
.br
.ti -1c
.RI "#define \fBmpn_rsh1sub_n\fP   \fB__MPN\fP(rsh1sub_n)"
.br
.ti -1c
.RI "#define \fBmpn_rsh1sub_nc\fP   \fB__MPN\fP(rsh1sub_nc)"
.br
.ti -1c
.RI "#define \fBmpn_lshiftc\fP   \fB__MPN\fP(lshiftc)"
.br
.ti -1c
.RI "#define \fBmpn_add_err1_n\fP   \fB__MPN\fP(add_err1_n)"
.br
.ti -1c
.RI "#define \fBmpn_add_err2_n\fP   \fB__MPN\fP(add_err2_n)"
.br
.ti -1c
.RI "#define \fBmpn_add_err3_n\fP   \fB__MPN\fP(add_err3_n)"
.br
.ti -1c
.RI "#define \fBmpn_sub_err1_n\fP   \fB__MPN\fP(sub_err1_n)"
.br
.ti -1c
.RI "#define \fBmpn_sub_err2_n\fP   \fB__MPN\fP(sub_err2_n)"
.br
.ti -1c
.RI "#define \fBmpn_sub_err3_n\fP   \fB__MPN\fP(sub_err3_n)"
.br
.ti -1c
.RI "#define \fBmpn_add_n_sub_n\fP   \fB__MPN\fP(add_n_sub_n)"
.br
.ti -1c
.RI "#define \fBmpn_add_n_sub_nc\fP   \fB__MPN\fP(add_n_sub_nc)"
.br
.ti -1c
.RI "#define \fBmpn_addaddmul_1msb0\fP   \fB__MPN\fP(addaddmul_1msb0)"
.br
.ti -1c
.RI "#define \fBmpn_divrem_1c\fP   \fB__MPN\fP(divrem_1c)"
.br
.ti -1c
.RI "#define \fBmpn_dump\fP   \fB__MPN\fP(dump)"
.br
.ti -1c
.RI "#define \fBmpn_fib2_ui\fP   \fB__MPN\fP(fib2_ui)"
.br
.ti -1c
.RI "#define \fB__clz_tab\fP   \fB__MPN\fP(clz_tab)"
.br
.ti -1c
.RI "#define \fBmpn_udiv_w_sdiv\fP   \fB__MPN\fP(udiv_w_sdiv)"
.br
.ti -1c
.RI "#define \fBmpn_jacobi_base\fP   \fB__MPN\fP(jacobi_base)"
.br
.ti -1c
.RI "#define \fBmpn_jacobi_2\fP   \fB__MPN\fP(jacobi_2)"
.br
.ti -1c
.RI "#define \fBmpn_jacobi_n\fP   \fB__MPN\fP(jacobi_n)"
.br
.ti -1c
.RI "#define \fBmpn_mod_1c\fP   \fB__MPN\fP(mod_1c)"
.br
.ti -1c
.RI "#define \fBmpn_mul_1c\fP   \fB__MPN\fP(mul_1c)"
.br
.ti -1c
.RI "#define \fBmpn_mul_2\fP   \fB__MPN\fP(mul_2)"
.br
.ti -1c
.RI "#define \fBmpn_mul_3\fP   \fB__MPN\fP(mul_3)"
.br
.ti -1c
.RI "#define \fBmpn_mul_4\fP   \fB__MPN\fP(mul_4)"
.br
.ti -1c
.RI "#define \fBmpn_mul_5\fP   \fB__MPN\fP(mul_5)"
.br
.ti -1c
.RI "#define \fBmpn_mul_6\fP   \fB__MPN\fP(mul_6)"
.br
.ti -1c
.RI "#define \fBmpn_mul_basecase\fP   \fB__MPN\fP(mul_basecase)"
.br
.ti -1c
.RI "#define \fBmpn_mullo_n\fP   \fB__MPN\fP(mullo_n)"
.br
.ti -1c
.RI "#define \fBmpn_mullo_basecase\fP   \fB__MPN\fP(mullo_basecase)"
.br
.ti -1c
.RI "#define \fBmpn_sqr_basecase\fP   \fB__MPN\fP(sqr_basecase)"
.br
.ti -1c
.RI "#define \fBmpn_sqrlo\fP   \fB__MPN\fP(sqrlo)"
.br
.ti -1c
.RI "#define \fBmpn_sqrlo_basecase\fP   \fB__MPN\fP(sqrlo_basecase)"
.br
.ti -1c
.RI "#define \fBmpn_mulmid_basecase\fP   \fB__MPN\fP(mulmid_basecase)"
.br
.ti -1c
.RI "#define \fBmpn_mulmid_n\fP   \fB__MPN\fP(mulmid_n)"
.br
.ti -1c
.RI "#define \fBmpn_mulmid\fP   \fB__MPN\fP(mulmid)"
.br
.ti -1c
.RI "#define \fBmpn_submul_1c\fP   \fB__MPN\fP(submul_1c)"
.br
.ti -1c
.RI "#define \fBmpn_redc_1\fP   \fB__MPN\fP(redc_1)"
.br
.ti -1c
.RI "#define \fBmpn_redc_2\fP   \fB__MPN\fP(redc_2)"
.br
.ti -1c
.RI "#define \fBmpn_redc_n\fP   \fB__MPN\fP(redc_n)"
.br
.ti -1c
.RI "#define \fBmpn_mod_1_1p_cps\fP   \fB__MPN\fP(mod_1_1p_cps)"
.br
.ti -1c
.RI "#define \fBmpn_mod_1_1p\fP   \fB__MPN\fP(mod_1_1p)"
.br
.ti -1c
.RI "#define \fBmpn_mod_1s_2p_cps\fP   \fB__MPN\fP(mod_1s_2p_cps)"
.br
.ti -1c
.RI "#define \fBmpn_mod_1s_2p\fP   \fB__MPN\fP(mod_1s_2p)"
.br
.ti -1c
.RI "#define \fBmpn_mod_1s_3p_cps\fP   \fB__MPN\fP(mod_1s_3p_cps)"
.br
.ti -1c
.RI "#define \fBmpn_mod_1s_3p\fP   \fB__MPN\fP(mod_1s_3p)"
.br
.ti -1c
.RI "#define \fBmpn_mod_1s_4p_cps\fP   \fB__MPN\fP(mod_1s_4p_cps)"
.br
.ti -1c
.RI "#define \fBmpn_mod_1s_4p\fP   \fB__MPN\fP(mod_1s_4p)"
.br
.ti -1c
.RI "#define \fBmpn_bc_mulmod_bnm1\fP   \fB__MPN\fP(bc_mulmod_bnm1)"
.br
.ti -1c
.RI "#define \fBmpn_mulmod_bnm1\fP   \fB__MPN\fP(mulmod_bnm1)"
.br
.ti -1c
.RI "#define \fBmpn_mulmod_bnm1_next_size\fP   \fB__MPN\fP(mulmod_bnm1_next_size)"
.br
.ti -1c
.RI "#define \fBmpn_sqrmod_bnm1\fP   \fB__MPN\fP(sqrmod_bnm1)"
.br
.ti -1c
.RI "#define \fBmpn_sqrmod_bnm1_next_size\fP   \fB__MPN\fP(sqrmod_bnm1_next_size)"
.br
.ti -1c
.RI "#define \fBRNG_FNPTR\fP(rstate)   ((rstate)\->_mp_algdata\&._mp_lc)"
.br
.ti -1c
.RI "#define \fBRNG_STATE\fP(rstate)   ((rstate)\->_mp_seed\->_mp_d)"
.br
.ti -1c
.RI "#define \fB_gmp_rand\fP(\fBrp\fP,  state,  bits)"
.br
.ti -1c
.RI "#define \fBRANDS\fP"
.br
.ti -1c
.RI "#define \fBRANDS_CLEAR\fP()"
.br
.ti -1c
.RI "#define \fBABOVE_THRESHOLD\fP(\fBsize\fP,  thresh)"
.br
.ti -1c
.RI "#define \fBBELOW_THRESHOLD\fP(\fBsize\fP,  thresh)   (! \fBABOVE_THRESHOLD\fP (\fBsize\fP, thresh))"
.br
.ti -1c
.RI "#define \fBMPN_TOOM22_MUL_MINSIZE\fP   6"
.br
.ti -1c
.RI "#define \fBMPN_TOOM2_SQR_MINSIZE\fP   4"
.br
.ti -1c
.RI "#define \fBMPN_TOOM33_MUL_MINSIZE\fP   17"
.br
.ti -1c
.RI "#define \fBMPN_TOOM3_SQR_MINSIZE\fP   17"
.br
.ti -1c
.RI "#define \fBMPN_TOOM44_MUL_MINSIZE\fP   30"
.br
.ti -1c
.RI "#define \fBMPN_TOOM4_SQR_MINSIZE\fP   30"
.br
.ti -1c
.RI "#define \fBMPN_TOOM6H_MUL_MINSIZE\fP   46"
.br
.ti -1c
.RI "#define \fBMPN_TOOM6_SQR_MINSIZE\fP   46"
.br
.ti -1c
.RI "#define \fBMPN_TOOM8H_MUL_MINSIZE\fP   86"
.br
.ti -1c
.RI "#define \fBMPN_TOOM8_SQR_MINSIZE\fP   86"
.br
.ti -1c
.RI "#define \fBMPN_TOOM32_MUL_MINSIZE\fP   10"
.br
.ti -1c
.RI "#define \fBMPN_TOOM42_MUL_MINSIZE\fP   10"
.br
.ti -1c
.RI "#define \fBMPN_TOOM43_MUL_MINSIZE\fP   25"
.br
.ti -1c
.RI "#define \fBMPN_TOOM53_MUL_MINSIZE\fP   17"
.br
.ti -1c
.RI "#define \fBMPN_TOOM54_MUL_MINSIZE\fP   31"
.br
.ti -1c
.RI "#define \fBMPN_TOOM63_MUL_MINSIZE\fP   49"
.br
.ti -1c
.RI "#define \fBMPN_TOOM42_MULMID_MINSIZE\fP   4"
.br
.ti -1c
.RI "#define \fBmpn_sqr_diagonal\fP   \fB__MPN\fP(sqr_diagonal)"
.br
.ti -1c
.RI "#define \fBmpn_sqr_diag_addlsh1\fP   \fB__MPN\fP(sqr_diag_addlsh1)"
.br
.ti -1c
.RI "#define \fBmpn_toom_interpolate_5pts\fP   \fB__MPN\fP(toom_interpolate_5pts)"
.br
.ti -1c
.RI "#define \fBmpn_toom_interpolate_6pts\fP   \fB__MPN\fP(toom_interpolate_6pts)"
.br
.ti -1c
.RI "#define \fBmpn_toom_interpolate_7pts\fP   \fB__MPN\fP(toom_interpolate_7pts)"
.br
.ti -1c
.RI "#define \fBmpn_toom_interpolate_8pts\fP   \fB__MPN\fP(toom_interpolate_8pts)"
.br
.ti -1c
.RI "#define \fBmpn_toom_interpolate_12pts\fP   \fB__MPN\fP(toom_interpolate_12pts)"
.br
.ti -1c
.RI "#define \fBmpn_toom_interpolate_16pts\fP   \fB__MPN\fP(toom_interpolate_16pts)"
.br
.ti -1c
.RI "#define \fBmpn_toom_couple_handling\fP   \fB__MPN\fP(toom_couple_handling)"
.br
.ti -1c
.RI "#define \fBmpn_toom_eval_dgr3_pm1\fP   \fB__MPN\fP(toom_eval_dgr3_pm1)"
.br
.ti -1c
.RI "#define \fBmpn_toom_eval_dgr3_pm2\fP   \fB__MPN\fP(toom_eval_dgr3_pm2)"
.br
.ti -1c
.RI "#define \fBmpn_toom_eval_pm1\fP   \fB__MPN\fP(toom_eval_pm1)"
.br
.ti -1c
.RI "#define \fBmpn_toom_eval_pm2\fP   \fB__MPN\fP(toom_eval_pm2)"
.br
.ti -1c
.RI "#define \fBmpn_toom_eval_pm2exp\fP   \fB__MPN\fP(toom_eval_pm2exp)"
.br
.ti -1c
.RI "#define \fBmpn_toom_eval_pm2rexp\fP   \fB__MPN\fP(toom_eval_pm2rexp)"
.br
.ti -1c
.RI "#define \fBmpn_toom22_mul\fP   \fB__MPN\fP(toom22_mul)"
.br
.ti -1c
.RI "#define \fBmpn_toom32_mul\fP   \fB__MPN\fP(toom32_mul)"
.br
.ti -1c
.RI "#define \fBmpn_toom42_mul\fP   \fB__MPN\fP(toom42_mul)"
.br
.ti -1c
.RI "#define \fBmpn_toom52_mul\fP   \fB__MPN\fP(toom52_mul)"
.br
.ti -1c
.RI "#define \fBmpn_toom62_mul\fP   \fB__MPN\fP(toom62_mul)"
.br
.ti -1c
.RI "#define \fBmpn_toom2_sqr\fP   \fB__MPN\fP(toom2_sqr)"
.br
.ti -1c
.RI "#define \fBmpn_toom33_mul\fP   \fB__MPN\fP(toom33_mul)"
.br
.ti -1c
.RI "#define \fBmpn_toom43_mul\fP   \fB__MPN\fP(toom43_mul)"
.br
.ti -1c
.RI "#define \fBmpn_toom53_mul\fP   \fB__MPN\fP(toom53_mul)"
.br
.ti -1c
.RI "#define \fBmpn_toom54_mul\fP   \fB__MPN\fP(toom54_mul)"
.br
.ti -1c
.RI "#define \fBmpn_toom63_mul\fP   \fB__MPN\fP(toom63_mul)"
.br
.ti -1c
.RI "#define \fBmpn_toom3_sqr\fP   \fB__MPN\fP(toom3_sqr)"
.br
.ti -1c
.RI "#define \fBmpn_toom44_mul\fP   \fB__MPN\fP(toom44_mul)"
.br
.ti -1c
.RI "#define \fBmpn_toom4_sqr\fP   \fB__MPN\fP(toom4_sqr)"
.br
.ti -1c
.RI "#define \fBmpn_toom6h_mul\fP   \fB__MPN\fP(toom6h_mul)"
.br
.ti -1c
.RI "#define \fBmpn_toom6_sqr\fP   \fB__MPN\fP(toom6_sqr)"
.br
.ti -1c
.RI "#define \fBmpn_toom8h_mul\fP   \fB__MPN\fP(toom8h_mul)"
.br
.ti -1c
.RI "#define \fBmpn_toom8_sqr\fP   \fB__MPN\fP(toom8_sqr)"
.br
.ti -1c
.RI "#define \fBmpn_toom42_mulmid\fP   \fB__MPN\fP(toom42_mulmid)"
.br
.ti -1c
.RI "#define \fBmpn_fft_best_k\fP   \fB__MPN\fP(fft_best_k)"
.br
.ti -1c
.RI "#define \fBmpn_mul_fft\fP   \fB__MPN\fP(mul_fft)"
.br
.ti -1c
.RI "#define \fBmpn_mul_fft_full\fP   \fB__MPN\fP(mul_fft_full)"
.br
.ti -1c
.RI "#define \fBmpn_nussbaumer_mul\fP   \fB__MPN\fP(nussbaumer_mul)"
.br
.ti -1c
.RI "#define \fBmpn_fft_next_size\fP   \fB__MPN\fP(fft_next_size)"
.br
.ti -1c
.RI "#define \fBmpn_div_qr_1n_pi1\fP   \fB__MPN\fP(div_qr_1n_pi1)"
.br
.ti -1c
.RI "#define \fBmpn_div_qr_2n_pi1\fP   \fB__MPN\fP(div_qr_2n_pi1)"
.br
.ti -1c
.RI "#define \fBmpn_div_qr_2u_pi1\fP   \fB__MPN\fP(div_qr_2u_pi1)"
.br
.ti -1c
.RI "#define \fBmpn_sbpi1_div_qr\fP   \fB__MPN\fP(sbpi1_div_qr)"
.br
.ti -1c
.RI "#define \fBmpn_sbpi1_div_q\fP   \fB__MPN\fP(sbpi1_div_q)"
.br
.ti -1c
.RI "#define \fBmpn_sbpi1_divappr_q\fP   \fB__MPN\fP(sbpi1_divappr_q)"
.br
.ti -1c
.RI "#define \fBmpn_dcpi1_div_qr\fP   \fB__MPN\fP(dcpi1_div_qr)"
.br
.ti -1c
.RI "#define \fBmpn_dcpi1_div_qr_n\fP   \fB__MPN\fP(dcpi1_div_qr_n)"
.br
.ti -1c
.RI "#define \fBmpn_dcpi1_div_q\fP   \fB__MPN\fP(dcpi1_div_q)"
.br
.ti -1c
.RI "#define \fBmpn_dcpi1_divappr_q\fP   \fB__MPN\fP(dcpi1_divappr_q)"
.br
.ti -1c
.RI "#define \fBmpn_dcpi1_divappr_q_n\fP   \fB__MPN\fP(dcpi1_divappr_q_n)"
.br
.ti -1c
.RI "#define \fBmpn_mu_div_qr\fP   \fB__MPN\fP(mu_div_qr)"
.br
.ti -1c
.RI "#define \fBmpn_mu_div_qr_itch\fP   \fB__MPN\fP(mu_div_qr_itch)"
.br
.ti -1c
.RI "#define \fBmpn_mu_div_qr_choose_in\fP   \fB__MPN\fP(mu_div_qr_choose_in)"
.br
.ti -1c
.RI "#define \fBmpn_preinv_mu_div_qr\fP   \fB__MPN\fP(preinv_mu_div_qr)"
.br
.ti -1c
.RI "#define \fBmpn_preinv_mu_div_qr_itch\fP   \fB__MPN\fP(preinv_mu_div_qr_itch)"
.br
.ti -1c
.RI "#define \fBmpn_mu_divappr_q\fP   \fB__MPN\fP(mu_divappr_q)"
.br
.ti -1c
.RI "#define \fBmpn_mu_divappr_q_itch\fP   \fB__MPN\fP(mu_divappr_q_itch)"
.br
.ti -1c
.RI "#define \fBmpn_mu_divappr_q_choose_in\fP   \fB__MPN\fP(mu_divappr_q_choose_in)"
.br
.ti -1c
.RI "#define \fBmpn_preinv_mu_divappr_q\fP   \fB__MPN\fP(preinv_mu_divappr_q)"
.br
.ti -1c
.RI "#define \fBmpn_mu_div_q\fP   \fB__MPN\fP(mu_div_q)"
.br
.ti -1c
.RI "#define \fBmpn_mu_div_q_itch\fP   \fB__MPN\fP(mu_div_q_itch)"
.br
.ti -1c
.RI "#define \fBmpn_div_q\fP   \fB__MPN\fP(div_q)"
.br
.ti -1c
.RI "#define \fBmpn_invert\fP   \fB__MPN\fP(invert)"
.br
.ti -1c
.RI "#define \fBmpn_invert_itch\fP(\fBn\fP)   \fBmpn_invertappr_itch\fP(\fBn\fP)"
.br
.ti -1c
.RI "#define \fBmpn_ni_invertappr\fP   \fB__MPN\fP(ni_invertappr)"
.br
.ti -1c
.RI "#define \fBmpn_invertappr\fP   \fB__MPN\fP(invertappr)"
.br
.ti -1c
.RI "#define \fBmpn_invertappr_itch\fP(\fBn\fP)   (2 * (\fBn\fP))"
.br
.ti -1c
.RI "#define \fBmpn_binvert\fP   \fB__MPN\fP(binvert)"
.br
.ti -1c
.RI "#define \fBmpn_binvert_itch\fP   \fB__MPN\fP(binvert_itch)"
.br
.ti -1c
.RI "#define \fBmpn_bdiv_q_1\fP   \fB__MPN\fP(bdiv_q_1)"
.br
.ti -1c
.RI "#define \fBmpn_pi1_bdiv_q_1\fP   \fB__MPN\fP(pi1_bdiv_q_1)"
.br
.ti -1c
.RI "#define \fBmpn_sbpi1_bdiv_qr\fP   \fB__MPN\fP(sbpi1_bdiv_qr)"
.br
.ti -1c
.RI "#define \fBmpn_sbpi1_bdiv_q\fP   \fB__MPN\fP(sbpi1_bdiv_q)"
.br
.ti -1c
.RI "#define \fBmpn_dcpi1_bdiv_qr\fP   \fB__MPN\fP(dcpi1_bdiv_qr)"
.br
.ti -1c
.RI "#define \fBmpn_dcpi1_bdiv_qr_n_itch\fP   \fB__MPN\fP(dcpi1_bdiv_qr_n_itch)"
.br
.ti -1c
.RI "#define \fBmpn_dcpi1_bdiv_qr_n\fP   \fB__MPN\fP(dcpi1_bdiv_qr_n)"
.br
.ti -1c
.RI "#define \fBmpn_dcpi1_bdiv_q\fP   \fB__MPN\fP(dcpi1_bdiv_q)"
.br
.ti -1c
.RI "#define \fBmpn_dcpi1_bdiv_q_n\fP   \fB__MPN\fP(dcpi1_bdiv_q_n)"
.br
.ti -1c
.RI "#define \fBmpn_dcpi1_bdiv_q_n_itch\fP   \fB__MPN\fP(dcpi1_bdiv_q_n_itch)"
.br
.ti -1c
.RI "#define \fBmpn_mu_bdiv_qr\fP   \fB__MPN\fP(mu_bdiv_qr)"
.br
.ti -1c
.RI "#define \fBmpn_mu_bdiv_qr_itch\fP   \fB__MPN\fP(mu_bdiv_qr_itch)"
.br
.ti -1c
.RI "#define \fBmpn_mu_bdiv_q\fP   \fB__MPN\fP(mu_bdiv_q)"
.br
.ti -1c
.RI "#define \fBmpn_mu_bdiv_q_itch\fP   \fB__MPN\fP(mu_bdiv_q_itch)"
.br
.ti -1c
.RI "#define \fBmpn_bdiv_qr\fP   \fB__MPN\fP(bdiv_qr)"
.br
.ti -1c
.RI "#define \fBmpn_bdiv_qr_itch\fP   \fB__MPN\fP(bdiv_qr_itch)"
.br
.ti -1c
.RI "#define \fBmpn_bdiv_q\fP   \fB__MPN\fP(bdiv_q)"
.br
.ti -1c
.RI "#define \fBmpn_bdiv_q_itch\fP   \fB__MPN\fP(bdiv_q_itch)"
.br
.ti -1c
.RI "#define \fBmpn_divexact\fP   \fB__MPN\fP(\fBdivexact\fP)"
.br
.ti -1c
.RI "#define \fBmpn_divexact_itch\fP   \fB__MPN\fP(divexact_itch)"
.br
.ti -1c
.RI "#define \fBmpn_bdiv_dbm1c\fP   \fB__MPN\fP(bdiv_dbm1c)"
.br
.ti -1c
.RI "#define \fBmpn_bdiv_dbm1\fP(dst,  src,  \fBsize\fP,  divisor)   \fBmpn_bdiv_dbm1c\fP (dst, src, \fBsize\fP, divisor, \fB__GMP_CAST\fP (\fBmp_limb_t\fP, 0))"
.br
.ti -1c
.RI "#define \fBmpn_powm\fP   \fB__MPN\fP(powm)"
.br
.ti -1c
.RI "#define \fBmpn_powlo\fP   \fB__MPN\fP(powlo)"
.br
.ti -1c
.RI "#define \fBmpn_sec_pi1_div_qr\fP   \fB__MPN\fP(sec_pi1_div_qr)"
.br
.ti -1c
.RI "#define \fBmpn_sec_pi1_div_r\fP   \fB__MPN\fP(sec_pi1_div_r)"
.br
.ti -1c
.RI "#define \fBmpn_addlsh1_n\fP(\fBa\fP,  \fBb\fP,  \fBc\fP,  d)   \fBmpn_addlsh_n\fP(\fBa\fP,\fBb\fP,\fBc\fP,d,1)"
.br
.ti -1c
.RI "#define \fBHAVE_NATIVE_mpn_addlsh1_n\fP   2"
.br
.ti -1c
.RI "#define \fBmpn_addlsh2_n\fP(\fBa\fP,  \fBb\fP,  \fBc\fP,  d)   \fBmpn_addlsh_n\fP(\fBa\fP,\fBb\fP,\fBc\fP,d,2)"
.br
.ti -1c
.RI "#define \fBHAVE_NATIVE_mpn_addlsh2_n\fP   2"
.br
.ti -1c
.RI "#define \fBmpn_rsblsh1_n\fP(\fBa\fP,  \fBb\fP,  \fBc\fP,  d)   \fBmpn_rsblsh_n\fP(\fBa\fP,\fBb\fP,\fBc\fP,d,1)"
.br
.ti -1c
.RI "#define \fBHAVE_NATIVE_mpn_rsblsh1_n\fP   2"
.br
.ti -1c
.RI "#define \fBmpn_rsblsh2_n\fP(\fBa\fP,  \fBb\fP,  \fBc\fP,  d)   \fBmpn_rsblsh_n\fP(\fBa\fP,\fBb\fP,\fBc\fP,d,2)"
.br
.ti -1c
.RI "#define \fBHAVE_NATIVE_mpn_rsblsh2_n\fP   2"
.br
.ti -1c
.RI "#define \fBDIVEXACT_BY3_METHOD\fP   0	/* default to using \fBmpn_bdiv_dbm1c\fP */"
.br
.ti -1c
.RI "#define \fBmpn_divexact_by3\fP(dst,  src,  \fBsize\fP)   (3 & \fBmpn_bdiv_dbm1\fP (dst, src, \fBsize\fP, \fB__GMP_CAST\fP (\fBmp_limb_t\fP, \fBGMP_NUMB_MASK\fP / 3)))"
.br
.ti -1c
.RI "#define \fBmpn_divexact_by5\fP(dst,  src,  \fBsize\fP)   (7 & 3 * \fBmpn_bdiv_dbm1\fP (dst, src, \fBsize\fP, \fB__GMP_CAST\fP (\fBmp_limb_t\fP, \fBGMP_NUMB_MASK\fP / 5)))"
.br
.ti -1c
.RI "#define \fBmpn_divexact_by7\fP(dst,  src,  \fBsize\fP)   (7 & 1 * \fBmpn_bdiv_dbm1\fP (dst, src, \fBsize\fP, \fB__GMP_CAST\fP (\fBmp_limb_t\fP, \fBGMP_NUMB_MASK\fP / 7)))"
.br
.ti -1c
.RI "#define \fBmpn_divexact_by9\fP(dst,  src,  \fBsize\fP)   (15 & 7 * \fBmpn_bdiv_dbm1\fP (dst, src, \fBsize\fP, \fB__GMP_CAST\fP (\fBmp_limb_t\fP, \fBGMP_NUMB_MASK\fP / 9)))"
.br
.ti -1c
.RI "#define \fBmpn_divexact_by11\fP(dst,  src,  \fBsize\fP)   (15 & 5 * \fBmpn_bdiv_dbm1\fP (dst, src, \fBsize\fP, \fB__GMP_CAST\fP (\fBmp_limb_t\fP, \fBGMP_NUMB_MASK\fP / 11)))"
.br
.ti -1c
.RI "#define \fBmpn_divexact_by13\fP(dst,  src,  \fBsize\fP)   (15 & 3 * \fBmpn_bdiv_dbm1\fP (dst, src, \fBsize\fP, \fB__GMP_CAST\fP (\fBmp_limb_t\fP, \fBGMP_NUMB_MASK\fP / 13)))"
.br
.ti -1c
.RI "#define \fBmpn_divexact_by15\fP(dst,  src,  \fBsize\fP)   (15 & 1 * \fBmpn_bdiv_dbm1\fP (dst, src, \fBsize\fP, \fB__GMP_CAST\fP (\fBmp_limb_t\fP, \fBGMP_NUMB_MASK\fP / 15)))"
.br
.ti -1c
.RI "#define \fBmpz_divexact_gcd\fP   __gmpz_divexact_gcd"
.br
.ti -1c
.RI "#define \fBmpz_prodlimbs\fP   __gmpz_prodlimbs"
.br
.ti -1c
.RI "#define \fBmpz_oddfac_1\fP   __gmpz_oddfac_1"
.br
.ti -1c
.RI "#define \fBmpz_inp_str_nowhite\fP   __gmpz_inp_str_nowhite"
.br
.ti -1c
.RI "#define \fBmpn_divisible_p\fP   \fB__MPN\fP(\fBdivisible_p\fP)"
.br
.ti -1c
.RI "#define \fBmpn_rootrem\fP   \fB__MPN\fP(rootrem)"
.br
.ti -1c
.RI "#define \fBmpn_broot\fP   \fB__MPN\fP(broot)"
.br
.ti -1c
.RI "#define \fBmpn_broot_invm1\fP   \fB__MPN\fP(broot_invm1)"
.br
.ti -1c
.RI "#define \fBmpn_brootinv\fP   \fB__MPN\fP(brootinv)"
.br
.ti -1c
.RI "#define \fBmpn_bsqrt\fP   \fB__MPN\fP(bsqrt)"
.br
.ti -1c
.RI "#define \fBmpn_bsqrtinv\fP   \fB__MPN\fP(bsqrtinv)"
.br
.ti -1c
.RI "#define \fBmpn_copyi\fP   \fB__MPN\fP(copyi)"
.br
.ti -1c
.RI "#define \fBMPN_COPY_INCR\fP(dst,  src,  \fBsize\fP)"
.br
.ti -1c
.RI "#define \fBmpn_copyd\fP   \fB__MPN\fP(copyd)"
.br
.ti -1c
.RI "#define \fBMPN_COPY_DECR\fP(dst,  src,  \fBsize\fP)"
.br
.ti -1c
.RI "#define \fBMPN_COPY\fP(d,  s,  \fBn\fP)"
.br
.ti -1c
.RI "#define \fBMPN_REVERSE\fP(dst,  src,  \fBsize\fP)"
.br
.ti -1c
.RI "#define \fBMPN_FILL\fP(dst,  \fBn\fP,  \fBf\fP)"
.br
.ti -1c
.RI "#define \fBMPN_ZERO\fP(dst,  \fBn\fP)"
.br
.ti -1c
.RI "#define \fBMPN_NORMALIZE\fP(DST,  NLIMBS)"
.br
.ti -1c
.RI "#define \fBMPN_NORMALIZE_NOT_ZERO\fP(DST,  NLIMBS)"
.br
.ti -1c
.RI "#define \fBMPN_STRIP_LOW_ZEROS_NOT_ZERO\fP(ptr,  \fBsize\fP,  low)"
.br
.ti -1c
.RI "#define \fBMPZ_TMP_INIT\fP(\fBX\fP,  NLIMBS)"
.br
.ti -1c
.RI "#define \fB_mpz_newalloc\fP   \fB_mpz_realloc\fP"
.br
.ti -1c
.RI "#define \fBMPZ_REALLOC\fP(\fBz\fP,  \fBn\fP)"
.br
.ti -1c
.RI "#define \fBMPZ_NEWALLOC\fP(\fBz\fP,  \fBn\fP)"
.br
.ti -1c
.RI "#define \fBMPZ_EQUAL_1_P\fP(\fBz\fP)   (\fBSIZ\fP(\fBz\fP)==1 && \fBPTR\fP(\fBz\fP)[0] == 1)"
.br
.ti -1c
.RI "#define \fBMPN_FIB2_SIZE\fP(\fBn\fP)   ((\fBmp_size_t\fP) ((\fBn\fP) / 32 * 23 / \fBGMP_NUMB_BITS\fP) + 4)"
.br
.ti -1c
.RI "#define \fBFIB_TABLE\fP(\fBn\fP)   (\fB__gmp_fib_table\fP[(\fBn\fP)+1])"
.br
.ti -1c
.RI "#define \fBSIEVESIZE\fP   512		/* FIXME: Allow \fBgmp_init_primesieve\fP to choose */"
.br
.ti -1c
.RI "#define \fBgmp_init_primesieve\fP   __gmp_init_primesieve"
.br
.ti -1c
.RI "#define \fBgmp_nextprime\fP   __gmp_nextprime"
.br
.ti -1c
.RI "#define \fBgmp_primesieve\fP   __gmp_primesieve"
.br
.ti -1c
.RI "#define \fBMUL_TOOM22_THRESHOLD\fP   30"
.br
.ti -1c
.RI "#define \fBMUL_TOOM33_THRESHOLD\fP   100"
.br
.ti -1c
.RI "#define \fBMUL_TOOM44_THRESHOLD\fP   300"
.br
.ti -1c
.RI "#define \fBMUL_TOOM6H_THRESHOLD\fP   350"
.br
.ti -1c
.RI "#define \fBSQR_TOOM6_THRESHOLD\fP   \fBMUL_TOOM6H_THRESHOLD\fP"
.br
.ti -1c
.RI "#define \fBMUL_TOOM8H_THRESHOLD\fP   450"
.br
.ti -1c
.RI "#define \fBSQR_TOOM8_THRESHOLD\fP   \fBMUL_TOOM8H_THRESHOLD\fP"
.br
.ti -1c
.RI "#define \fBMUL_TOOM32_TO_TOOM43_THRESHOLD\fP   100"
.br
.ti -1c
.RI "#define \fBMUL_TOOM32_TO_TOOM53_THRESHOLD\fP   110"
.br
.ti -1c
.RI "#define \fBMUL_TOOM42_TO_TOOM53_THRESHOLD\fP   100"
.br
.ti -1c
.RI "#define \fBMUL_TOOM42_TO_TOOM63_THRESHOLD\fP   110"
.br
.ti -1c
.RI "#define \fBMUL_TOOM43_TO_TOOM54_THRESHOLD\fP   150"
.br
.ti -1c
.RI "#define \fBMUL_TOOM22_THRESHOLD_LIMIT\fP   \fBMUL_TOOM22_THRESHOLD\fP"
.br
.ti -1c
.RI "#define \fBMUL_TOOM33_THRESHOLD_LIMIT\fP   \fBMUL_TOOM33_THRESHOLD\fP"
.br
.ti -1c
.RI "#define \fBMULLO_BASECASE_THRESHOLD_LIMIT\fP   \fBMULLO_BASECASE_THRESHOLD\fP"
.br
.ti -1c
.RI "#define \fBSQRLO_BASECASE_THRESHOLD_LIMIT\fP   \fBSQRLO_BASECASE_THRESHOLD\fP"
.br
.ti -1c
.RI "#define \fBSQRLO_DC_THRESHOLD_LIMIT\fP   \fBSQRLO_DC_THRESHOLD\fP"
.br
.ti -1c
.RI "#define \fBSQR_BASECASE_THRESHOLD\fP   0  /* never use \fBmpn_mul_basecase\fP */"
.br
.ti -1c
.RI "#define \fBSQR_TOOM2_THRESHOLD\fP   50"
.br
.ti -1c
.RI "#define \fBSQR_TOOM3_THRESHOLD\fP   120"
.br
.ti -1c
.RI "#define \fBSQR_TOOM4_THRESHOLD\fP   400"
.br
.ti -1c
.RI "#define \fBSQR_TOOM3_THRESHOLD_LIMIT\fP   \fBSQR_TOOM3_THRESHOLD\fP"
.br
.ti -1c
.RI "#define \fBMULMID_TOOM42_THRESHOLD\fP   \fBMUL_TOOM22_THRESHOLD\fP"
.br
.ti -1c
.RI "#define \fBMULLO_BASECASE_THRESHOLD\fP   0  /* never use \fBmpn_mul_basecase\fP */"
.br
.ti -1c
.RI "#define \fBMULLO_DC_THRESHOLD\fP   (2*\fBMUL_TOOM22_THRESHOLD\fP)"
.br
.ti -1c
.RI "#define \fBMULLO_MUL_N_THRESHOLD\fP   (2*\fBMUL_FFT_THRESHOLD\fP)"
.br
.ti -1c
.RI "#define \fBSQRLO_BASECASE_THRESHOLD\fP   0  /* never use \fBmpn_sqr_basecase\fP */"
.br
.ti -1c
.RI "#define \fBSQRLO_DC_THRESHOLD\fP   (\fBMULLO_DC_THRESHOLD\fP)"
.br
.ti -1c
.RI "#define \fBSQRLO_SQR_THRESHOLD\fP   (\fBMULLO_MUL_N_THRESHOLD\fP)"
.br
.ti -1c
.RI "#define \fBDC_DIV_QR_THRESHOLD\fP   (2*\fBMUL_TOOM22_THRESHOLD\fP)"
.br
.ti -1c
.RI "#define \fBDC_DIVAPPR_Q_THRESHOLD\fP   200"
.br
.ti -1c
.RI "#define \fBDC_BDIV_QR_THRESHOLD\fP   (2*\fBMUL_TOOM22_THRESHOLD\fP)"
.br
.ti -1c
.RI "#define \fBDC_BDIV_Q_THRESHOLD\fP   180"
.br
.ti -1c
.RI "#define \fBDIVEXACT_JEB_THRESHOLD\fP   25"
.br
.ti -1c
.RI "#define \fBINV_MULMOD_BNM1_THRESHOLD\fP   (4*\fBMULMOD_BNM1_THRESHOLD\fP)"
.br
.ti -1c
.RI "#define \fBINV_APPR_THRESHOLD\fP   \fBINV_NEWTON_THRESHOLD\fP"
.br
.ti -1c
.RI "#define \fBINV_NEWTON_THRESHOLD\fP   200"
.br
.ti -1c
.RI "#define \fBBINV_NEWTON_THRESHOLD\fP   300"
.br
.ti -1c
.RI "#define \fBMU_DIVAPPR_Q_THRESHOLD\fP   2000"
.br
.ti -1c
.RI "#define \fBMU_DIV_QR_THRESHOLD\fP   2000"
.br
.ti -1c
.RI "#define \fBMUPI_DIV_QR_THRESHOLD\fP   200"
.br
.ti -1c
.RI "#define \fBMU_BDIV_Q_THRESHOLD\fP   2000"
.br
.ti -1c
.RI "#define \fBMU_BDIV_QR_THRESHOLD\fP   2000"
.br
.ti -1c
.RI "#define \fBMULMOD_BNM1_THRESHOLD\fP   16"
.br
.ti -1c
.RI "#define \fBSQRMOD_BNM1_THRESHOLD\fP   16"
.br
.ti -1c
.RI "#define \fBMUL_TO_MULMOD_BNM1_FOR_2NXN_THRESHOLD\fP   (\fBINV_MULMOD_BNM1_THRESHOLD\fP/2)"
.br
.ti -1c
.RI "#define \fBREDC_1_TO_REDC_2_THRESHOLD\fP   15"
.br
.ti -1c
.RI "#define \fBREDC_2_TO_REDC_N_THRESHOLD\fP   100"
.br
.ti -1c
.RI "#define \fBFFT_FIRST_K\fP   4"
.br
.ti -1c
.RI "#define \fBMUL_FFT_MODF_THRESHOLD\fP   (\fBMUL_TOOM33_THRESHOLD\fP * 3)"
.br
.ti -1c
.RI "#define \fBSQR_FFT_MODF_THRESHOLD\fP   (\fBSQR_TOOM3_THRESHOLD\fP * 3)"
.br
.ti -1c
.RI "#define \fBMUL_FFT_THRESHOLD\fP   (\fBMUL_FFT_MODF_THRESHOLD\fP * 10)"
.br
.ti -1c
.RI "#define \fBSQR_FFT_THRESHOLD\fP   (\fBSQR_FFT_MODF_THRESHOLD\fP * 10)"
.br
.ti -1c
.RI "#define \fBMUL_FFT_TABLE\fP"
.br
.ti -1c
.RI "#define \fBSQR_FFT_TABLE\fP"
.br
.ti -1c
.RI "#define \fBFFT_TABLE_ATTRS\fP   static \fBconst\fP"
.br
.ti -1c
.RI "#define \fBMPN_FFT_TABLE_SIZE\fP   16"
.br
.ti -1c
.RI "#define \fBGET_STR_DC_THRESHOLD\fP   18"
.br
.ti -1c
.RI "#define \fBGET_STR_PRECOMPUTE_THRESHOLD\fP   35"
.br
.ti -1c
.RI "#define \fBSET_STR_DC_THRESHOLD\fP   750"
.br
.ti -1c
.RI "#define \fBSET_STR_PRECOMPUTE_THRESHOLD\fP   2000"
.br
.ti -1c
.RI "#define \fBFAC_ODD_THRESHOLD\fP   35"
.br
.ti -1c
.RI "#define \fBFAC_DSC_THRESHOLD\fP   400"
.br
.ti -1c
.RI "#define \fBMPN_OVERLAP_P\fP(xp,  xsize,  yp,  ysize)   ((xp) + (xsize) > (yp) && (yp) + (ysize) > (xp))"
.br
.ti -1c
.RI "#define \fBMEM_OVERLAP_P\fP(xp,  xsize,  yp,  ysize)"
.br
.ti -1c
.RI "#define \fBMPN_SAME_OR_SEPARATE_P\fP(xp,  yp,  \fBsize\fP)   \fBMPN_SAME_OR_SEPARATE2_P\fP(xp, \fBsize\fP, yp, \fBsize\fP)"
.br
.ti -1c
.RI "#define \fBMPN_SAME_OR_SEPARATE2_P\fP(xp,  xsize,  yp,  ysize)   ((xp) == (yp) || ! \fBMPN_OVERLAP_P\fP (xp, xsize, yp, ysize))"
.br
.ti -1c
.RI "#define \fBMPN_SAME_OR_INCR2_P\fP(dst,  dsize,  src,  ssize)   ((dst) <= (src) || ! \fBMPN_OVERLAP_P\fP (dst, dsize, src, ssize))"
.br
.ti -1c
.RI "#define \fBMPN_SAME_OR_INCR_P\fP(dst,  src,  \fBsize\fP)   \fBMPN_SAME_OR_INCR2_P\fP(dst, \fBsize\fP, src, \fBsize\fP)"
.br
.ti -1c
.RI "#define \fBMPN_SAME_OR_DECR2_P\fP(dst,  dsize,  src,  ssize)   ((dst) >= (src) || ! \fBMPN_OVERLAP_P\fP (dst, dsize, src, ssize))"
.br
.ti -1c
.RI "#define \fBMPN_SAME_OR_DECR_P\fP(dst,  src,  \fBsize\fP)   \fBMPN_SAME_OR_DECR2_P\fP(dst, \fBsize\fP, src, \fBsize\fP)"
.br
.ti -1c
.RI "#define \fBASSERT_LINE\fP   \-1"
.br
.ti -1c
.RI "#define \fBASSERT_FILE\fP   ''"
.br
.ti -1c
.RI "#define \fBASSERT_FAIL\fP(expr)   \fB__gmp_assert_fail\fP (\fBASSERT_FILE\fP, \fBASSERT_LINE\fP, #expr)"
.br
.ti -1c
.RI "#define \fBASSERT_ALWAYS\fP(expr)"
.br
.ti -1c
.RI "#define \fBASSERT\fP(expr)   do {} while (0)"
.br
.ti -1c
.RI "#define \fBASSERT_CARRY\fP(expr)   (expr)"
.br
.ti -1c
.RI "#define \fBASSERT_NOCARRY\fP(expr)   (expr)"
.br
.ti -1c
.RI "#define \fBASSERT_CODE\fP(expr)"
.br
.ti -1c
.RI "#define \fBASSERT_MPQ_CANONICAL\fP(q)   do {} while (0)"
.br
.ti -1c
.RI "#define \fBASSERT_ALWAYS_LIMB\fP(limb)"
.br
.ti -1c
.RI "#define \fBASSERT_ALWAYS_MPN\fP(ptr,  \fBsize\fP)"
.br
.ti -1c
.RI "#define \fBASSERT_LIMB\fP(limb)   do {} while (0)"
.br
.ti -1c
.RI "#define \fBASSERT_MPN\fP(ptr,  \fBsize\fP)   do {} while (0)"
.br
.ti -1c
.RI "#define \fBASSERT_MPN_ZERO_P\fP(ptr,  \fBsize\fP)   do {} while (0)"
.br
.ti -1c
.RI "#define \fBASSERT_MPN_NONZERO_P\fP(ptr,  \fBsize\fP)   do {} while (0)"
.br
.ti -1c
.RI "#define \fBMPN_LOGOPS_N_INLINE\fP(\fBrp\fP,  up,  vp,  \fBn\fP,  operation)"
.br
.ti -1c
.RI "#define \fBmpn_trialdiv\fP   \fB__MPN\fP(trialdiv)"
.br
.ti -1c
.RI "#define \fBmpn_remove\fP   \fB__MPN\fP(remove)"
.br
.ti -1c
.RI "#define \fBADDC_LIMB\fP(cout,  w,  \fBx\fP,  \fBy\fP)"
.br
.ti -1c
.RI "#define \fBSUBC_LIMB\fP(cout,  w,  \fBx\fP,  \fBy\fP)"
.br
.ti -1c
.RI "#define \fBmpn_incr_u\fP(\fBp\fP,  incr)"
.br
.ti -1c
.RI "#define \fBmpn_decr_u\fP(\fBp\fP,  incr)"
.br
.ti -1c
.RI "#define \fBMPN_INCR_U\fP(ptr,  \fBsize\fP,  \fBn\fP)   \fBmpn_incr_u\fP (ptr, \fBn\fP)"
.br
.ti -1c
.RI "#define \fBMPN_DECR_U\fP(ptr,  \fBsize\fP,  \fBn\fP)   \fBmpn_decr_u\fP (ptr, \fBn\fP)"
.br
.ti -1c
.RI "#define \fBmp_bases\fP   \fB__MPN\fP(\fBbases\fP)"
.br
.ti -1c
.RI "#define \fBDIGITS_IN_BASE_FROM_BITS\fP(\fBres\fP,  nbits,  \fBb\fP)"
.br
.ti -1c
.RI "#define \fBDIGITS_IN_BASEGT2_FROM_BITS\fP(\fBres\fP,  nbits,  \fBb\fP)"
.br
.ti -1c
.RI "#define \fBMPN_SIZEINBASE\fP(result,  ptr,  \fBsize\fP,  base)"
.br
.ti -1c
.RI "#define \fBMPN_SIZEINBASE_2EXP\fP(result,  ptr,  \fBsize\fP,  base2exp)"
.br
.ti -1c
.RI "#define \fBBITS_TO_LIMBS\fP(\fBn\fP)   (((\fBn\fP) + (\fBGMP_NUMB_BITS\fP \- 1)) / \fBGMP_NUMB_BITS\fP)"
.br
.ti -1c
.RI "#define \fBLIMBS_PER_ULONG\fP   2"
.br
.ti -1c
.RI "#define \fBMPN_SET_UI\fP(zp,  zn,  \fBu\fP)"
.br
.ti -1c
.RI "#define \fBMPZ_FAKE_UI\fP(\fBz\fP,  zp,  \fBu\fP)"
.br
.ti -1c
.RI "#define \fBTARGET_REGISTER_STARVED\fP   0"
.br
.ti -1c
.RI "#define \fBLIMB_HIGHBIT_TO_MASK\fP(\fBn\fP)"
.br
.ti -1c
.RI "#define \fBmpn_invert_limb\fP   \fB__MPN\fP(\fBinvert_limb\fP)"
.br
.ti -1c
.RI "#define \fBinvert_limb\fP(invxl,  xl)"
.br
.ti -1c
.RI "#define \fBinvert_pi1\fP(dinv,  d1,  d0)"
.br
.ti -1c
.RI "#define \fBudiv_qrnnd_preinv\fP(q,  r,  nh,  nl,  d,  di)"
.br
.ti -1c
.RI "#define \fBudiv_rnnd_preinv\fP(r,  nh,  nl,  d,  di)"
.br
.ti -1c
.RI "#define \fBudiv_qr_3by2\fP(q,  \fBr1\fP,  \fBr0\fP,  n2,  n1,  n0,  d1,  d0,  dinv)"
.br
.ti -1c
.RI "#define \fBmpn_preinv_divrem_1\fP   \fB__MPN\fP(preinv_divrem_1)"
.br
.ti -1c
.RI "#define \fBUSE_PREINV_DIVREM_1\fP   1"
.br
.ti -1c
.RI "#define \fBMPN_DIVREM_OR_PREINV_DIVREM_1\fP(qp,  xsize,  ap,  \fBsize\fP,  d,  dinv,  shift)   \fBmpn_preinv_divrem_1\fP (qp, xsize, ap, \fBsize\fP, d, dinv, shift)"
.br
.ti -1c
.RI "#define \fBPREINV_MOD_1_TO_MOD_1_THRESHOLD\fP   10"
.br
.ti -1c
.RI "#define \fBMPN_MOD_OR_PREINV_MOD_1\fP(src,  \fBsize\fP,  divisor,  inverse)"
.br
.ti -1c
.RI "#define \fBmpn_mod_34lsub1\fP   \fB__MPN\fP(mod_34lsub1)"
.br
.ti -1c
.RI "#define \fBDIVEXACT_1_THRESHOLD\fP   0"
.br
.ti -1c
.RI "#define \fBBMOD_1_TO_MOD_1_THRESHOLD\fP   10"
.br
.ti -1c
.RI "#define \fBMPN_DIVREM_OR_DIVEXACT_1\fP(\fBrp\fP,  up,  \fBn\fP,  d)"
.br
.ti -1c
.RI "#define \fBmpn_modexact_1c_odd\fP   \fB__MPN\fP(modexact_1c_odd)"
.br
.ti -1c
.RI "#define \fBmpn_modexact_1_odd\fP   \fB__MPN\fP(modexact_1_odd)"
.br
.ti -1c
.RI "#define \fBMPN_MOD_OR_MODEXACT_1_ODD\fP(src,  \fBsize\fP,  divisor)"
.br
.ti -1c
.RI "#define \fBbinvert_limb_table\fP   __gmp_binvert_limb_table"
.br
.ti -1c
.RI "#define \fBbinvert_limb\fP(inv,  \fBn\fP)"
.br
.ti -1c
.RI "#define \fBmodlimb_invert\fP   \fBbinvert_limb\fP  /* backward compatibility */"
.br
.ti -1c
.RI "#define \fBMODLIMB_INVERSE_3\fP   (((\fBGMP_NUMB_MAX\fP >> (\fBGMP_NUMB_BITS\fP % 2)) / 3) * 2 + 1)"
.br
.ti -1c
.RI "#define \fBGMP_NUMB_CEIL_MAX_DIV3\fP   (\fBGMP_NUMB_MAX\fP / 3 + 1)"
.br
.ti -1c
.RI "#define \fBGMP_NUMB_CEIL_2MAX_DIV3\fP   ((\fBGMP_NUMB_MAX\fP>>1) / 3 + 1 + \fBGMP_NUMB_HIGHBIT\fP)"
.br
.ti -1c
.RI "#define \fBNEG_MOD\fP(r,  \fBa\fP,  d)"
.br
.ti -1c
.RI "#define \fBLOW_ZEROS_MASK\fP(\fBn\fP)   (((\fBn\fP) & \-(\fBn\fP)) \- 1)"
.br
.ti -1c
.RI "#define \fBULONG_PARITY\fP(\fBp\fP,  \fBn\fP)"
.br
.ti -1c
.RI "#define \fBBSWAP_LIMB\fP(dst,  src)"
.br
.ti -1c
.RI "#define \fBBSWAP_LIMB_FETCH\fP(limb,  src)   \fBBSWAP_LIMB\fP (limb, *(src))"
.br
.ti -1c
.RI "#define \fBBSWAP_LIMB_STORE\fP(dst,  limb)   \fBBSWAP_LIMB\fP (*(dst), limb)"
.br
.ti -1c
.RI "#define \fBMPN_BSWAP\fP(dst,  src,  \fBsize\fP)"
.br
.ti -1c
.RI "#define \fBMPN_BSWAP_REVERSE\fP(dst,  src,  \fBsize\fP)"
.br
.ti -1c
.RI "#define \fBpopc_limb\fP(result,  input)"
.br
.ti -1c
.RI "#define \fBW_TYPE_SIZE\fP   \fBGMP_LIMB_BITS\fP"
.br
.ti -1c
.RI "#define \fB_GMP_IEEE_FLOATS\fP   1"
.br
.ti -1c
.RI "#define \fBMP_BASE_AS_DOUBLE\fP   (4\&.0 * ((\fBmp_limb_t\fP) 1 << (\fBGMP_NUMB_BITS\fP \- 2)))"
.br
.ti -1c
.RI "#define \fBLIMBS_PER_DOUBLE\fP   ((53 + \fBGMP_NUMB_BITS\fP \- 2) / \fBGMP_NUMB_BITS\fP + 1)"
.br
.ti -1c
.RI "#define \fBmpn_get_d\fP   __gmpn_get_d"
.br
.ti -1c
.RI "#define \fBDOUBLE_NAN_INF_ACTION\fP(\fBx\fP,  a_nan,  a_inf)"
.br
.ti -1c
.RI "#define \fBFORCE_DOUBLE\fP(d)   do { } while (0)"
.br
.ti -1c
.RI "#define \fBGMP_ERROR\fP(code)   \fB__gmp_exception\fP (code)"
.br
.ti -1c
.RI "#define \fBDIVIDE_BY_ZERO\fP   \fB__gmp_divide_by_zero\fP ()"
.br
.ti -1c
.RI "#define \fBSQRT_OF_NEGATIVE\fP   \fB__gmp_sqrt_of_negative\fP ()"
.br
.ti -1c
.RI "#define \fBCNST_LIMB\fP(\fBC\fP)   ((\fBmp_limb_t\fP) \fBC\fP##L)"
.br
.ti -1c
.RI "#define \fBPP_FIRST_OMITTED\fP   3"
.br
.ti -1c
.RI "#define \fBJACOBI_S0\fP(\fBa\fP)   (((\fBa\fP) == 1) | ((\fBa\fP) == \-1))"
.br
.ti -1c
.RI "#define \fBJACOBI_U0\fP(\fBa\fP)   ((\fBa\fP) == 1)"
.br
.ti -1c
.RI "#define \fBJACOBI_LS0\fP(alow,  asize)   (((asize) == 1 || (asize) == \-1) && (alow) == 1)"
.br
.ti -1c
.RI "#define \fBJACOBI_Z0\fP(\fBa\fP)   \fBJACOBI_LS0\fP (\fBPTR\fP(\fBa\fP)[0], \fBSIZ\fP(\fBa\fP))"
.br
.ti -1c
.RI "#define \fBJACOBI_0U\fP(\fBb\fP)   ((\fBb\fP) == 1)"
.br
.ti -1c
.RI "#define \fBJACOBI_0S\fP(\fBb\fP)   ((\fBb\fP) == 1 || (\fBb\fP) == \-1)"
.br
.ti -1c
.RI "#define \fBJACOBI_0LS\fP(blow,  \fBbsize\fP)   (((\fBbsize\fP) == 1 || (\fBbsize\fP) == \-1) && (blow) == 1)"
.br
.ti -1c
.RI "#define \fBJACOBI_BIT1_TO_PN\fP(result_bit1)   (1 \- ((int) (result_bit1) & 2))"
.br
.ti -1c
.RI "#define \fBJACOBI_TWO_U_BIT1\fP(\fBb\fP)   ((int) (((\fBb\fP) >> 1) ^ (\fBb\fP)))"
.br
.ti -1c
.RI "#define \fBJACOBI_TWOS_U_BIT1\fP(twos,  \fBb\fP)   ((int) ((twos) << 1) & \fBJACOBI_TWO_U_BIT1\fP (\fBb\fP))"
.br
.ti -1c
.RI "#define \fBJACOBI_TWOS_U\fP(twos,  \fBb\fP)   (\fBJACOBI_BIT1_TO_PN\fP (\fBJACOBI_TWOS_U_BIT1\fP (twos, \fBb\fP)))"
.br
.ti -1c
.RI "#define \fBJACOBI_N1B_BIT1\fP(\fBb\fP)   ((int) (\fBb\fP))"
.br
.ti -1c
.RI "#define \fBJACOBI_ASGN_SU_BIT1\fP(\fBa\fP,  \fBb\fP)   ((((\fBa\fP) < 0) << 1) & \fBJACOBI_N1B_BIT1\fP(\fBb\fP))"
.br
.ti -1c
.RI "#define \fBJACOBI_BSGN_SS_BIT1\fP(\fBa\fP,  \fBb\fP)   ((((\fBa\fP)<0) & ((\fBb\fP)<0)) << 1)"
.br
.ti -1c
.RI "#define \fBJACOBI_BSGN_SZ_BIT1\fP(\fBa\fP,  \fBb\fP)   \fBJACOBI_BSGN_SS_BIT1\fP (\fBa\fP, \fBSIZ\fP(\fBb\fP))"
.br
.ti -1c
.RI "#define \fBJACOBI_BSGN_ZS_BIT1\fP(\fBa\fP,  \fBb\fP)   \fBJACOBI_BSGN_SZ_BIT1\fP (\fBb\fP, \fBa\fP)"
.br
.ti -1c
.RI "#define \fBJACOBI_RECIP_UU_BIT1\fP(\fBa\fP,  \fBb\fP)   ((int) ((\fBa\fP) & (\fBb\fP)))"
.br
.ti -1c
.RI "#define \fBJACOBI_STRIP_LOW_ZEROS\fP(result_bit1,  \fBa\fP,  b_ptr,  b_size,  b_low)"
.br
.ti -1c
.RI "#define \fBJACOBI_MOD_OR_MODEXACT_1_ODD\fP(result_bit1,  a_rem,  a_ptr,  a_size,  \fBb\fP)"
.br
.ti -1c
.RI "#define \fBjacobi_table\fP   __gmp_jacobi_table"
.br
.ti -1c
.RI "#define \fBmpn_matrix22_mul\fP   \fB__MPN\fP(matrix22_mul)"
.br
.ti -1c
.RI "#define \fBmpn_matrix22_mul_strassen\fP   \fB__MPN\fP(matrix22_mul_strassen)"
.br
.ti -1c
.RI "#define \fBmpn_matrix22_mul_itch\fP   \fB__MPN\fP(matrix22_mul_itch)"
.br
.ti -1c
.RI "#define \fBMATRIX22_STRASSEN_THRESHOLD\fP   30"
.br
.ti -1c
.RI "#define \fBMPN_EXTRACT_NUMB\fP(\fBcount\fP,  xh,  xl)"
.br
.ti -1c
.RI "#define \fBmpn_hgcd2\fP   \fB__MPN\fP (hgcd2)"
.br
.ti -1c
.RI "#define \fBmpn_hgcd_mul_matrix1_vector\fP   \fB__MPN\fP (hgcd_mul_matrix1_vector)"
.br
.ti -1c
.RI "#define \fBmpn_matrix22_mul1_inverse_vector\fP   \fB__MPN\fP (matrix22_mul1_inverse_vector)"
.br
.ti -1c
.RI "#define \fBmpn_hgcd2_jacobi\fP   \fB__MPN\fP (hgcd2_jacobi)"
.br
.ti -1c
.RI "#define \fBMPN_HGCD_MATRIX_INIT_ITCH\fP(\fBn\fP)   (4 * ((\fBn\fP+1)/2 + 1))"
.br
.ti -1c
.RI "#define \fBmpn_hgcd_matrix_init\fP   \fB__MPN\fP (hgcd_matrix_init)"
.br
.ti -1c
.RI "#define \fBmpn_hgcd_matrix_update_q\fP   \fB__MPN\fP (hgcd_matrix_update_q)"
.br
.ti -1c
.RI "#define \fBmpn_hgcd_matrix_mul_1\fP   \fB__MPN\fP (hgcd_matrix_mul_1)"
.br
.ti -1c
.RI "#define \fBmpn_hgcd_matrix_mul\fP   \fB__MPN\fP (hgcd_matrix_mul)"
.br
.ti -1c
.RI "#define \fBmpn_hgcd_matrix_adjust\fP   \fB__MPN\fP (hgcd_matrix_adjust)"
.br
.ti -1c
.RI "#define \fBmpn_hgcd_step\fP   \fB__MPN\fP(hgcd_step)"
.br
.ti -1c
.RI "#define \fBmpn_hgcd_reduce\fP   \fB__MPN\fP(hgcd_reduce)"
.br
.ti -1c
.RI "#define \fBmpn_hgcd_reduce_itch\fP   \fB__MPN\fP(hgcd_reduce_itch)"
.br
.ti -1c
.RI "#define \fBmpn_hgcd_itch\fP   \fB__MPN\fP (hgcd_itch)"
.br
.ti -1c
.RI "#define \fBmpn_hgcd\fP   \fB__MPN\fP (hgcd)"
.br
.ti -1c
.RI "#define \fBmpn_hgcd_appr_itch\fP   \fB__MPN\fP (hgcd_appr_itch)"
.br
.ti -1c
.RI "#define \fBmpn_hgcd_appr\fP   \fB__MPN\fP (hgcd_appr)"
.br
.ti -1c
.RI "#define \fBmpn_hgcd_jacobi\fP   \fB__MPN\fP (hgcd_jacobi)"
.br
.ti -1c
.RI "#define \fBMPN_GCD_SUBDIV_STEP_ITCH\fP(\fBn\fP)   (\fBn\fP)"
.br
.ti -1c
.RI "#define \fBmpn_gcd_subdiv_step\fP   \fB__MPN\fP(gcd_subdiv_step)"
.br
.ti -1c
.RI "#define \fBmpn_gcdext_hook\fP   \fB__MPN\fP (gcdext_hook)"
.br
.ti -1c
.RI "#define \fBMPN_GCDEXT_LEHMER_N_ITCH\fP(\fBn\fP)   (4*(\fBn\fP) + 3)"
.br
.ti -1c
.RI "#define \fBmpn_gcdext_lehmer_n\fP   \fB__MPN\fP(gcdext_lehmer_n)"
.br
.ti -1c
.RI "#define \fBMPN_GCDEXT_LEHMER_ITCH\fP(an,  bn)   (5*(an) + 4*(bn) + 8)"
.br
.ti -1c
.RI "#define \fBHGCD_THRESHOLD\fP   400"
.br
.ti -1c
.RI "#define \fBHGCD_APPR_THRESHOLD\fP   400"
.br
.ti -1c
.RI "#define \fBHGCD_REDUCE_THRESHOLD\fP   1000"
.br
.ti -1c
.RI "#define \fBGCD_DC_THRESHOLD\fP   1000"
.br
.ti -1c
.RI "#define \fBGCDEXT_DC_THRESHOLD\fP   600"
.br
.ti -1c
.RI "#define \fBmpn_dc_set_str_powtab_alloc\fP(\fBn\fP)   ((\fBn\fP) + \fBGMP_LIMB_BITS\fP)"
.br
.ti -1c
.RI "#define \fBmpn_dc_set_str_itch\fP(\fBn\fP)   ((\fBn\fP) + \fBGMP_LIMB_BITS\fP)"
.br
.ti -1c
.RI "#define \fBmpn_dc_get_str_powtab_alloc\fP(\fBn\fP)   ((\fBn\fP) + 2 * \fBGMP_LIMB_BITS\fP)"
.br
.ti -1c
.RI "#define \fBmpn_dc_get_str_itch\fP(\fBn\fP)   ((\fBn\fP) + \fBGMP_LIMB_BITS\fP)"
.br
.ti -1c
.RI "#define \fBmpn_dc_set_str\fP   \fB__MPN\fP(dc_set_str)"
.br
.ti -1c
.RI "#define \fBmpn_bc_set_str\fP   \fB__MPN\fP(bc_set_str)"
.br
.ti -1c
.RI "#define \fBmpn_set_str_compute_powtab\fP   \fB__MPN\fP(set_str_compute_powtab)"
.br
.ti -1c
.RI "#define \fB__GMPF_BITS_TO_PREC\fP(\fBn\fP)   ((\fBmp_size_t\fP) ((\fB__GMP_MAX\fP (53, \fBn\fP) + 2 * \fBGMP_NUMB_BITS\fP \- 1) / \fBGMP_NUMB_BITS\fP))"
.br
.ti -1c
.RI "#define \fB__GMPF_PREC_TO_BITS\fP(\fBn\fP)   ((\fBmp_bitcnt_t\fP) (\fBn\fP) * \fBGMP_NUMB_BITS\fP \- \fBGMP_NUMB_BITS\fP)"
.br
.ti -1c
.RI "#define \fBDIGITS_IN_BASE_PER_LIMB\fP(\fBres\fP,  nlimbs,  \fBb\fP)"
.br
.ti -1c
.RI "#define \fBLIMBS_PER_DIGIT_IN_BASE\fP(\fBres\fP,  ndigits,  \fBb\fP)"
.br
.ti -1c
.RI "#define \fBMPF_SIGNIFICANT_DIGITS\fP(\fBn\fP,  base,  prec)"
.br
.ti -1c
.RI "#define \fBGMP_DECIMAL_POINT\fP   (localeconv()\->decimal_point)"
.br
.ti -1c
.RI "#define \fBDOPRNT_CONV_FIXED\fP   1"
.br
.ti -1c
.RI "#define \fBDOPRNT_CONV_SCIENTIFIC\fP   2"
.br
.ti -1c
.RI "#define \fBDOPRNT_CONV_GENERAL\fP   3"
.br
.ti -1c
.RI "#define \fBDOPRNT_JUSTIFY_NONE\fP   0"
.br
.ti -1c
.RI "#define \fBDOPRNT_JUSTIFY_LEFT\fP   1"
.br
.ti -1c
.RI "#define \fBDOPRNT_JUSTIFY_RIGHT\fP   2"
.br
.ti -1c
.RI "#define \fBDOPRNT_JUSTIFY_INTERNAL\fP   3"
.br
.ti -1c
.RI "#define \fBDOPRNT_SHOWBASE_YES\fP   1"
.br
.ti -1c
.RI "#define \fBDOPRNT_SHOWBASE_NO\fP   2"
.br
.ti -1c
.RI "#define \fBDOPRNT_SHOWBASE_NONZERO\fP   3"
.br
.ti -1c
.RI "#define \fBMPZ_CHECK_FORMAT\fP(\fBz\fP)"
.br
.ti -1c
.RI "#define \fBMPQ_CHECK_FORMAT\fP(q)"
.br
.ti -1c
.RI "#define \fBMPF_CHECK_FORMAT\fP(\fBf\fP)"
.br
.ti -1c
.RI "#define \fBCPUVEC_THRESHOLD\fP(field)"
.br
.ti -1c
.RI "#define \fBmpn_add_nc\fP   \fB__MPN\fP(add_nc)"
.br
.ti -1c
.RI "#define \fBmpn_sub_nc\fP   \fB__MPN\fP(sub_nc)"
.br
.ti -1c
.RI "#define \fBmpn_toom22_mul_itch\fP(an,  bn)   (2 * ((an) + \fBGMP_NUMB_BITS\fP))"
.br
.ti -1c
.RI "#define \fBmpn_toom2_sqr_itch\fP(an)   (2 * ((an) + \fBGMP_NUMB_BITS\fP))"
.br
.ti -1c
.RI "#define \fBmpn_toom33_mul_itch\fP(an,  bn)   (3 * (an) + \fBGMP_NUMB_BITS\fP)"
.br
.ti -1c
.RI "#define \fBmpn_toom3_sqr_itch\fP(an)   (3 * (an) + \fBGMP_NUMB_BITS\fP)"
.br
.ti -1c
.RI "#define \fBmpn_toom44_mul_itch\fP(an,  bn)   (3 * (an) + \fBGMP_NUMB_BITS\fP)"
.br
.ti -1c
.RI "#define \fBmpn_toom4_sqr_itch\fP(an)   (3 * (an) + \fBGMP_NUMB_BITS\fP)"
.br
.ti -1c
.RI "#define \fBmpn_toom6_sqr_itch\fP(\fBn\fP)"
.br
.ti -1c
.RI "#define \fBMUL_TOOM6H_MIN\fP"
.br
.ti -1c
.RI "#define \fBmpn_toom6_mul_n_itch\fP(\fBn\fP)"
.br
.ti -1c
.RI "#define \fBmpn_toom8_sqr_itch\fP(\fBn\fP)"
.br
.ti -1c
.RI "#define \fBMUL_TOOM8H_MIN\fP"
.br
.ti -1c
.RI "#define \fBmpn_toom8_mul_n_itch\fP(\fBn\fP)"
.br
.ti -1c
.RI "#define \fBmpn_toom42_mulmid_itch\fP(\fBn\fP)   (3 * (\fBn\fP) + \fBGMP_NUMB_BITS\fP)"
.br
.ti -1c
.RI "#define \fBmpn_fft_mul\fP   \fBmpn_nussbaumer_mul\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef uint_least32_t \fBgmp_uint_least32_t\fP"
.br
.ti -1c
.RI "typedef intptr_t \fBgmp_intptr_t\fP"
.br
.ti -1c
.RI "typedef \fB__gmp_randstate_struct\fP * \fBgmp_randstate_ptr\fP"
.br
.ti -1c
.RI "typedef unsigned int UQItype \fB__attribute__\fP((mode(QI)))"
.br
.ti -1c
.RI "typedef \fBmp_limb_t\fP \fBUWtype\fP"
.br
.ti -1c
.RI "typedef unsigned int \fBUHWtype\fP"
.br
.ti -1c
.RI "typedef void \fBgcd_subdiv_step_hook\fP(void *, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, int)"
.br
.ti -1c
.RI "typedef struct \fBpowers\fP \fBpowers_t\fP"
.br
.ti -1c
.RI "typedef int(* \fBgmp_doscan_scan_t\fP) (void *, \fBconst\fP char *,\&.\&.\&.)"
.br
.ti -1c
.RI "typedef void *(* \fBgmp_doscan_step_t\fP) (void *, int)"
.br
.ti -1c
.RI "typedef int(* \fBgmp_doscan_get_t\fP) (void *)"
.br
.ti -1c
.RI "typedef int(* \fBgmp_doscan_unget_t\fP) (int, void *)"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBtoom6_flags\fP { \fBtoom6_all_pos\fP = 0, \fBtoom6_vm1_neg\fP = 1, \fBtoom6_vm2_neg\fP = 2 }"
.br
.ti -1c
.RI "enum \fBtoom7_flags\fP { \fBtoom7_w1_neg\fP = 1, \fBtoom7_w3_neg\fP = 2 }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void * \fB__gmp_tmp_reentrant_alloc\fP (struct \fBtmp_reentrant_t\fP **, size_t) \fBATTRIBUTE_MALLOC\fP"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fB__gmp_tmp_reentrant_free\fP (struct \fBtmp_reentrant_t\fP *)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void * \fB__gmp_default_allocate\fP (size_t)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void * \fB__gmp_default_reallocate\fP (void *, size_t, size_t)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fB__gmp_default_free\fP (void *, size_t)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fB__gmpz_aorsmul_1\fP (\fBREGPARM_3_1\fP(\fBmpz_ptr\fP, \fBmpz_srcptr\fP, \fBmp_limb_t\fP, \fBmp_size_t\fP)) \fBREGPARM_ATTR\fP(1)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBmpz_n_pow_ui\fP (\fBmpz_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, unsigned long)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_addmul_1c\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP, \fBmp_limb_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_addmul_2\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_addmul_3\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_addmul_4\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_addmul_5\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_addmul_6\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_addmul_7\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_addmul_8\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_addmul_2s\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_addlsh1_n\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_addlsh1_nc\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_addlsh2_n\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_addlsh2_nc\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_addlsh_n\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, unsigned int)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_addlsh_nc\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, unsigned int, \fBmp_limb_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_sublsh1_n\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_sublsh1_nc\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_sublsh1_nc_ip1\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_signed_t\fP \fBmpn_rsblsh1_n\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_signed_t\fP \fBmpn_rsblsh1_nc\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_sublsh2_n\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_sublsh2_nc\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_sublsh2_nc_ip1\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_sublsh_n\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, unsigned int)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_sublsh_n_ip1\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, unsigned int)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_sublsh_nc_ip1\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, unsigned int, \fBmp_limb_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_signed_t\fP \fBmpn_rsblsh2_n\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_signed_t\fP \fBmpn_rsblsh2_nc\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_signed_t\fP \fBmpn_rsblsh_n\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, unsigned int)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_signed_t\fP \fBmpn_rsblsh_nc\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, unsigned int, \fBmp_limb_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_rsh1add_n\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_rsh1add_nc\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_rsh1sub_n\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_rsh1sub_nc\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_lshiftc\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, unsigned int)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_add_err1_n\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_add_err2_n\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_add_err3_n\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_sub_err1_n\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_sub_err2_n\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_sub_err3_n\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_add_n_sub_n\fP (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_add_n_sub_nc\fP (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_addaddmul_1msb0\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP, \fBmp_limb_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_divrem_1c\fP (\fBmp_ptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP, \fBmp_limb_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBmpn_dump\fP (\fBmp_srcptr\fP, \fBmp_size_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_size_t\fP \fBmpn_fib2_ui\fP (\fBmp_ptr\fP, \fBmp_ptr\fP, unsigned long)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP int \fBmpn_jacobi_base\fP (\fBmp_limb_t\fP, \fBmp_limb_t\fP, int) \fBATTRIBUTE_CONST\fP"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP int \fBmpn_jacobi_2\fP (\fBmp_srcptr\fP, \fBmp_srcptr\fP, unsigned)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP int \fBmpn_jacobi_n\fP (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_size_t\fP, unsigned)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_mod_1c\fP (\fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP, \fBmp_limb_t\fP) \fB__GMP_ATTRIBUTE_PURE\fP"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_mul_1c\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP, \fBmp_limb_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_mul_2\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_mul_3\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_mul_4\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_mul_5\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_mul_6\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBmpn_mul_basecase\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBmpn_mullo_n\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBmpn_mullo_basecase\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBmpn_sqr_basecase\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBmpn_sqrlo\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBmpn_sqrlo_basecase\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBmpn_mulmid_basecase\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBmpn_mulmid_n\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBmpn_mulmid\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_submul_1c\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP, \fBmp_limb_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_redc_1\fP (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_redc_2\fP (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBmpn_redc_n\fP (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBmpn_mod_1_1p_cps\fP (\fBmp_limb_t\fP[4], \fBmp_limb_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_mod_1_1p\fP (\fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP, \fBconst\fP \fBmp_limb_t\fP[4]) \fB__GMP_ATTRIBUTE_PURE\fP"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBmpn_mod_1s_2p_cps\fP (\fBmp_limb_t\fP[5], \fBmp_limb_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_mod_1s_2p\fP (\fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP, \fBconst\fP \fBmp_limb_t\fP[5]) \fB__GMP_ATTRIBUTE_PURE\fP"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBmpn_mod_1s_3p_cps\fP (\fBmp_limb_t\fP[6], \fBmp_limb_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_mod_1s_3p\fP (\fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP, \fBconst\fP \fBmp_limb_t\fP[6]) \fB__GMP_ATTRIBUTE_PURE\fP"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBmpn_mod_1s_4p_cps\fP (\fBmp_limb_t\fP[7], \fBmp_limb_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_mod_1s_4p\fP (\fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP, \fBconst\fP \fBmp_limb_t\fP[7]) \fB__GMP_ATTRIBUTE_PURE\fP"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBmpn_bc_mulmod_bnm1\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBmpn_mulmod_bnm1\fP (\fBmp_ptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_size_t\fP \fBmpn_mulmod_bnm1_next_size\fP (\fBmp_size_t\fP) \fBATTRIBUTE_CONST\fP"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBmpn_sqrmod_bnm1\fP (\fBmp_ptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_size_t\fP \fBmpn_sqrmod_bnm1_next_size\fP (\fBmp_size_t\fP) \fBATTRIBUTE_CONST\fP"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fB__gmp_randinit_mt_noseed\fP (\fBgmp_randstate_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBmpn_sqr_diagonal\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBmpn_sqr_diag_addlsh1\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBmpn_toom_interpolate_5pts\fP (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_size_t\fP, \fBmp_size_t\fP, int, \fBmp_limb_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBmpn_toom_interpolate_6pts\fP (\fBmp_ptr\fP, \fBmp_size_t\fP, enum \fBtoom6_flags\fP, \fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_size_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBmpn_toom_interpolate_7pts\fP (\fBmp_ptr\fP, \fBmp_size_t\fP, enum \fBtoom7_flags\fP, \fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBmpn_toom_interpolate_8pts\fP (\fBmp_ptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBmpn_toom_interpolate_12pts\fP (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_size_t\fP, \fBmp_size_t\fP, int, \fBmp_ptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBmpn_toom_interpolate_16pts\fP (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_size_t\fP, \fBmp_size_t\fP, int, \fBmp_ptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBmpn_toom_couple_handling\fP (\fBmp_ptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP, int, \fBmp_size_t\fP, int, int)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP int \fBmpn_toom_eval_dgr3_pm1\fP (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP int \fBmpn_toom_eval_dgr3_pm2\fP (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP int \fBmpn_toom_eval_pm1\fP (\fBmp_ptr\fP, \fBmp_ptr\fP, unsigned, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP int \fBmpn_toom_eval_pm2\fP (\fBmp_ptr\fP, \fBmp_ptr\fP, unsigned, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP int \fBmpn_toom_eval_pm2exp\fP (\fBmp_ptr\fP, \fBmp_ptr\fP, unsigned, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_size_t\fP, unsigned, \fBmp_ptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP int \fBmpn_toom_eval_pm2rexp\fP (\fBmp_ptr\fP, \fBmp_ptr\fP, unsigned, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_size_t\fP, unsigned, \fBmp_ptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBmpn_toom22_mul\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBmpn_toom32_mul\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBmpn_toom42_mul\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBmpn_toom52_mul\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBmpn_toom62_mul\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBmpn_toom2_sqr\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBmpn_toom33_mul\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBmpn_toom43_mul\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBmpn_toom53_mul\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBmpn_toom54_mul\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBmpn_toom63_mul\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBmpn_toom3_sqr\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBmpn_toom44_mul\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBmpn_toom4_sqr\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBmpn_toom6h_mul\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBmpn_toom6_sqr\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBmpn_toom8h_mul\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBmpn_toom8_sqr\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBmpn_toom42_mulmid\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP int \fBmpn_fft_best_k\fP (\fBmp_size_t\fP, int) \fBATTRIBUTE_CONST\fP"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_mul_fft\fP (\fBmp_ptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, int)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBmpn_mul_fft_full\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBmpn_nussbaumer_mul\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_size_t\fP \fBmpn_fft_next_size\fP (\fBmp_size_t\fP, int) \fBATTRIBUTE_CONST\fP"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_div_qr_1n_pi1\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP, \fBmp_limb_t\fP, \fBmp_limb_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_div_qr_2n_pi1\fP (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP, \fBmp_limb_t\fP, \fBmp_limb_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_div_qr_2u_pi1\fP (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP, \fBmp_limb_t\fP, int, \fBmp_limb_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_sbpi1_div_qr\fP (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_sbpi1_div_q\fP (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_sbpi1_divappr_q\fP (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_dcpi1_div_qr\fP (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBgmp_pi1_t\fP *)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_dcpi1_div_qr_n\fP (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBgmp_pi1_t\fP *, \fBmp_ptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_dcpi1_div_q\fP (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBgmp_pi1_t\fP *)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_dcpi1_divappr_q\fP (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBgmp_pi1_t\fP *)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_dcpi1_divappr_q_n\fP (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBgmp_pi1_t\fP *, \fBmp_ptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_mu_div_qr\fP (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_size_t\fP \fBmpn_mu_div_qr_itch\fP (\fBmp_size_t\fP, \fBmp_size_t\fP, int) \fBATTRIBUTE_CONST\fP"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_size_t\fP \fBmpn_mu_div_qr_choose_in\fP (\fBmp_size_t\fP, \fBmp_size_t\fP, int)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_preinv_mu_div_qr\fP (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_size_t\fP \fBmpn_preinv_mu_div_qr_itch\fP (\fBmp_size_t\fP, \fBmp_size_t\fP, \fBmp_size_t\fP) \fBATTRIBUTE_CONST\fP"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_mu_divappr_q\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_size_t\fP \fBmpn_mu_divappr_q_itch\fP (\fBmp_size_t\fP, \fBmp_size_t\fP, int) \fBATTRIBUTE_CONST\fP"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_size_t\fP \fBmpn_mu_divappr_q_choose_in\fP (\fBmp_size_t\fP, \fBmp_size_t\fP, int)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_preinv_mu_divappr_q\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_mu_div_q\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_size_t\fP \fBmpn_mu_div_q_itch\fP (\fBmp_size_t\fP, \fBmp_size_t\fP, int) \fBATTRIBUTE_CONST\fP"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBmpn_div_q\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBmpn_invert\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_ni_invertappr\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_invertappr\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBmpn_binvert\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_size_t\fP \fBmpn_binvert_itch\fP (\fBmp_size_t\fP) \fBATTRIBUTE_CONST\fP"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_bdiv_q_1\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_pi1_bdiv_q_1\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP, \fBmp_limb_t\fP, int)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_sbpi1_bdiv_qr\fP (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBmpn_sbpi1_bdiv_q\fP (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_dcpi1_bdiv_qr\fP (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_size_t\fP \fBmpn_dcpi1_bdiv_qr_n_itch\fP (\fBmp_size_t\fP) \fBATTRIBUTE_CONST\fP"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_dcpi1_bdiv_qr_n\fP (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP, \fBmp_ptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBmpn_dcpi1_bdiv_q\fP (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBmpn_dcpi1_bdiv_q_n\fP (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP, \fBmp_ptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_size_t\fP \fBmpn_dcpi1_bdiv_q_n_itch\fP (\fBmp_size_t\fP) \fBATTRIBUTE_CONST\fP"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_mu_bdiv_qr\fP (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_size_t\fP \fBmpn_mu_bdiv_qr_itch\fP (\fBmp_size_t\fP, \fBmp_size_t\fP) \fBATTRIBUTE_CONST\fP"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBmpn_mu_bdiv_q\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_size_t\fP \fBmpn_mu_bdiv_q_itch\fP (\fBmp_size_t\fP, \fBmp_size_t\fP) \fBATTRIBUTE_CONST\fP"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_bdiv_qr\fP (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_size_t\fP \fBmpn_bdiv_qr_itch\fP (\fBmp_size_t\fP, \fBmp_size_t\fP) \fBATTRIBUTE_CONST\fP"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBmpn_bdiv_q\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_size_t\fP \fBmpn_bdiv_q_itch\fP (\fBmp_size_t\fP, \fBmp_size_t\fP) \fBATTRIBUTE_CONST\fP"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBmpn_divexact\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_size_t\fP \fBmpn_divexact_itch\fP (\fBmp_size_t\fP, \fBmp_size_t\fP) \fBATTRIBUTE_CONST\fP"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_bdiv_dbm1c\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP, \fBmp_limb_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBmpn_powm\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBmpn_powlo\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_sec_pi1_div_qr\fP (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP, \fBmp_ptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBmpn_sec_pi1_div_r\fP (\fBmp_ptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP, \fBmp_ptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBmpz_divexact_gcd\fP (\fBmpz_ptr\fP, \fBmpz_srcptr\fP, \fBmpz_srcptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_size_t\fP \fBmpz_prodlimbs\fP (\fBmpz_ptr\fP, \fBmp_ptr\fP, \fBmp_size_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBmpz_oddfac_1\fP (\fBmpz_ptr\fP, \fBmp_limb_t\fP, unsigned)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP int \fBmpn_divisible_p\fP (\fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP) \fB__GMP_ATTRIBUTE_PURE\fP"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_size_t\fP \fBmpn_rootrem\fP (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBmpn_broot\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBmpn_broot_invm1\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBmpn_brootinv\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP, \fBmp_ptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBmpn_bsqrt\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_bitcnt_t\fP, \fBmp_ptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP int \fBmpn_bsqrtinv\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_bitcnt_t\fP, \fBmp_ptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBmpn_copyi\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBmpn_copyd\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBgmp_init_primesieve\fP (\fBgmp_primesieve_t\fP *)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP unsigned long int \fBgmp_nextprime\fP (\fBgmp_primesieve_t\fP *)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBgmp_primesieve\fP (\fBmp_ptr\fP, \fBmp_limb_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fB__gmp_assert_header\fP (\fBconst\fP char *, int)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fB__gmp_assert_fail\fP (\fBconst\fP char *, int, \fBconst\fP char *) \fBATTRIBUTE_NORETURN\fP"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_trialdiv\fP (\fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_size_t\fP, int *)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_bitcnt_t\fP \fBmpn_remove\fP (\fBmp_ptr\fP, \fBmp_size_t\fP *, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_bitcnt_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_invert_limb\fP (\fBmp_limb_t\fP) \fBATTRIBUTE_CONST\fP"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_preinv_divrem_1\fP (\fBmp_ptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP, \fBmp_limb_t\fP, int)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_mod_34lsub1\fP (\fBmp_srcptr\fP, \fBmp_size_t\fP) \fB__GMP_ATTRIBUTE_PURE\fP"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_modexact_1c_odd\fP (\fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP, \fBmp_limb_t\fP) \fB__GMP_ATTRIBUTE_PURE\fP"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_modexact_1_odd\fP (\fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP) \fB__GMP_ATTRIBUTE_PURE\fP"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP int \fB__gmp_extract_double\fP (\fBmp_ptr\fP, double)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP double \fBmpn_get_d\fP (\fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_size_t\fP, long) \fB__GMP_ATTRIBUTE_PURE\fP"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fB__gmp_exception\fP (int) \fBATTRIBUTE_NORETURN\fP"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fB__gmp_divide_by_zero\fP (void) \fBATTRIBUTE_NORETURN\fP"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fB__gmp_sqrt_of_negative\fP (void) \fBATTRIBUTE_NORETURN\fP"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fB__gmp_invalid_operation\fP (void) \fBATTRIBUTE_NORETURN\fP"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBmpn_matrix22_mul\fP (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBmpn_matrix22_mul_strassen\fP (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_size_t\fP \fBmpn_matrix22_mul_itch\fP (\fBmp_size_t\fP, \fBmp_size_t\fP) \fBATTRIBUTE_CONST\fP"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP int \fBmpn_hgcd2\fP (\fBmp_limb_t\fP, \fBmp_limb_t\fP, \fBmp_limb_t\fP, \fBmp_limb_t\fP, struct \fBhgcd_matrix1\fP *)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_size_t\fP \fBmpn_hgcd_mul_matrix1_vector\fP (\fBconst\fP struct \fBhgcd_matrix1\fP *, \fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_ptr\fP, \fBmp_size_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_size_t\fP \fBmpn_matrix22_mul1_inverse_vector\fP (\fBconst\fP struct \fBhgcd_matrix1\fP *, \fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_ptr\fP, \fBmp_size_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP int \fBmpn_hgcd2_jacobi\fP (\fBmp_limb_t\fP, \fBmp_limb_t\fP, \fBmp_limb_t\fP, \fBmp_limb_t\fP, struct \fBhgcd_matrix1\fP *, unsigned *)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBmpn_hgcd_matrix_init\fP (struct \fBhgcd_matrix\fP *, \fBmp_size_t\fP, \fBmp_ptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBmpn_hgcd_matrix_update_q\fP (struct \fBhgcd_matrix\fP *, \fBmp_srcptr\fP, \fBmp_size_t\fP, unsigned, \fBmp_ptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBmpn_hgcd_matrix_mul_1\fP (struct \fBhgcd_matrix\fP *, \fBconst\fP struct \fBhgcd_matrix1\fP *, \fBmp_ptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBmpn_hgcd_matrix_mul\fP (struct \fBhgcd_matrix\fP *, \fBconst\fP struct \fBhgcd_matrix\fP *, \fBmp_ptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_size_t\fP \fBmpn_hgcd_matrix_adjust\fP (\fBconst\fP struct \fBhgcd_matrix\fP *, \fBmp_size_t\fP, \fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_size_t\fP \fBmpn_hgcd_step\fP (\fBmp_size_t\fP, \fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_size_t\fP, struct \fBhgcd_matrix\fP *, \fBmp_ptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_size_t\fP \fBmpn_hgcd_reduce\fP (struct \fBhgcd_matrix\fP *, \fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_size_t\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_size_t\fP \fBmpn_hgcd_reduce_itch\fP (\fBmp_size_t\fP, \fBmp_size_t\fP) \fBATTRIBUTE_CONST\fP"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_size_t\fP \fBmpn_hgcd_itch\fP (\fBmp_size_t\fP) \fBATTRIBUTE_CONST\fP"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_size_t\fP \fBmpn_hgcd\fP (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_size_t\fP, struct \fBhgcd_matrix\fP *, \fBmp_ptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_size_t\fP \fBmpn_hgcd_appr_itch\fP (\fBmp_size_t\fP) \fBATTRIBUTE_CONST\fP"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP int \fBmpn_hgcd_appr\fP (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_size_t\fP, struct \fBhgcd_matrix\fP *, \fBmp_ptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_size_t\fP \fBmpn_hgcd_jacobi\fP (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_size_t\fP, struct \fBhgcd_matrix\fP *, unsigned *, \fBmp_ptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_size_t\fP \fBmpn_gcd_subdiv_step\fP (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_size_t\fP, \fBmp_size_t\fP, \fBgcd_subdiv_step_hook\fP *, void *, \fBmp_ptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_size_t\fP \fBmpn_gcdext_lehmer_n\fP (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_size_t\fP *, \fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_size_t\fP \fBmpn_dc_set_str\fP (\fBmp_ptr\fP, \fBconst\fP unsigned char *, size_t, \fBconst\fP \fBpowers_t\fP *, \fBmp_ptr\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_size_t\fP \fBmpn_bc_set_str\fP (\fBmp_ptr\fP, \fBconst\fP unsigned char *, size_t, int)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fBmpn_set_str_compute_powtab\fP (\fBpowers_t\fP *, \fBmp_ptr\fP, \fBmp_size_t\fP, int)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void \fB__gmpn_cpuvec_init\fP (void)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_add_nc\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBmpn_sub_nc\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "\fBconst\fP typedef \fB__gmp_randstate_struct\fP * \fBgmp_randstate_srcptr\fP"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void *(* \fB__gmp_allocate_func\fP )(size_t)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void *(* \fB__gmp_reallocate_func\fP )(void *, size_t, size_t)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP void(* \fB__gmp_free_func\fP )(void *, size_t)"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP char \fB__gmp_rands_initialized\fP"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBgmp_randstate_t\fP \fB__gmp_rands\fP"
.br
.ti -1c
.RI "\fBconst\fP \fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fB__gmp_fib_table\fP []"
.br
.ti -1c
.RI "\fBconst\fP \fBmp_limb_t\fP \fB__gmp_oddfac_table\fP []"
.br
.ti -1c
.RI "\fBconst\fP \fBmp_limb_t\fP \fB__gmp_odd2fac_table\fP []"
.br
.ti -1c
.RI "\fBconst\fP unsigned char \fB__gmp_fac2cnt_table\fP []"
.br
.ti -1c
.RI "\fBconst\fP \fBmp_limb_t\fP \fB__gmp_limbroots_table\fP []"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBconst\fP struct \fBbases\fP \fBmp_bases\fP [257]"
.br
.ti -1c
.RI "\fBconst\fP \fB__GMP_DECLSPEC\fP unsigned char \fBbinvert_limb_table\fP [128]"
.br
.ti -1c
.RI "\fBconst\fP \fB__GMP_DECLSPEC\fP unsigned char \fB__gmp_digit_value_tab\fP []"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP int \fB__gmp_junk\fP"
.br
.ti -1c
.RI "\fBconst\fP \fB__GMP_DECLSPEC\fP int \fB__gmp_0\fP"
.br
.ti -1c
.RI "\fBconst\fP \fB__GMP_DECLSPEC\fP unsigned char \fBjacobi_table\fP [208]"
.br
.ti -1c
.RI "\fBgcd_subdiv_step_hook\fP \fBmpn_gcdext_hook\fP"
.br
.ti -1c
.RI "\fB__GMP_DECLSPEC\fP \fBmp_size_t\fP \fB__gmp_default_fp_limb_precision\fP"
.br
.ti -1c
.RI "\fBconst\fP struct \fBgmp_doscan_funs_t\fP \fB__gmp_fscanf_funs\fP"
.br
.ti -1c
.RI "\fBconst\fP struct \fBgmp_doscan_funs_t\fP \fB__gmp_sscanf_funs\fP"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define __builtin_constant_p(\fBx\fP)   0"

.SS "#define __clz_tab   \fB__MPN\fP(clz_tab)"

.SS "#define __GMP_ALLOCATE_FUNC_LIMBS(\fBn\fP)   \fB__GMP_ALLOCATE_FUNC_TYPE\fP (\fBn\fP, \fBmp_limb_t\fP)"

.SS "#define __GMP_ALLOCATE_FUNC_TYPE(\fBn\fP, type)   ((type *) (*\fB__gmp_allocate_func\fP) ((\fBn\fP) * sizeof (type)))"

.SS "#define __GMP_FREE_FUNC_LIMBS(\fBp\fP, \fBn\fP)   \fB__GMP_FREE_FUNC_TYPE\fP (\fBp\fP, \fBn\fP, \fBmp_limb_t\fP)"

.SS "#define __GMP_FREE_FUNC_TYPE(\fBp\fP, \fBn\fP, type)   (*\fB__gmp_free_func\fP) (\fBp\fP, (\fBn\fP) * sizeof (type))"

.SS "#define __GMP_REALLOCATE_FUNC_LIMBS(\fBp\fP, old_size, new_size)   \fB__GMP_REALLOCATE_FUNC_TYPE\fP(\fBp\fP, old_size, new_size, \fBmp_limb_t\fP)"

.SS "#define __GMP_REALLOCATE_FUNC_MAYBE(ptr, oldsize, newsize)"
\fBValue:\fP
.PP
.nf
  do {                                 \
    if ((oldsize) != (newsize))                     \
      (ptr) = (*__gmp_reallocate_func) (ptr, oldsize, newsize);     \
  } while (0)
.fi
.SS "#define __GMP_REALLOCATE_FUNC_MAYBE_TYPE(ptr, oldsize, newsize, type)"
\fBValue:\fP
.PP
.nf
  do {                                 \
    if ((oldsize) != (newsize))                     \
      (ptr) = (type *) (*__gmp_reallocate_func)             \
    (ptr, (oldsize) * sizeof (type), (newsize) * sizeof (type));    \
  } while (0)
.fi
.SS "#define __GMP_REALLOCATE_FUNC_TYPE(\fBp\fP, old_size, new_size, type)"
\fBValue:\fP
.PP
.nf
  ((type *) (*__gmp_reallocate_func)                 \
   (p, (old_size) * sizeof (type), (new_size) * sizeof (type)))
.fi
.SS "#define __GMPF_BITS_TO_PREC(\fBn\fP)   ((\fBmp_size_t\fP) ((\fB__GMP_MAX\fP (53, \fBn\fP) + 2 * \fBGMP_NUMB_BITS\fP \- 1) / \fBGMP_NUMB_BITS\fP))"

.SS "#define __GMPF_PREC_TO_BITS(\fBn\fP)   ((\fBmp_bitcnt_t\fP) (\fBn\fP) * \fBGMP_NUMB_BITS\fP \- \fBGMP_NUMB_BITS\fP)"

.SS "#define __TMP_ALIGN   sizeof (union \fBtmp_align_t\fP)"

.SS "#define _GMP_IEEE_FLOATS   1"

.SS "#define _gmp_rand(\fBrp\fP, state, bits)"
\fBValue:\fP
.PP
.nf
  do {                                  \
    gmp_randstate_ptr  __rstate = (state);              \
    (*((gmp_randfnptr_t *) RNG_FNPTR (__rstate))->randget_fn)       \
      (__rstate, rp, bits);                     \
  } while (0)
.fi
.SS "#define _mpz_newalloc   \fB_mpz_realloc\fP"

.SS "#define ABOVE_THRESHOLD(\fBsize\fP, thresh)"
\fBValue:\fP
.PP
.nf
  ((thresh) == 0                          \
   || ((thresh) != MP_SIZE_T_MAX                    \
       && (size) >= (thresh)))
.fi
.SS "#define ABS(\fBx\fP)   ((\fBx\fP) >= 0 ? (\fBx\fP) : \-(\fBx\fP))"

.SS "#define ABS_CAST(\fBT\fP, \fBx\fP)   ((\fBx\fP) >= 0 ? \fB__GMP_CAST\fP (\fBT\fP, \fBx\fP) : \fBNEG_CAST\fP (\fBT\fP,\fBx\fP))"

.SS "#define ABSIZ(\fBx\fP)   \fBABS\fP (\fBSIZ\fP (\fBx\fP))"

.SS "#define ADDC_LIMB(cout, w, \fBx\fP, \fBy\fP)"
\fBValue:\fP
.PP
.nf
  do {                                    \
    mp_limb_t  __x = (x);                       \
    mp_limb_t  __y = (y);                       \
    mp_limb_t  __w = __x + __y;                     \
    (w) = __w;                              \
    (cout) = __w < __x;                         \
  } while (0)
.fi
.SS "#define ALLOC(\fBx\fP)   ((\fBx\fP)\->_mp_alloc)"

.SS "#define ASM_L(\fBname\fP)   \fBLSYM_PREFIX\fP 'asm_%=_' #name"

.SS "#define ASSERT(expr)   do {} while (0)"

.SS "#define ASSERT_ALWAYS(expr)"
\fBValue:\fP
.PP
.nf
  do {                                   \
    if (UNLIKELY (!(expr)))                     \
      ASSERT_FAIL (expr);                       \
  } while (0)
.fi
.SS "#define ASSERT_ALWAYS_LIMB(limb)"
\fBValue:\fP
.PP
.nf
  do {                                  \
    mp_limb_t  __nail = (limb) & GMP_NAIL_MASK;             \
    ASSERT_ALWAYS (__nail == 0);                    \
  } while (0)
.fi
.SS "#define ASSERT_ALWAYS_MPN(ptr, \fBsize\fP)"
\fBValue:\fP
.PP
.nf
  do {                                  \
    /* let whole loop go dead when no nails */              \
    if (GMP_NAIL_BITS != 0)                     \
      {                                 \
    mp_size_t  __i;                         \
    for (__i = 0; __i < (size); __i++)              \
      ASSERT_ALWAYS_LIMB ((ptr)[__i]);              \
      }                                 \
  } while (0)
.fi
.SS "#define ASSERT_CARRY(expr)   (expr)"

.SS "#define ASSERT_CODE(expr)"

.SS "#define ASSERT_FAIL(expr)   \fB__gmp_assert_fail\fP (\fBASSERT_FILE\fP, \fBASSERT_LINE\fP, #expr)"

.SS "#define ASSERT_FILE   ''"

.SS "#define ASSERT_LIMB(limb)   do {} while (0)"

.SS "#define ASSERT_LINE   \-1"

.SS "#define ASSERT_MPN(ptr, \fBsize\fP)   do {} while (0)"

.SS "#define ASSERT_MPN_NONZERO_P(ptr, \fBsize\fP)   do {} while (0)"

.SS "#define ASSERT_MPN_ZERO_P(ptr, \fBsize\fP)   do {} while (0)"

.SS "#define ASSERT_MPQ_CANONICAL(q)   do {} while (0)"

.SS "#define ASSERT_NOCARRY(expr)   (expr)"

.SS "#define ATTRIBUTE_CONST   \fB__attribute__\fP ((\fBconst\fP))"

.SS "#define ATTRIBUTE_MALLOC   \fB__attribute__\fP ((\fBmalloc\fP))"

.SS "#define ATTRIBUTE_NORETURN   \fB__attribute__\fP ((noreturn))"

.SS "#define BELOW_THRESHOLD(\fBsize\fP, thresh)   (! \fBABOVE_THRESHOLD\fP (\fBsize\fP, thresh))"

.SS "#define BINV_NEWTON_THRESHOLD   300"

.SS "#define binvert_limb(inv, \fBn\fP)"
\fBValue:\fP
.PP
.nf
  do {                                  \
    mp_limb_t  __n = (n);                       \
    mp_limb_t  __inv;                           \
    ASSERT ((__n & 1) == 1);                        \
                                    \
    __inv = binvert_limb_table[(__n/2) & 0x7F]; /*  8 */        \
    if (GMP_NUMB_BITS > 8)   __inv = 2 * __inv - __inv * __inv * __n;   \
    if (GMP_NUMB_BITS > 16)  __inv = 2 * __inv - __inv * __inv * __n;   \
    if (GMP_NUMB_BITS > 32)  __inv = 2 * __inv - __inv * __inv * __n;   \
                                    \
    if (GMP_NUMB_BITS > 64)                     \
      {                                 \
    int  __invbits = 64;                        \
    do {                                \
      __inv = 2 * __inv - __inv * __inv * __n;          \
      __invbits *= 2;                       \
    } while (__invbits < GMP_NUMB_BITS);                \
      }                                 \\
									\\
    ASSERT ((__inv * __n & GMP_NUMB_MASK) == 1);            \
    (inv) = __inv & GMP_NUMB_MASK;                  \
  } while (0)
.fi
.SS "#define binvert_limb_table   __gmp_binvert_limb_table"

.SS "#define BITS_PER_ULONG   (8 * \fBSIZEOF_UNSIGNED_LONG\fP)"

.SS "#define BITS_TO_LIMBS(\fBn\fP)   (((\fBn\fP) + (\fBGMP_NUMB_BITS\fP \- 1)) / \fBGMP_NUMB_BITS\fP)"

.SS "#define BMOD_1_TO_MOD_1_THRESHOLD   10"

.SS "#define BSWAP_LIMB(dst, src)"
\fBValue:\fP
.PP
.nf
  do {                                 \
    (dst) =                             \
      ((src) << 56)                         \
      + (((src) & 0xFF00) << 40)                    \
      + (((src) & 0xFF0000) << 24)                  \
      + (((src) & 0xFF000000) << 8)                 \
      + (((src) >> 8) & 0xFF000000)                 \
      + (((src) >> 24) & 0xFF0000)                  \
      + (((src) >> 40) & 0xFF00)                    \
      + ((src) >> 56);                          \
  } while (0)
.fi
.SS "#define BSWAP_LIMB_FETCH(limb, src)   \fBBSWAP_LIMB\fP (limb, *(src))"

.SS "#define BSWAP_LIMB_STORE(dst, limb)   \fBBSWAP_LIMB\fP (*(dst), limb)"

.SS "#define CNST_LIMB(\fBC\fP)   ((\fBmp_limb_t\fP) \fBC\fP##L)"

.SS "#define CPUVEC_THRESHOLD(field)"
\fBValue:\fP
.PP
.nf
  ((LIKELY (__gmpn_cpuvec_initialized) ? 0 : (__gmpn_cpuvec_init (), 0)),     \
   __gmpn_cpuvec\&.field)
.fi
.SS "#define CRAY_Pragma(\fBstr\fP)   \fB__GMP_CRAY_Pragma\fP(\fBstr\fP)"

.SS "#define DC_BDIV_Q_THRESHOLD   180"

.SS "#define DC_BDIV_QR_THRESHOLD   (2*\fBMUL_TOOM22_THRESHOLD\fP)"

.SS "#define DC_DIV_QR_THRESHOLD   (2*\fBMUL_TOOM22_THRESHOLD\fP)"

.SS "#define DC_DIVAPPR_Q_THRESHOLD   200"

.SS "#define DECL_add_n(\fBname\fP)   \fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBname\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP)"

.SS "#define DECL_addlsh1_n(\fBname\fP)   \fBDECL_add_n\fP (\fBname\fP)"

.SS "#define DECL_addlsh2_n(\fBname\fP)   \fBDECL_add_n\fP (\fBname\fP)"

.SS "#define DECL_addmul_1(\fBname\fP)   \fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBname\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"

.SS "#define DECL_addmul_2(\fBname\fP)   \fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBname\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP)"

.SS "#define DECL_bdiv_dbm1c(\fBname\fP)   \fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBname\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP, \fBmp_limb_t\fP)"

.SS "#define DECL_cnd_add_n(\fBname\fP)   \fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBname\fP (\fBmp_limb_t\fP, \fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP)"

.SS "#define DECL_cnd_sub_n(\fBname\fP)   \fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBname\fP (\fBmp_limb_t\fP, \fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP)"

.SS "#define DECL_com(\fBname\fP)   \fB__GMP_DECLSPEC\fP void \fBname\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP)"

.SS "#define DECL_copyd(\fBname\fP)   \fB__GMP_DECLSPEC\fP void \fBname\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP)"

.SS "#define DECL_copyi(\fBname\fP)   \fBDECL_copyd\fP (\fBname\fP)"

.SS "#define DECL_divexact_1(\fBname\fP)   \fB__GMP_DECLSPEC\fP void \fBname\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"

.SS "#define DECL_divexact_by3c(\fBname\fP)   \fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBname\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"

.SS "#define DECL_divrem_1(\fBname\fP)   \fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBname\fP (\fBmp_ptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"

.SS "#define DECL_gcd_1(\fBname\fP)   \fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBname\fP (\fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"

.SS "#define DECL_lshift(\fBname\fP)   \fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBname\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, unsigned)"

.SS "#define DECL_lshiftc(\fBname\fP)   \fBDECL_lshift\fP (\fBname\fP)"

.SS "#define DECL_mod_1(\fBname\fP)   \fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBname\fP (\fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"

.SS "#define DECL_mod_1_1p(\fBname\fP)   \fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBname\fP (\fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP, \fBconst\fP \fBmp_limb_t\fP [])"

.SS "#define DECL_mod_1_1p_cps(\fBname\fP)   \fB__GMP_DECLSPEC\fP void \fBname\fP (\fBmp_limb_t\fP cps[], \fBmp_limb_t\fP \fBb\fP)"

.SS "#define DECL_mod_1s_2p(\fBname\fP)   \fBDECL_mod_1_1p\fP (\fBname\fP)"

.SS "#define DECL_mod_1s_2p_cps(\fBname\fP)   \fBDECL_mod_1_1p_cps\fP (\fBname\fP)"

.SS "#define DECL_mod_1s_4p(\fBname\fP)   \fBDECL_mod_1_1p\fP (\fBname\fP)"

.SS "#define DECL_mod_1s_4p_cps(\fBname\fP)   \fBDECL_mod_1_1p_cps\fP (\fBname\fP)"

.SS "#define DECL_mod_34lsub1(\fBname\fP)   \fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBname\fP (\fBmp_srcptr\fP, \fBmp_size_t\fP)"

.SS "#define DECL_modexact_1c_odd(\fBname\fP)   \fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBname\fP (\fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP, \fBmp_limb_t\fP)"

.SS "#define DECL_mul_1(\fBname\fP)   \fBDECL_addmul_1\fP (\fBname\fP)"

.SS "#define DECL_mul_basecase(\fBname\fP)   \fB__GMP_DECLSPEC\fP void \fBname\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP)"

.SS "#define DECL_mullo_basecase(\fBname\fP)   \fB__GMP_DECLSPEC\fP void \fBname\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP)"

.SS "#define DECL_preinv_divrem_1(\fBname\fP)   \fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBname\fP (\fBmp_ptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP, \fBmp_limb_t\fP, int)"

.SS "#define DECL_preinv_mod_1(\fBname\fP)   \fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBname\fP (\fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP, \fBmp_limb_t\fP)"

.SS "#define DECL_redc_1(\fBname\fP)   \fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBname\fP (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"

.SS "#define DECL_redc_2(\fBname\fP)   \fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP \fBname\fP (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP)"

.SS "#define DECL_rshift(\fBname\fP)   \fBDECL_lshift\fP (\fBname\fP)"

.SS "#define DECL_sqr_basecase(\fBname\fP)   \fB__GMP_DECLSPEC\fP void \fBname\fP (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP)"

.SS "#define DECL_sub_n(\fBname\fP)   \fBDECL_add_n\fP (\fBname\fP)"

.SS "#define DECL_sublsh1_n(\fBname\fP)   \fBDECL_add_n\fP (\fBname\fP)"

.SS "#define DECL_submul_1(\fBname\fP)   \fBDECL_addmul_1\fP (\fBname\fP)"

.SS "#define DEN(\fBx\fP)   \fBmpq_denref\fP(\fBx\fP)"

.SS "#define DIGITS_IN_BASE_FROM_BITS(\fBres\fP, nbits, \fBb\fP)"
\fBValue:\fP
.PP
.nf
  do {                                   \
    mp_limb_t _ph, _dummy;                      \
    size_t _nbits = (nbits);                        \
    umul_ppmm (_ph, _dummy, mp_bases[b]\&.logb2, _nbits);          \
    _ph += (_dummy + _nbits < _dummy);                  \
    res = _ph + 1;                          \
  } while (0)
.fi
.SS "#define DIGITS_IN_BASE_PER_LIMB(\fBres\fP, nlimbs, \fBb\fP)"
\fBValue:\fP
.PP
.nf
  do {                                   \
    mp_limb_t _ph, _dummy;                      \
    umul_ppmm (_ph, _dummy,                     \
           mp_bases[b]\&.logb2, GMP_NUMB_BITS * (mp_limb_t) (nlimbs));\
    res = _ph;                              \
  } while (0)
.fi
.SS "#define DIGITS_IN_BASEGT2_FROM_BITS(\fBres\fP, nbits, \fBb\fP)"
\fBValue:\fP
.PP
.nf
  do {                                    \
    mp_limb_t _ph, _dummy;                      \
    size_t _nbits = (nbits);                        \
    umul_ppmm (_ph, _dummy, mp_bases[b]\&.logb2 + 1, _nbits);      \
    res = _ph + 1;                          \
  } while (0)
.fi
.SS "#define DIVEXACT_1_THRESHOLD   0"

.SS "#define DIVEXACT_BY3_METHOD   0	/* default to using \fBmpn_bdiv_dbm1c\fP */"

.SS "#define DIVEXACT_JEB_THRESHOLD   25"

.SS "#define DIVIDE_BY_ZERO   \fB__gmp_divide_by_zero\fP ()"

.SS "#define DOPRNT_CONV_FIXED   1"

.SS "#define DOPRNT_CONV_GENERAL   3"

.SS "#define DOPRNT_CONV_SCIENTIFIC   2"

.SS "#define DOPRNT_JUSTIFY_INTERNAL   3"

.SS "#define DOPRNT_JUSTIFY_LEFT   1"

.SS "#define DOPRNT_JUSTIFY_NONE   0"

.SS "#define DOPRNT_JUSTIFY_RIGHT   2"

.SS "#define DOPRNT_SHOWBASE_NO   2"

.SS "#define DOPRNT_SHOWBASE_NONZERO   3"

.SS "#define DOPRNT_SHOWBASE_YES   1"

.SS "#define DOUBLE_NAN_INF_ACTION(\fBx\fP, a_nan, a_inf)"
\fBValue:\fP
.PP
.nf
  do {                                   \
    union ieee_double_extract  u;                   \
    u\&.d = (x);                               \
    if (UNLIKELY (u\&.s\&.exp == 0x7FF))                  \
      {                                 \
    if (u\&.s\&.manl == 0 && u\&.s\&.manh == 0)             \
      { a_inf; }                            \
    else                                \
      { a_nan; }                            \
      }                                 \
  } while (0)
.fi
.SS "#define EXP(\fBx\fP)   ((\fBx\fP)\->_mp_exp)"

.SS "#define FAC_DSC_THRESHOLD   400"

.SS "#define FAC_ODD_THRESHOLD   35"

.SS "#define FFT_FIRST_K   4"

.SS "#define FFT_TABLE_ATTRS   static \fBconst\fP"

.SS "#define FIB_TABLE(\fBn\fP)   (\fB__gmp_fib_table\fP[(\fBn\fP)+1])"

.SS "#define FORCE_DOUBLE(d)   do { } while (0)"

.SS "#define GCD_DC_THRESHOLD   1000"

.SS "#define GCDEXT_DC_THRESHOLD   600"

.SS "#define GET_STR_DC_THRESHOLD   18"

.SS "#define GET_STR_PRECOMPUTE_THRESHOLD   35"

.SS "#define GMP_DECIMAL_POINT   (localeconv()\->decimal_point)"

.SS "#define GMP_ERROR(code)   \fB__gmp_exception\fP (code)"

.SS "#define gmp_init_primesieve   __gmp_init_primesieve"

.SS "#define GMP_LIMB_BITS   (8 * \fBSIZEOF_MP_LIMB_T\fP)"

.SS "#define GMP_LIMB_BYTES   \fBSIZEOF_MP_LIMB_T\fP"

.SS "#define GMP_LIMB_HIGHBIT   (\fBMP_LIMB_T_MAX\fP ^ (\fBMP_LIMB_T_MAX\fP >> 1))"

.SS "#define GMP_NAIL_LOWBIT   \fBCNST_LIMB\fP(0)"

.SS "#define gmp_nextprime   __gmp_nextprime"

.SS "#define GMP_NUMB_CEIL_2MAX_DIV3   ((\fBGMP_NUMB_MAX\fP>>1) / 3 + 1 + \fBGMP_NUMB_HIGHBIT\fP)"

.SS "#define GMP_NUMB_CEIL_MAX_DIV3   (\fBGMP_NUMB_MAX\fP / 3 + 1)"

.SS "#define GMP_NUMB_HIGHBIT   (\fBCNST_LIMB\fP(1) << (\fBGMP_NUMB_BITS\fP\-1))"

.SS "#define gmp_primesieve   __gmp_primesieve"

.SS "#define HAVE_NATIVE_mpn_addlsh1_n   2"

.SS "#define HAVE_NATIVE_mpn_addlsh1_n_ip1   1"

.SS "#define HAVE_NATIVE_mpn_addlsh1_nc_ip1   1"

.SS "#define HAVE_NATIVE_mpn_addlsh2_n   2"

.SS "#define HAVE_NATIVE_mpn_addlsh2_n_ip1   1"

.SS "#define HAVE_NATIVE_mpn_addlsh2_nc_ip1   1"

.SS "#define HAVE_NATIVE_mpn_addlsh_n_ip1   1"

.SS "#define HAVE_NATIVE_mpn_addlsh_nc_ip1   1"

.SS "#define HAVE_NATIVE_mpn_rsblsh1_n   2"

.SS "#define HAVE_NATIVE_mpn_rsblsh2_n   2"

.SS "#define HAVE_NATIVE_mpn_sublsh1_n_ip1   1"

.SS "#define HAVE_NATIVE_mpn_sublsh2_n_ip1   1"

.SS "#define HGCD_APPR_THRESHOLD   400"

.SS "#define HGCD_REDUCE_THRESHOLD   1000"

.SS "#define HGCD_THRESHOLD   400"

.SS "#define INT_HIGHBIT   INT_MIN"

.SS "#define INV_APPR_THRESHOLD   \fBINV_NEWTON_THRESHOLD\fP"

.SS "#define INV_MULMOD_BNM1_THRESHOLD   (4*\fBMULMOD_BNM1_THRESHOLD\fP)"

.SS "#define INV_NEWTON_THRESHOLD   200"

.SS "#define invert_limb(invxl, xl)"
\fBValue:\fP
.PP
.nf
  do {                                   \
    (invxl) = mpn_invert_limb (xl);                 \
  } while (0)
.fi
.SS "#define invert_pi1(dinv, d1, d0)"
\fBValue:\fP
.PP
.nf
  do {                                  \
    mp_limb_t _v, _p, _t1, _t0, _mask;                  \
    invert_limb (_v, d1);                       \
    _p = (d1) * _v;                         \
    _p += (d0);                             \
    if (_p < (d0))                          \
      {                                 \
    _v--;                               \
    _mask = -(mp_limb_t) (_p >= (d1));              \
    _p -= (d1);                         \
    _v += _mask;                            \
    _p -= _mask & (d1);                     \
      }                                 \
    umul_ppmm (_t1, _t0, d0, _v);                   \
    _p += _t1;                              \
    if (_p < _t1)                           \
      {                                 \
    _v--;                               \
    if (UNLIKELY (_p >= (d1)))                  \
      {                             \
        if (_p > (d1) || _t0 >= (d0))               \
          _v--;                         \
      }                             \
      }                                 \
    (dinv)\&.inv32 = _v;                           \
  } while (0)
.fi
.SS "#define JACOBI_0LS(blow, \fBbsize\fP)   (((\fBbsize\fP) == 1 || (\fBbsize\fP) == \-1) && (blow) == 1)"

.SS "#define JACOBI_0S(\fBb\fP)   ((\fBb\fP) == 1 || (\fBb\fP) == \-1)"

.SS "#define JACOBI_0U(\fBb\fP)   ((\fBb\fP) == 1)"

.SS "#define JACOBI_ASGN_SU_BIT1(\fBa\fP, \fBb\fP)   ((((\fBa\fP) < 0) << 1) & \fBJACOBI_N1B_BIT1\fP(\fBb\fP))"

.SS "#define JACOBI_BIT1_TO_PN(result_bit1)   (1 \- ((int) (result_bit1) & 2))"

.SS "#define JACOBI_BSGN_SS_BIT1(\fBa\fP, \fBb\fP)   ((((\fBa\fP)<0) & ((\fBb\fP)<0)) << 1)"

.SS "#define JACOBI_BSGN_SZ_BIT1(\fBa\fP, \fBb\fP)   \fBJACOBI_BSGN_SS_BIT1\fP (\fBa\fP, \fBSIZ\fP(\fBb\fP))"

.SS "#define JACOBI_BSGN_ZS_BIT1(\fBa\fP, \fBb\fP)   \fBJACOBI_BSGN_SZ_BIT1\fP (\fBb\fP, \fBa\fP)"

.SS "#define JACOBI_LS0(alow, asize)   (((asize) == 1 || (asize) == \-1) && (alow) == 1)"

.SS "#define JACOBI_MOD_OR_MODEXACT_1_ODD(result_bit1, a_rem, a_ptr, a_size, \fBb\fP)"
\fBValue:\fP
.PP
.nf
  do {                                     \
    mp_srcptr  __a_ptr  = (a_ptr);                     \
    mp_size_t  __a_size = (a_size);                    \
    mp_limb_t  __b  = (b);                         \\
									   \\
    ASSERT (__a_size >= 1);                        \
    ASSERT (__b & 1);                              \\
									   \\
    if ((GMP_NUMB_BITS % 2) != 0                       \
    || ABOVE_THRESHOLD (__a_size, BMOD_1_TO_MOD_1_THRESHOLD))      \
      {                                    \
    (a_rem) = mpn_mod_1 (__a_ptr, __a_size, __b);              \
      }                                    \
    else                                   \
      {                                    \
    (result_bit1) ^= JACOBI_N1B_BIT1 (__b);                \
    (a_rem) = mpn_modexact_1_odd (__a_ptr, __a_size, __b);         \
      }                                    \
  } while (0)
.fi
.SS "#define JACOBI_N1B_BIT1(\fBb\fP)   ((int) (\fBb\fP))"

.SS "#define JACOBI_RECIP_UU_BIT1(\fBa\fP, \fBb\fP)   ((int) ((\fBa\fP) & (\fBb\fP)))"

.SS "#define JACOBI_S0(\fBa\fP)   (((\fBa\fP) == 1) | ((\fBa\fP) == \-1))"

.SS "#define JACOBI_STRIP_LOW_ZEROS(result_bit1, \fBa\fP, b_ptr, b_size, b_low)"
\fBValue:\fP
.PP
.nf
  do {                                   \
    ASSERT ((b_size) >= 1);                     \
    ASSERT ((b_low) == (b_ptr)[0]);                 \
                                    \
    while (UNLIKELY ((b_low) == 0))                 \
      {                                 \
    (b_size)--;                         \
    ASSERT ((b_size) >= 1);                     \
    (b_ptr)++;                          \
    (b_low) = *(b_ptr);                     \\
									\\
	ASSERT (((a) & 1) != 0);                   \
    if ((GMP_NUMB_BITS % 2) == 1)                   \
      (result_bit1) ^= JACOBI_TWO_U_BIT1(a);            \
      }                                 \
  } while (0)
.fi
.SS "#define jacobi_table   __gmp_jacobi_table"

.SS "#define JACOBI_TWO_U_BIT1(\fBb\fP)   ((int) (((\fBb\fP) >> 1) ^ (\fBb\fP)))"

.SS "#define JACOBI_TWOS_U(twos, \fBb\fP)   (\fBJACOBI_BIT1_TO_PN\fP (\fBJACOBI_TWOS_U_BIT1\fP (twos, \fBb\fP)))"

.SS "#define JACOBI_TWOS_U_BIT1(twos, \fBb\fP)   ((int) ((twos) << 1) & \fBJACOBI_TWO_U_BIT1\fP (\fBb\fP))"

.SS "#define JACOBI_U0(\fBa\fP)   ((\fBa\fP) == 1)"

.SS "#define JACOBI_Z0(\fBa\fP)   \fBJACOBI_LS0\fP (\fBPTR\fP(\fBa\fP)[0], \fBSIZ\fP(\fBa\fP))"

.SS "#define LIKELY(cond)   \fB__GMP_LIKELY\fP(cond)"

.SS "#define LIMB_HIGHBIT_TO_MASK(\fBn\fP)"
\fBValue:\fP
.PP
.nf
  (((mp_limb_signed_t) -1 >> 1) < 0                    \
   ? (mp_limb_signed_t) (n) >> (GMP_LIMB_BITS - 1)          \
   : (n) & GMP_LIMB_HIGHBIT ? MP_LIMB_T_MAX : CNST_LIMB(0))
.fi
.SS "#define LIMBS_PER_DIGIT_IN_BASE(\fBres\fP, ndigits, \fBb\fP)"
\fBValue:\fP
.PP
.nf
  do {                                  \
    mp_limb_t _ph, _dummy;                      \
    umul_ppmm (_ph, _dummy, mp_bases[b]\&.log2b, (mp_limb_t) (ndigits));   \
    res = 8 * _ph / GMP_NUMB_BITS + 2;                  \
  } while (0)
.fi
.SS "#define LIMBS_PER_DOUBLE   ((53 + \fBGMP_NUMB_BITS\fP \- 2) / \fBGMP_NUMB_BITS\fP + 1)"

.SS "#define LIMBS_PER_ULONG   2"

.SS "#define LOG2C(\fBn\fP)"
\fBValue:\fP
.PP
.nf
 (((n) >=    0x1) + ((n) >=    0x2) + ((n) >=    0x4) + ((n) >=    0x8) + \
  ((n) >=   0x10) + ((n) >=   0x20) + ((n) >=   0x40) + ((n) >=   0x80) + \
  ((n) >=  0x100) + ((n) >=  0x200) + ((n) >=  0x400) + ((n) >=  0x800) + \
  ((n) >= 0x1000) + ((n) >= 0x2000) + ((n) >= 0x4000) + ((n) >= 0x8000))
.fi
.SS "#define LONG_HIGHBIT   LONG_MIN"

.SS "#define LOW_ZEROS_MASK(\fBn\fP)   (((\fBn\fP) & \-(\fBn\fP)) \- 1)"

.SS "#define MATRIX22_STRASSEN_THRESHOLD   30"

.SS "#define MAX(h, \fBi\fP)   ((h) > (\fBi\fP) ? (h) : (\fBi\fP))"

.SS "#define MEM_OVERLAP_P(xp, xsize, yp, ysize)"
\fBValue:\fP
.PP
.nf
  (   (char *) (xp) + (xsize) > (char *) (yp)              \
   && (char *) (yp) + (ysize) > (char *) (xp))
.fi
.SS "#define MIN(l, o)   ((l) < (o) ? (l) : (o))"

.SS "#define MODLIMB_INVERSE_3   (((\fBGMP_NUMB_MAX\fP >> (\fBGMP_NUMB_BITS\fP % 2)) / 3) * 2 + 1)"

.SS "#define modlimb_invert   \fBbinvert_limb\fP  /* backward compatibility */"

.SS "#define MP_BASE_AS_DOUBLE   (4\&.0 * ((\fBmp_limb_t\fP) 1 << (\fBGMP_NUMB_BITS\fP \- 2)))"

.SS "#define mp_bases   \fB__MPN\fP(\fBbases\fP)"

.SS "#define MP_EXP_T_MAX   \fBMP_SIZE_T_MAX\fP"

.SS "#define MP_EXP_T_MIN   \fBMP_SIZE_T_MIN\fP"

.SS "#define MP_LIMB_T_MAX   (~ (\fBmp_limb_t\fP) 0)"

.SS "#define MP_LIMB_T_SWAP(\fBx\fP, \fBy\fP)"
\fBValue:\fP
.PP
.nf
  do {                                   \
    mp_limb_t __mp_limb_t_swap__tmp = (x);              \
    (x) = (y);                              \
    (y) = __mp_limb_t_swap__tmp;                    \
  } while (0)
.fi
.SS "#define MP_PTR_SWAP(\fBx\fP, \fBy\fP)"
\fBValue:\fP
.PP
.nf
  do {                                 \
    mp_ptr __mp_ptr_swap__tmp = (x);                    \
    (x) = (y);                              \
    (y) = __mp_ptr_swap__tmp;                       \
  } while (0)
.fi
.SS "#define MP_SIZE_T_MAX   LONG_MAX"

.SS "#define MP_SIZE_T_MIN   LONG_MIN"

.SS "#define MP_SIZE_T_SWAP(\fBx\fP, \fBy\fP)"
\fBValue:\fP
.PP
.nf
  do {                                    \
    mp_size_t __mp_size_t_swap__tmp = (x);              \
    (x) = (y);                              \
    (y) = __mp_size_t_swap__tmp;                    \
  } while (0)
.fi
.SS "#define MP_SRCPTR_SWAP(\fBx\fP, \fBy\fP)"
\fBValue:\fP
.PP
.nf
  do {                                  \
    mp_srcptr __mp_srcptr_swap__tmp = (x);              \
    (x) = (y);                              \
    (y) = __mp_srcptr_swap__tmp;                    \
  } while (0)
.fi
.SS "#define MPF_CHECK_FORMAT(\fBf\fP)"
\fBValue:\fP
.PP
.nf
  do {                                   \
    ASSERT_ALWAYS (PREC(f) >= __GMPF_BITS_TO_PREC(53));         \
    ASSERT_ALWAYS (ABSIZ(f) <= PREC(f)+1);              \
    if (SIZ(f) == 0)                            \
      ASSERT_ALWAYS (EXP(f) == 0);                  \
    if (SIZ(f) != 0)                            \
      ASSERT_ALWAYS (PTR(f)[ABSIZ(f) - 1] != 0);            \
  } while (0)
.fi
.SS "#define MPF_SIGNIFICANT_DIGITS(\fBn\fP, base, prec)"
\fBValue:\fP
.PP
.nf
  do {                                 \
    size_t rawn;                            \
    ASSERT (base >= 2 && base < numberof (mp_bases));           \
    DIGITS_IN_BASE_PER_LIMB (rawn, (prec) - 1, base);           \
    n = rawn + 2;                           \
  } while (0)
.fi
.SS "#define mpn_add_err1_n   \fB__MPN\fP(add_err1_n)"

.SS "#define mpn_add_err2_n   \fB__MPN\fP(add_err2_n)"

.SS "#define mpn_add_err3_n   \fB__MPN\fP(add_err3_n)"

.SS "#define mpn_add_n_sub_n   \fB__MPN\fP(add_n_sub_n)"

.SS "#define mpn_add_n_sub_nc   \fB__MPN\fP(add_n_sub_nc)"

.SS "#define mpn_add_nc   \fB__MPN\fP(add_nc)"

.SS "#define mpn_addaddmul_1msb0   \fB__MPN\fP(addaddmul_1msb0)"

.SS "#define mpn_addlsh1_n   \fB__MPN\fP(addlsh1_n)"

.SS "#define mpn_addlsh1_n(\fBa\fP, \fBb\fP, \fBc\fP, d)   \fBmpn_addlsh_n\fP(\fBa\fP,\fBb\fP,\fBc\fP,d,1)"

.SS "#define mpn_addlsh1_n_ip1(dst, src, \fBn\fP)   \fBmpn_addlsh1_n\fP(dst,dst,src,\fBn\fP)"

.SS "#define mpn_addlsh1_nc   \fB__MPN\fP(addlsh1_nc)"

.SS "#define mpn_addlsh1_nc_ip1(dst, src, \fBn\fP, \fBc\fP)   \fBmpn_addlsh1_nc\fP(dst,dst,src,\fBn\fP,\fBc\fP)"

.SS "#define mpn_addlsh2_n   \fB__MPN\fP(addlsh2_n)"

.SS "#define mpn_addlsh2_n(\fBa\fP, \fBb\fP, \fBc\fP, d)   \fBmpn_addlsh_n\fP(\fBa\fP,\fBb\fP,\fBc\fP,d,2)"

.SS "#define mpn_addlsh2_n_ip1(dst, src, \fBn\fP)   \fBmpn_addlsh2_n\fP(dst,dst,src,\fBn\fP)"

.SS "#define mpn_addlsh2_nc   \fB__MPN\fP(addlsh2_nc)"

.SS "#define mpn_addlsh2_nc_ip1(dst, src, \fBn\fP, \fBc\fP)   \fBmpn_addlsh2_nc\fP(dst,dst,src,\fBn\fP,\fBc\fP)"

.SS "#define mpn_addlsh_n   \fB__MPN\fP(addlsh_n)"

.SS "#define mpn_addlsh_n_ip1(dst, src, \fBn\fP, s)   \fBmpn_addlsh_n\fP(dst,dst,src,\fBn\fP,s)"

.SS "#define mpn_addlsh_nc   \fB__MPN\fP(addlsh_nc)"

.SS "#define mpn_addlsh_nc_ip1(dst, src, \fBn\fP, s, \fBc\fP)   \fBmpn_addlsh_nc\fP(dst,dst,src,\fBn\fP,s,\fBc\fP)"

.SS "#define mpn_addmul_1c   \fB__MPN\fP(addmul_1c)"

.SS "#define mpn_addmul_2   \fB__MPN\fP(addmul_2)"

.SS "#define mpn_addmul_2s   \fB__MPN\fP(addmul_2s)"

.SS "#define mpn_addmul_3   \fB__MPN\fP(addmul_3)"

.SS "#define mpn_addmul_4   \fB__MPN\fP(addmul_4)"

.SS "#define mpn_addmul_5   \fB__MPN\fP(addmul_5)"

.SS "#define mpn_addmul_6   \fB__MPN\fP(addmul_6)"

.SS "#define mpn_addmul_7   \fB__MPN\fP(addmul_7)"

.SS "#define mpn_addmul_8   \fB__MPN\fP(addmul_8)"

.SS "#define mpn_bc_mulmod_bnm1   \fB__MPN\fP(bc_mulmod_bnm1)"

.SS "#define mpn_bc_set_str   \fB__MPN\fP(bc_set_str)"

.SS "#define mpn_bdiv_dbm1(dst, src, \fBsize\fP, divisor)   \fBmpn_bdiv_dbm1c\fP (dst, src, \fBsize\fP, divisor, \fB__GMP_CAST\fP (\fBmp_limb_t\fP, 0))"

.SS "#define mpn_bdiv_dbm1c   \fB__MPN\fP(bdiv_dbm1c)"

.SS "#define mpn_bdiv_q   \fB__MPN\fP(bdiv_q)"

.SS "#define mpn_bdiv_q_1   \fB__MPN\fP(bdiv_q_1)"

.SS "#define mpn_bdiv_q_itch   \fB__MPN\fP(bdiv_q_itch)"

.SS "#define mpn_bdiv_qr   \fB__MPN\fP(bdiv_qr)"

.SS "#define mpn_bdiv_qr_itch   \fB__MPN\fP(bdiv_qr_itch)"

.SS "#define mpn_binvert   \fB__MPN\fP(binvert)"

.SS "#define mpn_binvert_itch   \fB__MPN\fP(binvert_itch)"

.SS "#define mpn_broot   \fB__MPN\fP(broot)"

.SS "#define mpn_broot_invm1   \fB__MPN\fP(broot_invm1)"

.SS "#define mpn_brootinv   \fB__MPN\fP(brootinv)"

.SS "#define mpn_bsqrt   \fB__MPN\fP(bsqrt)"

.SS "#define mpn_bsqrtinv   \fB__MPN\fP(bsqrtinv)"

.SS "#define MPN_BSWAP(dst, src, \fBsize\fP)"
\fBValue:\fP
.PP
.nf
  do {                                    \
    mp_ptr     __dst = (dst);                       \
    mp_srcptr  __src = (src);                       \
    mp_size_t  __size = (size);                     \
    mp_size_t  __i;                         \
    ASSERT ((size) >= 0);                       \
    ASSERT (MPN_SAME_OR_SEPARATE_P (dst, src, size));           \
    CRAY_Pragma ("_CRI ivdep");                     \
    for (__i = 0; __i < __size; __i++)                  \
      {                                 \
    BSWAP_LIMB_FETCH (*__dst, __src);               \
    __dst++;                            \
    __src++;                            \
      }                                 \
  } while (0)
.fi
.SS "#define MPN_BSWAP_REVERSE(dst, src, \fBsize\fP)"
\fBValue:\fP
.PP
.nf
  do {                                 \
    mp_ptr     __dst = (dst);                       \
    mp_size_t  __size = (size);                     \
    mp_srcptr  __src = (src) + __size - 1;              \
    mp_size_t  __i;                         \
    ASSERT ((size) >= 0);                       \
    ASSERT (! MPN_OVERLAP_P (dst, size, src, size));            \
    CRAY_Pragma ("_CRI ivdep");                     \
    for (__i = 0; __i < __size; __i++)                  \
      {                                 \
    BSWAP_LIMB_FETCH (*__dst, __src);               \
    __dst++;                            \
    __src--;                            \
      }                                 \
  } while (0)
.fi
.SS "#define MPN_CMP(result, xp, yp, \fBsize\fP)   \fB__GMPN_CMP\fP(result, xp, yp, \fBsize\fP)"

.SS "#define MPN_COPY(d, s, \fBn\fP)"
\fBValue:\fP
.PP
.nf
  do {                                    \
    ASSERT (MPN_SAME_OR_SEPARATE_P (d, s, n));              \
    MPN_COPY_INCR (d, s, n);                        \
  } while (0)
.fi
.SS "#define MPN_COPY_DECR(dst, src, \fBsize\fP)"
\fBValue:\fP
.PP
.nf
  do {                                 \
    ASSERT ((size) >= 0);                       \
    ASSERT (MPN_SAME_OR_DECR_P (dst, src, size));           \
    mpn_copyd (dst, src, size);                     \
  } while (0)
.fi
.SS "#define MPN_COPY_INCR(dst, src, \fBsize\fP)"
\fBValue:\fP
.PP
.nf
  do {                                 \
    ASSERT ((size) >= 0);                       \
    ASSERT (MPN_SAME_OR_INCR_P (dst, src, size));           \
    mpn_copyi (dst, src, size);                     \
  } while (0)
.fi
.SS "#define mpn_copyd   \fB__MPN\fP(copyd)"

.SS "#define mpn_copyi   \fB__MPN\fP(copyi)"

.SS "#define mpn_dc_get_str_itch(\fBn\fP)   ((\fBn\fP) + \fBGMP_LIMB_BITS\fP)"

.SS "#define mpn_dc_get_str_powtab_alloc(\fBn\fP)   ((\fBn\fP) + 2 * \fBGMP_LIMB_BITS\fP)"

.SS "#define mpn_dc_set_str   \fB__MPN\fP(dc_set_str)"

.SS "#define mpn_dc_set_str_itch(\fBn\fP)   ((\fBn\fP) + \fBGMP_LIMB_BITS\fP)"

.SS "#define mpn_dc_set_str_powtab_alloc(\fBn\fP)   ((\fBn\fP) + \fBGMP_LIMB_BITS\fP)"

.SS "#define mpn_dcpi1_bdiv_q   \fB__MPN\fP(dcpi1_bdiv_q)"

.SS "#define mpn_dcpi1_bdiv_q_n   \fB__MPN\fP(dcpi1_bdiv_q_n)"

.SS "#define mpn_dcpi1_bdiv_q_n_itch   \fB__MPN\fP(dcpi1_bdiv_q_n_itch)"

.SS "#define mpn_dcpi1_bdiv_qr   \fB__MPN\fP(dcpi1_bdiv_qr)"

.SS "#define mpn_dcpi1_bdiv_qr_n   \fB__MPN\fP(dcpi1_bdiv_qr_n)"

.SS "#define mpn_dcpi1_bdiv_qr_n_itch   \fB__MPN\fP(dcpi1_bdiv_qr_n_itch)"

.SS "#define mpn_dcpi1_div_q   \fB__MPN\fP(dcpi1_div_q)"

.SS "#define mpn_dcpi1_div_qr   \fB__MPN\fP(dcpi1_div_qr)"

.SS "#define mpn_dcpi1_div_qr_n   \fB__MPN\fP(dcpi1_div_qr_n)"

.SS "#define mpn_dcpi1_divappr_q   \fB__MPN\fP(dcpi1_divappr_q)"

.SS "#define mpn_dcpi1_divappr_q_n   \fB__MPN\fP(dcpi1_divappr_q_n)"

.SS "#define mpn_decr_u(\fBp\fP, incr)"
\fBValue:\fP
.PP
.nf
  do {                                 \
    mp_limb_t __x;                          \
    mp_ptr __p = (p);                           \
    if (__builtin_constant_p (incr) && (incr) == 1)         \
      {                                 \
    while ((*(__p++))-- == 0)                   \
      ;                             \
      }                                 \
    else                                \
      {                                 \
    __x = *__p;                         \
    *__p = __x - (incr);                        \
    if (__x < (incr))                       \
      while ((*(++__p))-- == 0)                 \
        ;                               \
      }                                 \
  } while (0)
.fi
.SS "#define MPN_DECR_U(ptr, \fBsize\fP, \fBn\fP)   \fBmpn_decr_u\fP (ptr, \fBn\fP)"

.SS "#define mpn_div_q   \fB__MPN\fP(div_q)"

.SS "#define mpn_div_qr_1n_pi1   \fB__MPN\fP(div_qr_1n_pi1)"

.SS "#define mpn_div_qr_2n_pi1   \fB__MPN\fP(div_qr_2n_pi1)"

.SS "#define mpn_div_qr_2u_pi1   \fB__MPN\fP(div_qr_2u_pi1)"

.SS "#define mpn_divexact   \fB__MPN\fP(\fBdivexact\fP)"

.SS "#define mpn_divexact_by11(dst, src, \fBsize\fP)   (15 & 5 * \fBmpn_bdiv_dbm1\fP (dst, src, \fBsize\fP, \fB__GMP_CAST\fP (\fBmp_limb_t\fP, \fBGMP_NUMB_MASK\fP / 11)))"

.SS "#define mpn_divexact_by13(dst, src, \fBsize\fP)   (15 & 3 * \fBmpn_bdiv_dbm1\fP (dst, src, \fBsize\fP, \fB__GMP_CAST\fP (\fBmp_limb_t\fP, \fBGMP_NUMB_MASK\fP / 13)))"

.SS "#define mpn_divexact_by15(dst, src, \fBsize\fP)   (15 & 1 * \fBmpn_bdiv_dbm1\fP (dst, src, \fBsize\fP, \fB__GMP_CAST\fP (\fBmp_limb_t\fP, \fBGMP_NUMB_MASK\fP / 15)))"

.SS "#define mpn_divexact_by3(dst, src, \fBsize\fP)   (3 & \fBmpn_bdiv_dbm1\fP (dst, src, \fBsize\fP, \fB__GMP_CAST\fP (\fBmp_limb_t\fP, \fBGMP_NUMB_MASK\fP / 3)))"

.SS "#define mpn_divexact_by5(dst, src, \fBsize\fP)   (7 & 3 * \fBmpn_bdiv_dbm1\fP (dst, src, \fBsize\fP, \fB__GMP_CAST\fP (\fBmp_limb_t\fP, \fBGMP_NUMB_MASK\fP / 5)))"

.SS "#define mpn_divexact_by7(dst, src, \fBsize\fP)   (7 & 1 * \fBmpn_bdiv_dbm1\fP (dst, src, \fBsize\fP, \fB__GMP_CAST\fP (\fBmp_limb_t\fP, \fBGMP_NUMB_MASK\fP / 7)))"

.SS "#define mpn_divexact_by9(dst, src, \fBsize\fP)   (15 & 7 * \fBmpn_bdiv_dbm1\fP (dst, src, \fBsize\fP, \fB__GMP_CAST\fP (\fBmp_limb_t\fP, \fBGMP_NUMB_MASK\fP / 9)))"

.SS "#define mpn_divexact_itch   \fB__MPN\fP(divexact_itch)"

.SS "#define mpn_divisible_p   \fB__MPN\fP(\fBdivisible_p\fP)"

.SS "#define mpn_divrem_1c   \fB__MPN\fP(divrem_1c)"

.SS "#define MPN_DIVREM_OR_DIVEXACT_1(\fBrp\fP, up, \fBn\fP, d)"
\fBValue:\fP
.PP
.nf
  do {                                    \
    if (BELOW_THRESHOLD (n, DIVEXACT_1_THRESHOLD))          \
      ASSERT_NOCARRY (mpn_divrem_1 (rp, (mp_size_t) 0, up, n, d));  \
    else                                \
      {                                 \
    ASSERT (mpn_mod_1 (up, n, d) == 0);             \
    mpn_divexact_1 (rp, up, n, d);                  \
      }                                 \
  } while (0)
.fi
.SS "#define MPN_DIVREM_OR_PREINV_DIVREM_1(qp, xsize, ap, \fBsize\fP, d, dinv, shift)   \fBmpn_preinv_divrem_1\fP (qp, xsize, ap, \fBsize\fP, d, dinv, shift)"

.SS "#define mpn_dump   \fB__MPN\fP(dump)"

.SS "#define MPN_EXTRACT_NUMB(\fBcount\fP, xh, xl)"
\fBValue:\fP
.PP
.nf
  ((((xh) << ((count) - GMP_NAIL_BITS)) & GMP_NUMB_MASK) | \
   ((xl) >> (GMP_LIMB_BITS - (count))))
.fi
.SS "#define mpn_fft_best_k   \fB__MPN\fP(fft_best_k)"

.SS "#define mpn_fft_mul   \fBmpn_nussbaumer_mul\fP"

.SS "#define mpn_fft_next_size   \fB__MPN\fP(fft_next_size)"

.SS "#define MPN_FFT_TABLE_SIZE   16"

.SS "#define MPN_FIB2_SIZE(\fBn\fP)   ((\fBmp_size_t\fP) ((\fBn\fP) / 32 * 23 / \fBGMP_NUMB_BITS\fP) + 4)"

.SS "#define mpn_fib2_ui   \fB__MPN\fP(fib2_ui)"

.SS "#define MPN_FILL(dst, \fBn\fP, \fBf\fP)"
\fBValue:\fP
.PP
.nf
  do {                                    \
    mp_ptr __dst = (dst);                       \
    mp_size_t __n = (n);                        \
    ASSERT (__n > 0);                           \
    do                                  \
      *__dst++ = (f);                           \
    while (--__n);                          \
  } while (0)
.fi
.SS "#define mpn_gcd_subdiv_step   \fB__MPN\fP(gcd_subdiv_step)"

.SS "#define MPN_GCD_SUBDIV_STEP_ITCH(\fBn\fP)   (\fBn\fP)"

.SS "#define mpn_gcdext_hook   \fB__MPN\fP (gcdext_hook)"

.SS "#define MPN_GCDEXT_LEHMER_ITCH(an, bn)   (5*(an) + 4*(bn) + 8)"

.SS "#define mpn_gcdext_lehmer_n   \fB__MPN\fP(gcdext_lehmer_n)"

.SS "#define MPN_GCDEXT_LEHMER_N_ITCH(\fBn\fP)   (4*(\fBn\fP) + 3)"

.SS "#define mpn_get_d   __gmpn_get_d"

.SS "#define mpn_hgcd   \fB__MPN\fP (hgcd)"

.SS "#define mpn_hgcd2   \fB__MPN\fP (hgcd2)"

.SS "#define mpn_hgcd2_jacobi   \fB__MPN\fP (hgcd2_jacobi)"

.SS "#define mpn_hgcd_appr   \fB__MPN\fP (hgcd_appr)"

.SS "#define mpn_hgcd_appr_itch   \fB__MPN\fP (hgcd_appr_itch)"

.SS "#define mpn_hgcd_itch   \fB__MPN\fP (hgcd_itch)"

.SS "#define mpn_hgcd_jacobi   \fB__MPN\fP (hgcd_jacobi)"

.SS "#define mpn_hgcd_matrix_adjust   \fB__MPN\fP (hgcd_matrix_adjust)"

.SS "#define mpn_hgcd_matrix_init   \fB__MPN\fP (hgcd_matrix_init)"

.SS "#define MPN_HGCD_MATRIX_INIT_ITCH(\fBn\fP)   (4 * ((\fBn\fP+1)/2 + 1))"

.SS "#define mpn_hgcd_matrix_mul   \fB__MPN\fP (hgcd_matrix_mul)"

.SS "#define mpn_hgcd_matrix_mul_1   \fB__MPN\fP (hgcd_matrix_mul_1)"

.SS "#define mpn_hgcd_matrix_update_q   \fB__MPN\fP (hgcd_matrix_update_q)"

.SS "#define mpn_hgcd_mul_matrix1_vector   \fB__MPN\fP (hgcd_mul_matrix1_vector)"

.SS "#define mpn_hgcd_reduce   \fB__MPN\fP(hgcd_reduce)"

.SS "#define mpn_hgcd_reduce_itch   \fB__MPN\fP(hgcd_reduce_itch)"

.SS "#define mpn_hgcd_step   \fB__MPN\fP(hgcd_step)"

.SS "#define mpn_incr_u(\fBp\fP, incr)"
\fBValue:\fP
.PP
.nf
  do {                                 \
    mp_limb_t __x;                          \
    mp_ptr __p = (p);                           \
    if (__builtin_constant_p (incr) && (incr) == 1)         \
      {                                 \
    while (++(*(__p++)) == 0)                   \
      ;                             \
      }                                 \
    else                                \
      {                                 \
    __x = *__p + (incr);                        \
    *__p = __x;                         \
    if (__x < (incr))                       \
      while (++(*(++__p)) == 0)                 \
        ;                               \
      }                                 \
  } while (0)
.fi
.SS "#define MPN_INCR_U(ptr, \fBsize\fP, \fBn\fP)   \fBmpn_incr_u\fP (ptr, \fBn\fP)"

.SS "#define mpn_invert   \fB__MPN\fP(invert)"

.SS "#define mpn_invert_itch(\fBn\fP)   \fBmpn_invertappr_itch\fP(\fBn\fP)"

.SS "#define mpn_invert_limb   \fB__MPN\fP(\fBinvert_limb\fP)"

.SS "#define mpn_invertappr   \fB__MPN\fP(invertappr)"

.SS "#define mpn_invertappr_itch(\fBn\fP)   (2 * (\fBn\fP))"

.SS "#define mpn_jacobi_2   \fB__MPN\fP(jacobi_2)"

.SS "#define mpn_jacobi_base   \fB__MPN\fP(jacobi_base)"

.SS "#define mpn_jacobi_n   \fB__MPN\fP(jacobi_n)"

.SS "#define MPN_LOGOPS_N_INLINE(\fBrp\fP, up, vp, \fBn\fP, operation)"
\fBValue:\fP
.PP
.nf
  do {                                 \
    mp_srcptr   __up = (up);                        \
    mp_srcptr   __vp = (vp);                        \
    mp_ptr  __rp = (rp);                        \
    mp_size_t   __n = (n);                      \
    mp_limb_t __a, __b;                         \
    ASSERT (__n > 0);                           \
    ASSERT (MPN_SAME_OR_SEPARATE_P (__rp, __up, __n));          \
    ASSERT (MPN_SAME_OR_SEPARATE_P (__rp, __vp, __n));          \
    __up += __n;                            \
    __vp += __n;                            \
    __rp += __n;                            \
    __n = -__n;                             \
    do {                                \
      __a = __up[__n];                          \
      __b = __vp[__n];                          \
      __rp[__n] = operation;                        \
    } while (++__n);                            \
  } while (0)
.fi
.SS "#define mpn_lshiftc   \fB__MPN\fP(lshiftc)"

.SS "#define mpn_matrix22_mul   \fB__MPN\fP(matrix22_mul)"

.SS "#define mpn_matrix22_mul1_inverse_vector   \fB__MPN\fP (matrix22_mul1_inverse_vector)"

.SS "#define mpn_matrix22_mul_itch   \fB__MPN\fP(matrix22_mul_itch)"

.SS "#define mpn_matrix22_mul_strassen   \fB__MPN\fP(matrix22_mul_strassen)"

.SS "#define mpn_mod_1_1p   \fB__MPN\fP(mod_1_1p)"

.SS "#define mpn_mod_1_1p_cps   \fB__MPN\fP(mod_1_1p_cps)"

.SS "#define mpn_mod_1c   \fB__MPN\fP(mod_1c)"

.SS "#define mpn_mod_1s_2p   \fB__MPN\fP(mod_1s_2p)"

.SS "#define mpn_mod_1s_2p_cps   \fB__MPN\fP(mod_1s_2p_cps)"

.SS "#define mpn_mod_1s_3p   \fB__MPN\fP(mod_1s_3p)"

.SS "#define mpn_mod_1s_3p_cps   \fB__MPN\fP(mod_1s_3p_cps)"

.SS "#define mpn_mod_1s_4p   \fB__MPN\fP(mod_1s_4p)"

.SS "#define mpn_mod_1s_4p_cps   \fB__MPN\fP(mod_1s_4p_cps)"

.SS "#define mpn_mod_34lsub1   \fB__MPN\fP(mod_34lsub1)"

.SS "#define MPN_MOD_OR_MODEXACT_1_ODD(src, \fBsize\fP, divisor)"
\fBValue:\fP
.PP
.nf
  (BELOW_THRESHOLD (size, BMOD_1_TO_MOD_1_THRESHOLD)         \
   ? mpn_modexact_1_odd (src, size, divisor)                \
   : mpn_mod_1 (src, size, divisor))
.fi
.SS "#define MPN_MOD_OR_PREINV_MOD_1(src, \fBsize\fP, divisor, inverse)"
\fBValue:\fP
.PP
.nf
  (BELOW_THRESHOLD (size, PREINV_MOD_1_TO_MOD_1_THRESHOLD)      \
   ? mpn_preinv_mod_1 (src, size, divisor, inverse)         \
   : mpn_mod_1 (src, size, divisor))
.fi
.SS "#define mpn_modexact_1_odd   \fB__MPN\fP(modexact_1_odd)"

.SS "#define mpn_modexact_1c_odd   \fB__MPN\fP(modexact_1c_odd)"

.SS "#define mpn_mu_bdiv_q   \fB__MPN\fP(mu_bdiv_q)"

.SS "#define mpn_mu_bdiv_q_itch   \fB__MPN\fP(mu_bdiv_q_itch)"

.SS "#define mpn_mu_bdiv_qr   \fB__MPN\fP(mu_bdiv_qr)"

.SS "#define mpn_mu_bdiv_qr_itch   \fB__MPN\fP(mu_bdiv_qr_itch)"

.SS "#define mpn_mu_div_q   \fB__MPN\fP(mu_div_q)"

.SS "#define mpn_mu_div_q_itch   \fB__MPN\fP(mu_div_q_itch)"

.SS "#define mpn_mu_div_qr   \fB__MPN\fP(mu_div_qr)"

.SS "#define mpn_mu_div_qr_choose_in   \fB__MPN\fP(mu_div_qr_choose_in)"

.SS "#define mpn_mu_div_qr_itch   \fB__MPN\fP(mu_div_qr_itch)"

.SS "#define mpn_mu_divappr_q   \fB__MPN\fP(mu_divappr_q)"

.SS "#define mpn_mu_divappr_q_choose_in   \fB__MPN\fP(mu_divappr_q_choose_in)"

.SS "#define mpn_mu_divappr_q_itch   \fB__MPN\fP(mu_divappr_q_itch)"

.SS "#define mpn_mul_1c   \fB__MPN\fP(mul_1c)"

.SS "#define mpn_mul_2   \fB__MPN\fP(mul_2)"

.SS "#define mpn_mul_3   \fB__MPN\fP(mul_3)"

.SS "#define mpn_mul_4   \fB__MPN\fP(mul_4)"

.SS "#define mpn_mul_5   \fB__MPN\fP(mul_5)"

.SS "#define mpn_mul_6   \fB__MPN\fP(mul_6)"

.SS "#define mpn_mul_basecase   \fB__MPN\fP(mul_basecase)"

.SS "#define mpn_mul_fft   \fB__MPN\fP(mul_fft)"

.SS "#define mpn_mul_fft_full   \fB__MPN\fP(mul_fft_full)"

.SS "#define mpn_mullo_basecase   \fB__MPN\fP(mullo_basecase)"

.SS "#define mpn_mullo_n   \fB__MPN\fP(mullo_n)"

.SS "#define mpn_mulmid   \fB__MPN\fP(mulmid)"

.SS "#define mpn_mulmid_basecase   \fB__MPN\fP(mulmid_basecase)"

.SS "#define mpn_mulmid_n   \fB__MPN\fP(mulmid_n)"

.SS "#define mpn_mulmod_bnm1   \fB__MPN\fP(mulmod_bnm1)"

.SS "#define mpn_mulmod_bnm1_next_size   \fB__MPN\fP(mulmod_bnm1_next_size)"

.SS "#define mpn_ni_invertappr   \fB__MPN\fP(ni_invertappr)"

.SS "#define MPN_NORMALIZE(DST, NLIMBS)"
\fBValue:\fP
.PP
.nf
  do {                                   \
    while ((NLIMBS) > 0)                        \
      {                                 \
    if ((DST)[(NLIMBS) - 1] != 0)                   \
      break;                            \
    (NLIMBS)--;                         \
      }                                 \
  } while (0)
.fi
.SS "#define MPN_NORMALIZE_NOT_ZERO(DST, NLIMBS)"
\fBValue:\fP
.PP
.nf
  do {                                   \
    while (1)                               \
      {                                 \
    ASSERT ((NLIMBS) >= 1);                     \
    if ((DST)[(NLIMBS) - 1] != 0)                   \
      break;                            \
    (NLIMBS)--;                         \
      }                                 \
  } while (0)
.fi
.SS "#define mpn_nussbaumer_mul   \fB__MPN\fP(nussbaumer_mul)"

.SS "#define MPN_OVERLAP_P(xp, xsize, yp, ysize)   ((xp) + (xsize) > (yp) && (yp) + (ysize) > (xp))"

.SS "#define mpn_pi1_bdiv_q_1   \fB__MPN\fP(pi1_bdiv_q_1)"

.SS "#define mpn_powlo   \fB__MPN\fP(powlo)"

.SS "#define mpn_powm   \fB__MPN\fP(powm)"

.SS "#define mpn_preinv_divrem_1   \fB__MPN\fP(preinv_divrem_1)"

.SS "#define mpn_preinv_mu_div_qr   \fB__MPN\fP(preinv_mu_div_qr)"

.SS "#define mpn_preinv_mu_div_qr_itch   \fB__MPN\fP(preinv_mu_div_qr_itch)"

.SS "#define mpn_preinv_mu_divappr_q   \fB__MPN\fP(preinv_mu_divappr_q)"

.SS "#define MPN_PTR_SWAP(xp, xs, yp, ys)"
\fBValue:\fP
.PP
.nf
  do {                                   \
    MP_PTR_SWAP (xp, yp);                       \
    MP_SIZE_T_SWAP (xs, ys);                        \
  } while(0)
.fi
.SS "#define mpn_redc_1   \fB__MPN\fP(redc_1)"

.SS "#define mpn_redc_2   \fB__MPN\fP(redc_2)"

.SS "#define mpn_redc_n   \fB__MPN\fP(redc_n)"

.SS "#define mpn_remove   \fB__MPN\fP(remove)"

.SS "#define MPN_REVERSE(dst, src, \fBsize\fP)"
\fBValue:\fP
.PP
.nf
  do {                                   \
    mp_ptr     __dst = (dst);                       \
    mp_size_t  __size = (size);                     \
    mp_srcptr  __src = (src) + __size - 1;              \
    mp_size_t  __i;                         \
    ASSERT ((size) >= 0);                       \
    ASSERT (! MPN_OVERLAP_P (dst, size, src, size));            \
    CRAY_Pragma ("_CRI ivdep");                     \
    for (__i = 0; __i < __size; __i++)                  \
      {                                 \
    *__dst = *__src;                        \
    __dst++;                            \
    __src--;                            \
      }                                 \
  } while (0)
.fi
.SS "#define mpn_rootrem   \fB__MPN\fP(rootrem)"

.SS "#define mpn_rsblsh1_n   \fB__MPN\fP(rsblsh1_n)"

.SS "#define mpn_rsblsh1_n(\fBa\fP, \fBb\fP, \fBc\fP, d)   \fBmpn_rsblsh_n\fP(\fBa\fP,\fBb\fP,\fBc\fP,d,1)"

.SS "#define mpn_rsblsh1_nc   \fB__MPN\fP(rsblsh1_nc)"

.SS "#define mpn_rsblsh2_n   \fB__MPN\fP(rsblsh2_n)"

.SS "#define mpn_rsblsh2_n(\fBa\fP, \fBb\fP, \fBc\fP, d)   \fBmpn_rsblsh_n\fP(\fBa\fP,\fBb\fP,\fBc\fP,d,2)"

.SS "#define mpn_rsblsh2_nc   \fB__MPN\fP(rsblsh2_nc)"

.SS "#define mpn_rsblsh_n   \fB__MPN\fP(rsblsh_n)"

.SS "#define mpn_rsblsh_nc   \fB__MPN\fP(rsblsh_nc)"

.SS "#define mpn_rsh1add_n   \fB__MPN\fP(rsh1add_n)"

.SS "#define mpn_rsh1add_nc   \fB__MPN\fP(rsh1add_nc)"

.SS "#define mpn_rsh1sub_n   \fB__MPN\fP(rsh1sub_n)"

.SS "#define mpn_rsh1sub_nc   \fB__MPN\fP(rsh1sub_nc)"

.SS "#define MPN_SAME_OR_DECR2_P(dst, dsize, src, ssize)   ((dst) >= (src) || ! \fBMPN_OVERLAP_P\fP (dst, dsize, src, ssize))"

.SS "#define MPN_SAME_OR_DECR_P(dst, src, \fBsize\fP)   \fBMPN_SAME_OR_DECR2_P\fP(dst, \fBsize\fP, src, \fBsize\fP)"

.SS "#define MPN_SAME_OR_INCR2_P(dst, dsize, src, ssize)   ((dst) <= (src) || ! \fBMPN_OVERLAP_P\fP (dst, dsize, src, ssize))"

.SS "#define MPN_SAME_OR_INCR_P(dst, src, \fBsize\fP)   \fBMPN_SAME_OR_INCR2_P\fP(dst, \fBsize\fP, src, \fBsize\fP)"

.SS "#define MPN_SAME_OR_SEPARATE2_P(xp, xsize, yp, ysize)   ((xp) == (yp) || ! \fBMPN_OVERLAP_P\fP (xp, xsize, yp, ysize))"

.SS "#define MPN_SAME_OR_SEPARATE_P(xp, yp, \fBsize\fP)   \fBMPN_SAME_OR_SEPARATE2_P\fP(xp, \fBsize\fP, yp, \fBsize\fP)"

.SS "#define mpn_sbpi1_bdiv_q   \fB__MPN\fP(sbpi1_bdiv_q)"

.SS "#define mpn_sbpi1_bdiv_qr   \fB__MPN\fP(sbpi1_bdiv_qr)"

.SS "#define mpn_sbpi1_div_q   \fB__MPN\fP(sbpi1_div_q)"

.SS "#define mpn_sbpi1_div_qr   \fB__MPN\fP(sbpi1_div_qr)"

.SS "#define mpn_sbpi1_divappr_q   \fB__MPN\fP(sbpi1_divappr_q)"

.SS "#define mpn_sec_pi1_div_qr   \fB__MPN\fP(sec_pi1_div_qr)"

.SS "#define mpn_sec_pi1_div_r   \fB__MPN\fP(sec_pi1_div_r)"

.SS "#define mpn_set_str_compute_powtab   \fB__MPN\fP(set_str_compute_powtab)"

.SS "#define MPN_SET_UI(zp, zn, \fBu\fP)"
\fBValue:\fP
.PP
.nf
  (zp)[0] = (u) & GMP_NUMB_MASK;                  \
  (zp)[1] = (u) >> GMP_NUMB_BITS;                   \
  (zn) = ((zp)[1] != 0 ? 2 : (zp)[0] != 0 ? 1 : 0);
.fi
.SS "#define MPN_SIZEINBASE(result, ptr, \fBsize\fP, base)"
\fBValue:\fP
.PP
.nf
  do {                                   \
    int    __lb_base, __cnt;                        \
    size_t __totbits;                           \\
									\\
    ASSERT ((size) >= 0);                       \
    ASSERT ((base) >= 2);                       \
    ASSERT ((base) < numberof (mp_bases));              \
                                    \
    /* Special case for X == 0\&.  */                  \
    if ((size) == 0)                            \
      (result) = 1;                         \
    else                                \
      {                                 \
    /* Calculate the total number of significant bits of X\&.  */  \
    count_leading_zeros (__cnt, (ptr)[(size)-1]);           \
    __totbits = (size_t) (size) * GMP_NUMB_BITS - (__cnt - GMP_NAIL_BITS);\\
									\\
	if (POW2_P (base))                     \
      {                             \
        __lb_base = mp_bases[base]\&.big_base;         \
        (result) = (__totbits + __lb_base - 1) / __lb_base;     \
      }                             \
    else                                \
      {                             \
        DIGITS_IN_BASEGT2_FROM_BITS (result, __totbits, base);  \
      }                             \
      }                                 \
  } while (0)
.fi
.SS "#define MPN_SIZEINBASE_2EXP(result, ptr, \fBsize\fP, base2exp)"
\fBValue:\fP
.PP
.nf
  do {                                      \
    int          __cnt;                             \
    mp_bitcnt_t  __totbits;                         \
    ASSERT ((size) > 0);                            \
    ASSERT ((ptr)[(size)-1] != 0);                      \
    count_leading_zeros (__cnt, (ptr)[(size)-1]);               \
    __totbits = (mp_bitcnt_t) (size) * GMP_NUMB_BITS - (__cnt - GMP_NAIL_BITS); \
    (result) = (__totbits + (base2exp)-1) / (base2exp);             \
  } while (0)
.fi
.SS "#define mpn_sqr_basecase   \fB__MPN\fP(sqr_basecase)"

.SS "#define mpn_sqr_diag_addlsh1   \fB__MPN\fP(sqr_diag_addlsh1)"

.SS "#define mpn_sqr_diagonal   \fB__MPN\fP(sqr_diagonal)"

.SS "#define mpn_sqrlo   \fB__MPN\fP(sqrlo)"

.SS "#define mpn_sqrlo_basecase   \fB__MPN\fP(sqrlo_basecase)"

.SS "#define mpn_sqrmod_bnm1   \fB__MPN\fP(sqrmod_bnm1)"

.SS "#define mpn_sqrmod_bnm1_next_size   \fB__MPN\fP(sqrmod_bnm1_next_size)"

.SS "#define MPN_SRCPTR_SWAP(xp, xs, yp, ys)"
\fBValue:\fP
.PP
.nf
  do {                                    \
    MP_SRCPTR_SWAP (xp, yp);                        \
    MP_SIZE_T_SWAP (xs, ys);                        \
  } while(0)
.fi
.SS "#define MPN_STRIP_LOW_ZEROS_NOT_ZERO(ptr, \fBsize\fP, low)"
\fBValue:\fP
.PP
.nf
  do {                                  \
    ASSERT ((size) >= 1);                       \
    ASSERT ((low) == (ptr)[0]);                     \
                                    \
    while ((low) == 0)                          \
      {                                 \
    (size)--;                           \
    ASSERT ((size) >= 1);                       \
    (ptr)++;                            \
    (low) = *(ptr);                         \
      }                                 \
  } while (0)
.fi
.SS "#define mpn_sub_err1_n   \fB__MPN\fP(sub_err1_n)"

.SS "#define mpn_sub_err2_n   \fB__MPN\fP(sub_err2_n)"

.SS "#define mpn_sub_err3_n   \fB__MPN\fP(sub_err3_n)"

.SS "#define mpn_sub_nc   \fB__MPN\fP(sub_nc)"

.SS "#define mpn_sublsh1_n   \fB__MPN\fP(sublsh1_n)"

.SS "#define mpn_sublsh1_n_ip1(dst, src, \fBn\fP)   \fBmpn_sublsh1_n\fP(dst,dst,src,\fBn\fP)"

.SS "#define mpn_sublsh1_nc   \fB__MPN\fP(sublsh1_nc)"

.SS "#define mpn_sublsh1_nc_ip1   \fB__MPN\fP(sublsh1_nc_ip1)"

.SS "#define mpn_sublsh2_n   \fB__MPN\fP(sublsh2_n)"

.SS "#define mpn_sublsh2_n_ip1(dst, src, \fBn\fP)   \fBmpn_sublsh2_n\fP(dst,dst,src,\fBn\fP)"

.SS "#define mpn_sublsh2_nc   \fB__MPN\fP(sublsh2_nc)"

.SS "#define mpn_sublsh2_nc_ip1   \fB__MPN\fP(sublsh2_nc_ip1)"

.SS "#define mpn_sublsh_n   \fB__MPN\fP(sublsh_n)"

.SS "#define mpn_sublsh_n_ip1   \fB__MPN\fP(sublsh_n_ip1)"

.SS "#define mpn_sublsh_nc_ip1   \fB__MPN\fP(sublsh_nc_ip1)"

.SS "#define mpn_submul_1c   \fB__MPN\fP(submul_1c)"

.SS "#define mpn_toom22_mul   \fB__MPN\fP(toom22_mul)"

.SS "#define mpn_toom22_mul_itch(an, bn)   (2 * ((an) + \fBGMP_NUMB_BITS\fP))"

.SS "#define MPN_TOOM22_MUL_MINSIZE   6"

.SS "#define mpn_toom2_sqr   \fB__MPN\fP(toom2_sqr)"

.SS "#define mpn_toom2_sqr_itch(an)   (2 * ((an) + \fBGMP_NUMB_BITS\fP))"

.SS "#define MPN_TOOM2_SQR_MINSIZE   4"

.SS "#define mpn_toom32_mul   \fB__MPN\fP(toom32_mul)"

.SS "#define MPN_TOOM32_MUL_MINSIZE   10"

.SS "#define mpn_toom33_mul   \fB__MPN\fP(toom33_mul)"

.SS "#define mpn_toom33_mul_itch(an, bn)   (3 * (an) + \fBGMP_NUMB_BITS\fP)"

.SS "#define MPN_TOOM33_MUL_MINSIZE   17"

.SS "#define mpn_toom3_sqr   \fB__MPN\fP(toom3_sqr)"

.SS "#define mpn_toom3_sqr_itch(an)   (3 * (an) + \fBGMP_NUMB_BITS\fP)"

.SS "#define MPN_TOOM3_SQR_MINSIZE   17"

.SS "#define mpn_toom42_mul   \fB__MPN\fP(toom42_mul)"

.SS "#define MPN_TOOM42_MUL_MINSIZE   10"

.SS "#define mpn_toom42_mulmid   \fB__MPN\fP(toom42_mulmid)"

.SS "#define mpn_toom42_mulmid_itch(\fBn\fP)   (3 * (\fBn\fP) + \fBGMP_NUMB_BITS\fP)"

.SS "#define MPN_TOOM42_MULMID_MINSIZE   4"

.SS "#define mpn_toom43_mul   \fB__MPN\fP(toom43_mul)"

.SS "#define MPN_TOOM43_MUL_MINSIZE   25"

.SS "#define mpn_toom44_mul   \fB__MPN\fP(toom44_mul)"

.SS "#define mpn_toom44_mul_itch(an, bn)   (3 * (an) + \fBGMP_NUMB_BITS\fP)"

.SS "#define MPN_TOOM44_MUL_MINSIZE   30"

.SS "#define mpn_toom4_sqr   \fB__MPN\fP(toom4_sqr)"

.SS "#define mpn_toom4_sqr_itch(an)   (3 * (an) + \fBGMP_NUMB_BITS\fP)"

.SS "#define MPN_TOOM4_SQR_MINSIZE   30"

.SS "#define mpn_toom52_mul   \fB__MPN\fP(toom52_mul)"

.SS "#define mpn_toom53_mul   \fB__MPN\fP(toom53_mul)"

.SS "#define MPN_TOOM53_MUL_MINSIZE   17"

.SS "#define mpn_toom54_mul   \fB__MPN\fP(toom54_mul)"

.SS "#define MPN_TOOM54_MUL_MINSIZE   31"

.SS "#define mpn_toom62_mul   \fB__MPN\fP(toom62_mul)"

.SS "#define mpn_toom63_mul   \fB__MPN\fP(toom63_mul)"

.SS "#define MPN_TOOM63_MUL_MINSIZE   49"

.SS "#define mpn_toom6_mul_n_itch(\fBn\fP)"
\fBValue:\fP
.PP
.nf
  (((n) - MUL_TOOM6H_MIN)*2 +                       \
   MAX(MUL_TOOM6H_MIN*2 + GMP_NUMB_BITS*6,              \
       mpn_toom44_mul_itch(MUL_TOOM6H_MIN,MUL_TOOM6H_MIN)))
.fi
.SS "#define mpn_toom6_sqr   \fB__MPN\fP(toom6_sqr)"

.SS "#define mpn_toom6_sqr_itch(\fBn\fP)"
\fBValue:\fP
.PP
.nf
  (((n) - SQR_TOOM6_THRESHOLD)*2 +                    \
   MAX(SQR_TOOM6_THRESHOLD*2 + GMP_NUMB_BITS*6,             \
       mpn_toom4_sqr_itch(SQR_TOOM6_THRESHOLD)))
.fi
.SS "#define MPN_TOOM6_SQR_MINSIZE   46"

.SS "#define mpn_toom6h_mul   \fB__MPN\fP(toom6h_mul)"

.SS "#define MPN_TOOM6H_MUL_MINSIZE   46"

.SS "#define mpn_toom8_mul_n_itch(\fBn\fP)"
\fBValue:\fP
.PP
.nf
  ((((n)*15)>>3) - ((MUL_TOOM8H_MIN*15)>>3) +              \
   MAX(((MUL_TOOM8H_MIN*15)>>3) + GMP_NUMB_BITS*6,          \
       mpn_toom6_mul_n_itch(MUL_TOOM8H_MIN)))
.fi
.SS "#define mpn_toom8_sqr   \fB__MPN\fP(toom8_sqr)"

.SS "#define mpn_toom8_sqr_itch(\fBn\fP)"
\fBValue:\fP
.PP
.nf
  ((((n)*15)>>3) - ((SQR_TOOM8_THRESHOLD*15)>>3) +            \
   MAX(((SQR_TOOM8_THRESHOLD*15)>>3) + GMP_NUMB_BITS*6,         \
       mpn_toom6_sqr_itch(SQR_TOOM8_THRESHOLD)))
.fi
.SS "#define MPN_TOOM8_SQR_MINSIZE   86"

.SS "#define mpn_toom8h_mul   \fB__MPN\fP(toom8h_mul)"

.SS "#define MPN_TOOM8H_MUL_MINSIZE   86"

.SS "#define mpn_toom_couple_handling   \fB__MPN\fP(toom_couple_handling)"

.SS "#define mpn_toom_eval_dgr3_pm1   \fB__MPN\fP(toom_eval_dgr3_pm1)"

.SS "#define mpn_toom_eval_dgr3_pm2   \fB__MPN\fP(toom_eval_dgr3_pm2)"

.SS "#define mpn_toom_eval_pm1   \fB__MPN\fP(toom_eval_pm1)"

.SS "#define mpn_toom_eval_pm2   \fB__MPN\fP(toom_eval_pm2)"

.SS "#define mpn_toom_eval_pm2exp   \fB__MPN\fP(toom_eval_pm2exp)"

.SS "#define mpn_toom_eval_pm2rexp   \fB__MPN\fP(toom_eval_pm2rexp)"

.SS "#define mpn_toom_interpolate_12pts   \fB__MPN\fP(toom_interpolate_12pts)"

.SS "#define mpn_toom_interpolate_16pts   \fB__MPN\fP(toom_interpolate_16pts)"

.SS "#define mpn_toom_interpolate_5pts   \fB__MPN\fP(toom_interpolate_5pts)"

.SS "#define mpn_toom_interpolate_6pts   \fB__MPN\fP(toom_interpolate_6pts)"

.SS "#define mpn_toom_interpolate_7pts   \fB__MPN\fP(toom_interpolate_7pts)"

.SS "#define mpn_toom_interpolate_8pts   \fB__MPN\fP(toom_interpolate_8pts)"

.SS "#define mpn_trialdiv   \fB__MPN\fP(trialdiv)"

.SS "#define mpn_udiv_w_sdiv   \fB__MPN\fP(udiv_w_sdiv)"

.SS "#define MPN_ZERO(dst, \fBn\fP)"
\fBValue:\fP
.PP
.nf
  do {                                   \
    ASSERT ((n) >= 0);                          \
    if ((n) != 0)                           \
      MPN_FILL (dst, n, CNST_LIMB (0));                 \
  } while (0)
.fi
.SS "#define MPQ_CHECK_FORMAT(q)"
\fBValue:\fP
.PP
.nf
  do {                                   \
    MPZ_CHECK_FORMAT (mpq_numref (q));                  \
    MPZ_CHECK_FORMAT (mpq_denref (q));                  \
    ASSERT_ALWAYS (SIZ(mpq_denref(q)) >= 1);                \\
									\\
    if (SIZ(mpq_numref(q)) == 0)                    \
      {                                 \
    /* should have zero as 0/1 */                   \
    ASSERT_ALWAYS (SIZ(mpq_denref(q)) == 1              \
               && PTR(mpq_denref(q))[0] == 1);          \
      }                                 \
    else                                \
      {                                 \
    /* should have no common factors */             \
    mpz_t  g;                           \
    mpz_init (g);                           \
    mpz_gcd (g, mpq_numref(q), mpq_denref(q));          \
    ASSERT_ALWAYS (mpz_cmp_ui (g, 1) == 0);             \
    mpz_clear (g);                          \
      }                                 \
  } while (0)
.fi
.SS "#define MPQ_PTR_SWAP(\fBx\fP, \fBy\fP)"
\fBValue:\fP
.PP
.nf
  do {                                                                  \
    mpq_ptr __mpq_ptr_swap__tmp = (x);                  \
    (x) = (y);                                                          \
    (y) = __mpq_ptr_swap__tmp;                      \
  } while (0)
.fi
.SS "#define MPQ_SRCPTR_SWAP(\fBx\fP, \fBy\fP)"
\fBValue:\fP
.PP
.nf
  do {                                                                  \
    mpq_srcptr __mpq_srcptr_swap__tmp = (x);                            \
    (x) = (y);                                                          \
    (y) = __mpq_srcptr_swap__tmp;                                       \
  } while (0)
.fi
.SS "#define mpz_aorsmul_1(w, \fBu\fP, v, \fBsub\fP)   \fB__gmpz_aorsmul_1\fP (\fBREGPARM_3_1\fP (w, \fBu\fP, v, \fBsub\fP))"

.SS "#define MPZ_CHECK_FORMAT(\fBz\fP)"
\fBValue:\fP
.PP
.nf
  do {                                   \
    ASSERT_ALWAYS (SIZ(z) == 0 || PTR(z)[ABSIZ(z) - 1] != 0);       \
    ASSERT_ALWAYS (ALLOC(z) >= ABSIZ(z));               \
    ASSERT_ALWAYS_MPN (PTR(z), ABSIZ(z));               \
  } while (0)
.fi
.SS "#define mpz_divexact_gcd   __gmpz_divexact_gcd"

.SS "#define MPZ_EQUAL_1_P(\fBz\fP)   (\fBSIZ\fP(\fBz\fP)==1 && \fBPTR\fP(\fBz\fP)[0] == 1)"

.SS "#define MPZ_FAKE_UI(\fBz\fP, zp, \fBu\fP)"
\fBValue:\fP
.PP
.nf
  (zp)[0] = (u) & GMP_NUMB_MASK;                   \
  (zp)[1] = (u) >> GMP_NUMB_BITS;                   \
  SIZ (z) = ((zp)[1] != 0 ? 2 : (zp)[0] != 0 ? 1 : 0);          \
  PTR (z) = (zp);                           \
  ASSERT_CODE (ALLOC (z) = 2);
.fi
.SS "#define mpz_inp_str_nowhite   __gmpz_inp_str_nowhite"

.SS "#define mpz_n_pow_ui   __gmpz_n_pow_ui"

.SS "#define MPZ_NEWALLOC(\fBz\fP, \fBn\fP)"
\fBValue:\fP
.PP
.nf
             (UNLIKELY ((n) > ALLOC(z))           \
               ? (mp_ptr) _mpz_newalloc(z,n)        \
               : PTR(z))
.fi
.SS "#define mpz_oddfac_1   __gmpz_oddfac_1"

.SS "#define mpz_prodlimbs   __gmpz_prodlimbs"

.SS "#define MPZ_PTR_SWAP(\fBx\fP, \fBy\fP)"
\fBValue:\fP
.PP
.nf
  do {                                    \
    mpz_ptr __mpz_ptr_swap__tmp = (x);                  \
    (x) = (y);                              \
    (y) = __mpz_ptr_swap__tmp;                      \
  } while (0)
.fi
.SS "#define MPZ_REALLOC(\fBz\fP, \fBn\fP)"
\fBValue:\fP
.PP
.nf
             (UNLIKELY ((n) > ALLOC(z))            \
              ? (mp_ptr) _mpz_realloc(z,n)          \
              : PTR(z))
.fi
.SS "#define MPZ_SRCPTR_SWAP(\fBx\fP, \fBy\fP)"
\fBValue:\fP
.PP
.nf
  do {                                 \
    mpz_srcptr __mpz_srcptr_swap__tmp = (x);                \
    (x) = (y);                              \
    (y) = __mpz_srcptr_swap__tmp;                   \
  } while (0)
.fi
.SS "#define MPZ_TMP_INIT(\fBX\fP, NLIMBS)"
\fBValue:\fP
.PP
.nf
  do {                                   \
    mpz_ptr __x = (X);                          \
    ASSERT ((NLIMBS) >= 1);                     \
    __x->_mp_alloc = (NLIMBS);                      \
    __x->_mp_d = TMP_ALLOC_LIMBS (NLIMBS);              \
  } while (0)
.fi
.SS "#define MU_BDIV_Q_THRESHOLD   2000"

.SS "#define MU_BDIV_QR_THRESHOLD   2000"

.SS "#define MU_DIV_QR_THRESHOLD   2000"

.SS "#define MU_DIVAPPR_Q_THRESHOLD   2000"

.SS "#define MUL_FFT_MODF_THRESHOLD   (\fBMUL_TOOM33_THRESHOLD\fP * 3)"

.SS "#define MUL_FFT_TABLE"
\fBValue:\fP
.PP
.nf
  { MUL_TOOM33_THRESHOLD * 4,   /* k=5 */              \
    MUL_TOOM33_THRESHOLD * 8,   /* k=6 */               \
    MUL_TOOM33_THRESHOLD * 16,  /* k=7 */               \
    MUL_TOOM33_THRESHOLD * 32,  /* k=8 */               \
    MUL_TOOM33_THRESHOLD * 96,  /* k=9 */               \
    MUL_TOOM33_THRESHOLD * 288, /* k=10 */              \
    0 }
.fi
.SS "#define MUL_FFT_THRESHOLD   (\fBMUL_FFT_MODF_THRESHOLD\fP * 10)"

.SS "#define MUL_TO_MULMOD_BNM1_FOR_2NXN_THRESHOLD   (\fBINV_MULMOD_BNM1_THRESHOLD\fP/2)"

.SS "#define MUL_TOOM22_THRESHOLD   30"

.SS "#define MUL_TOOM22_THRESHOLD_LIMIT   \fBMUL_TOOM22_THRESHOLD\fP"

.SS "#define MUL_TOOM32_TO_TOOM43_THRESHOLD   100"

.SS "#define MUL_TOOM32_TO_TOOM53_THRESHOLD   110"

.SS "#define MUL_TOOM33_THRESHOLD   100"

.SS "#define MUL_TOOM33_THRESHOLD_LIMIT   \fBMUL_TOOM33_THRESHOLD\fP"

.SS "#define MUL_TOOM42_TO_TOOM53_THRESHOLD   100"

.SS "#define MUL_TOOM42_TO_TOOM63_THRESHOLD   110"

.SS "#define MUL_TOOM43_TO_TOOM54_THRESHOLD   150"

.SS "#define MUL_TOOM44_THRESHOLD   300"

.SS "#define MUL_TOOM6H_MIN"
\fBValue:\fP
.PP
.nf
  ((MUL_TOOM6H_THRESHOLD > MUL_TOOM44_THRESHOLD) ?           \
    MUL_TOOM6H_THRESHOLD : MUL_TOOM44_THRESHOLD)
.fi
.SS "#define MUL_TOOM6H_THRESHOLD   350"

.SS "#define MUL_TOOM8H_MIN"
\fBValue:\fP
.PP
.nf
  ((MUL_TOOM8H_THRESHOLD > MUL_TOOM6H_MIN) ?               \
    MUL_TOOM8H_THRESHOLD : MUL_TOOM6H_MIN)
.fi
.SS "#define MUL_TOOM8H_THRESHOLD   450"

.SS "#define MULLO_BASECASE_THRESHOLD   0  /* never use \fBmpn_mul_basecase\fP */"

.SS "#define MULLO_BASECASE_THRESHOLD_LIMIT   \fBMULLO_BASECASE_THRESHOLD\fP"

.SS "#define MULLO_DC_THRESHOLD   (2*\fBMUL_TOOM22_THRESHOLD\fP)"

.SS "#define MULLO_MUL_N_THRESHOLD   (2*\fBMUL_FFT_THRESHOLD\fP)"

.SS "#define MULMID_TOOM42_THRESHOLD   \fBMUL_TOOM22_THRESHOLD\fP"

.SS "#define MULMOD_BNM1_THRESHOLD   16"

.SS "#define MUPI_DIV_QR_THRESHOLD   200"

.SS "#define NEG_CAST(\fBT\fP, \fBx\fP)   (\- (\fB__GMP_CAST\fP (\fBT\fP, (\fBx\fP) + 1) \- 1))"

.SS "#define NEG_MOD(r, \fBa\fP, d)"
\fBValue:\fP
.PP
.nf
  do {                                   \
    ASSERT ((d) != 0);                          \
    ASSERT_LIMB (a);                            \
    ASSERT_LIMB (d);                            \\
									\\
    if ((a) <= (d))                         \
      {                                 \
    /* small a is reasonably likely */              \
    (r) = (d) - (a);                        \
      }                                 \
    else                                \
      {                                 \
    unsigned   __twos;                      \
    mp_limb_t  __dnorm;                     \
    count_leading_zeros (__twos, d);                \
    __twos -= GMP_NAIL_BITS;                    \
    __dnorm = (d) << __twos;                    \
    (r) = ((a) <= __dnorm ? __dnorm : 2*__dnorm) - (a);     \
      }                                 \\
									\\
    ASSERT_LIMB (r);                            \
  } while (0)
.fi
.SS "#define NUM(\fBx\fP)   \fBmpq_numref\fP(\fBx\fP)"

.SS "#define numberof(\fBx\fP)   (sizeof (\fBx\fP) / sizeof ((\fBx\fP)[0]))"

.SS "#define popc_limb(result, input)"
\fBValue:\fP
.PP
.nf
  do {                                  \
    mp_limb_t  __x = (input);                       \
    __x -= (__x >> 1) & MP_LIMB_T_MAX/3;                \
    __x = ((__x >> 2) & MP_LIMB_T_MAX/5) + (__x & MP_LIMB_T_MAX/5); \
    __x = ((__x >> 4) + __x) & MP_LIMB_T_MAX/17;            \
    __x = ((__x >> 8) + __x);                       \
    __x = ((__x >> 16) + __x);                      \
    __x = ((__x >> 32) + __x);                      \
    (result) = __x & 0xff;                      \
  } while (0)
.fi
.SS "#define POW2_P(\fBn\fP)   (((\fBn\fP) & ((\fBn\fP) \- 1)) == 0)"

.SS "#define PP_FIRST_OMITTED   3"

.SS "#define PREC(\fBx\fP)   ((\fBx\fP)\->_mp_prec)"

.SS "#define PREINV_MOD_1_TO_MOD_1_THRESHOLD   10"

.SS "#define PTR(\fBx\fP)   ((\fBx\fP)\->_mp_d)"

.SS "#define RANDS"
\fBValue:\fP
.PP
.nf
  ((__gmp_rands_initialized ? 0                        \
    : (__gmp_rands_initialized = 1,                 \
       __gmp_randinit_mt_noseed (__gmp_rands), 0)),         \
   __gmp_rands)
.fi
.SS "#define RANDS_CLEAR()"
\fBValue:\fP
.PP
.nf
  do {                                 \
    if (__gmp_rands_initialized)                    \
      {                                 \
    __gmp_rands_initialized = 0;                    \
    gmp_randclear (__gmp_rands);                    \
      }                                 \
  } while (0)
.fi
.SS "#define REDC_1_TO_REDC_2_THRESHOLD   15"

.SS "#define REDC_2_TO_REDC_N_THRESHOLD   100"

.SS "#define REGPARM_2_1(\fBa\fP, \fBb\fP, \fBx\fP)   \fBa\fP,\fBb\fP,\fBx\fP"

.SS "#define REGPARM_3_1(\fBa\fP, \fBb\fP, \fBc\fP, \fBx\fP)   \fBa\fP,\fBb\fP,\fBc\fP,\fBx\fP"

.SS "#define REGPARM_ATTR(\fBn\fP)"

.SS "#define RNG_FNPTR(rstate)   ((rstate)\->_mp_algdata\&._mp_lc)"

.SS "#define RNG_STATE(rstate)   ((rstate)\->_mp_seed\->_mp_d)"

.SS "#define ROUND_UP_MULTIPLE(\fBa\fP, \fBm\fP)"
\fBValue:\fP
.PP
.nf
  (POW2_P(m) ? (a) + (-(a))%(m)         \
   : (a)+(m)-1 - (((a)+(m)-1) % (m)))
.fi
.SS "#define SET_STR_DC_THRESHOLD   750"

.SS "#define SET_STR_PRECOMPUTE_THRESHOLD   2000"

.SS "#define SHRT_HIGHBIT   SHRT_MIN"

.SS "#define SIEVESIZE   512		/* FIXME: Allow \fBgmp_init_primesieve\fP to choose */"

.SS "#define SIZ(\fBx\fP)   ((\fBx\fP)\->_mp_size)"

.SS "#define SQR_BASECASE_THRESHOLD   0  /* never use \fBmpn_mul_basecase\fP */"

.SS "#define SQR_FFT_MODF_THRESHOLD   (\fBSQR_TOOM3_THRESHOLD\fP * 3)"

.SS "#define SQR_FFT_TABLE"
\fBValue:\fP
.PP
.nf
  { SQR_TOOM3_THRESHOLD * 4,   /* k=5 */              \
    SQR_TOOM3_THRESHOLD * 8,   /* k=6 */                \
    SQR_TOOM3_THRESHOLD * 16,  /* k=7 */                \
    SQR_TOOM3_THRESHOLD * 32,  /* k=8 */                \
    SQR_TOOM3_THRESHOLD * 96,  /* k=9 */                \
    SQR_TOOM3_THRESHOLD * 288, /* k=10 */               \
    0 }
.fi
.SS "#define SQR_FFT_THRESHOLD   (\fBSQR_FFT_MODF_THRESHOLD\fP * 10)"

.SS "#define SQR_TOOM2_THRESHOLD   50"

.SS "#define SQR_TOOM3_THRESHOLD   120"

.SS "#define SQR_TOOM3_THRESHOLD_LIMIT   \fBSQR_TOOM3_THRESHOLD\fP"

.SS "#define SQR_TOOM4_THRESHOLD   400"

.SS "#define SQR_TOOM6_THRESHOLD   \fBMUL_TOOM6H_THRESHOLD\fP"

.SS "#define SQR_TOOM8_THRESHOLD   \fBMUL_TOOM8H_THRESHOLD\fP"

.SS "#define SQRLO_BASECASE_THRESHOLD   0  /* never use \fBmpn_sqr_basecase\fP */"

.SS "#define SQRLO_BASECASE_THRESHOLD_LIMIT   \fBSQRLO_BASECASE_THRESHOLD\fP"

.SS "#define SQRLO_DC_THRESHOLD   (\fBMULLO_DC_THRESHOLD\fP)"

.SS "#define SQRLO_DC_THRESHOLD_LIMIT   \fBSQRLO_DC_THRESHOLD\fP"

.SS "#define SQRLO_SQR_THRESHOLD   (\fBMULLO_MUL_N_THRESHOLD\fP)"

.SS "#define SQRMOD_BNM1_THRESHOLD   16"

.SS "#define SQRT_OF_NEGATIVE   \fB__gmp_sqrt_of_negative\fP ()"

.SS "#define SUBC_LIMB(cout, w, \fBx\fP, \fBy\fP)"
\fBValue:\fP
.PP
.nf
  do {                                  \
    mp_limb_t  __x = (x);                       \
    mp_limb_t  __y = (y);                       \
    mp_limb_t  __w = __x - __y;                     \
    (w) = __w;                              \
    (cout) = __w > __x;                         \
  } while (0)
.fi
.SS "#define TARGET_REGISTER_STARVED   0"

.SS "#define TMP_ALLOC(\fBn\fP)   (\fBLIKELY\fP ((\fBn\fP) <= 0x7f00) ? \fBTMP_SALLOC\fP(\fBn\fP) : \fBTMP_BALLOC\fP(\fBn\fP))"

.SS "#define TMP_ALLOC_LIMBS(\fBn\fP)   \fBTMP_ALLOC_TYPE\fP(\fBn\fP,\fBmp_limb_t\fP)"

.SS "#define TMP_ALLOC_LIMBS_2(xp, xsize, yp, ysize)"
\fBValue:\fP
.PP
.nf
  do {                                  \
    if (WANT_TMP_DEBUG)                         \
      {                                 \
    (xp) = TMP_ALLOC_LIMBS (xsize);                 \
    (yp) = TMP_ALLOC_LIMBS (ysize);                 \
      }                                 \
    else                                \
      {                                 \
    (xp) = TMP_ALLOC_LIMBS ((xsize) + (ysize));         \
    (yp) = (xp) + (xsize);                      \
      }                                 \
  } while (0)
.fi
.SS "#define TMP_ALLOC_LIMBS_3(xp, xsize, yp, ysize, zp, zsize)"
\fBValue:\fP
.PP
.nf
  do {                                    \
    if (WANT_TMP_DEBUG)                         \
      {                                 \
    (xp) = TMP_ALLOC_LIMBS (xsize);                 \
    (yp) = TMP_ALLOC_LIMBS (ysize);                 \
    (zp) = TMP_ALLOC_LIMBS (zsize);                 \
      }                                 \
    else                                \
      {                                 \
    (xp) = TMP_ALLOC_LIMBS ((xsize) + (ysize) + (zsize));       \
    (yp) = (xp) + (xsize);                      \
    (zp) = (yp) + (ysize);                      \
      }                                 \
  } while (0)
.fi
.SS "#define TMP_ALLOC_MP_PTRS(\fBn\fP)   \fBTMP_ALLOC_TYPE\fP(\fBn\fP,\fBmp_ptr\fP)"

.SS "#define TMP_ALLOC_TYPE(\fBn\fP, type)   ((type *) \fBTMP_ALLOC\fP ((\fBn\fP) * sizeof (type)))"

.SS "#define TMP_BALLOC(\fBn\fP)   \fB__gmp_tmp_reentrant_alloc\fP (&__tmp_marker, \fBn\fP)"

.SS "#define TMP_BALLOC_LIMBS(\fBn\fP)   \fBTMP_BALLOC_TYPE\fP(\fBn\fP,\fBmp_limb_t\fP)"

.SS "#define TMP_BALLOC_MP_PTRS(\fBn\fP)   \fBTMP_BALLOC_TYPE\fP(\fBn\fP,\fBmp_ptr\fP)"

.SS "#define TMP_BALLOC_TYPE(\fBn\fP, type)   ((type *) \fBTMP_BALLOC\fP ((\fBn\fP) * sizeof (type)))"

.SS "#define TMP_DECL   struct \fBtmp_reentrant_t\fP *__tmp_marker"

.SS "#define TMP_FREE"
\fBValue:\fP
.PP
.nf
  do {                                    \
    if (UNLIKELY (__tmp_marker != 0))                   \
      __gmp_tmp_reentrant_free (__tmp_marker);              \
  } while (0)
.fi
.SS "#define TMP_MARK   __tmp_marker = 0"

.SS "#define TMP_SALLOC(\fBn\fP)   alloca(\fBn\fP)"

.SS "#define TMP_SALLOC_LIMBS(\fBn\fP)   \fBTMP_SALLOC_TYPE\fP(\fBn\fP,\fBmp_limb_t\fP)"

.SS "#define TMP_SALLOC_MP_PTRS(\fBn\fP)   \fBTMP_SALLOC_TYPE\fP(\fBn\fP,\fBmp_ptr\fP)"

.SS "#define TMP_SALLOC_TYPE(\fBn\fP, type)   ((type *) \fBTMP_SALLOC\fP ((\fBn\fP) * sizeof (type)))"

.SS "#define TMP_SDECL"

.SS "#define TMP_SFREE"

.SS "#define TMP_SMARK"

.SS "#define udiv_qr_3by2(q, \fBr1\fP, \fBr0\fP, n2, n1, n0, d1, d0, dinv)"
\fBValue:\fP
.PP
.nf
  do {                                    \
    mp_limb_t _q0, _t1, _t0, _mask;                 \
    umul_ppmm ((q), _q0, (n2), (dinv));                 \
    add_ssaaaa ((q), _q0, (q), _q0, (n2), (n1));            \
                                    \
    /* Compute the two most significant limbs of n - q'd */     \
    (r1) = (n1) - (d1) * (q);                       \
    sub_ddmmss ((r1), (r0), (r1), (n0), (d1), (d0));            \
    umul_ppmm (_t1, _t0, (d0), (q));                    \
    sub_ddmmss ((r1), (r0), (r1), (r0), _t1, _t0);          \
    (q)++;                              \
                                    \
    /* Conditionally adjust q and the remainders */         \
    _mask = - (mp_limb_t) ((r1) >= _q0);                \
    (q) += _mask;                           \
    add_ssaaaa ((r1), (r0), (r1), (r0), _mask & (d1), _mask & (d0));    \
    if (UNLIKELY ((r1) >= (d1)))                    \
      {                                 \
    if ((r1) > (d1) || (r0) >= (d0))                \
      {                             \
        (q)++;                          \
        sub_ddmmss ((r1), (r0), (r1), (r0), (d1), (d0));        \
      }                             \
      }                                 \
  } while (0)
.fi
.SS "#define udiv_qrnnd_preinv(q, r, nh, nl, d, di)"
\fBValue:\fP
.PP
.nf
  do {                                    \
    mp_limb_t _qh, _ql, _r, _mask;                  \
    umul_ppmm (_qh, _ql, (nh), (di));                   \
    if (__builtin_constant_p (nl) && (nl) == 0)             \
      {                                 \
    _qh += (nh) + 1;                        \
    _r = - _qh * (d);                       \
    _mask = -(mp_limb_t) (_r > _ql); /* both > and >= are OK */ \
    _qh += _mask;                           \
    _r += _mask & (d);                      \
      }                                 \
    else                                \
      {                                 \
    add_ssaaaa (_qh, _ql, _qh, _ql, (nh) + 1, (nl));        \
    _r = (nl) - _qh * (d);                      \
    _mask = -(mp_limb_t) (_r > _ql); /* both > and >= are OK */ \
    _qh += _mask;                           \
    _r += _mask & (d);                      \
    if (UNLIKELY (_r >= (d)))                   \
      {                             \
        _r -= (d);                          \
        _qh++;                          \
      }                             \
      }                                 \
    (r) = _r;                               \
    (q) = _qh;                              \
  } while (0)
.fi
.SS "#define udiv_rnnd_preinv(r, nh, nl, d, di)"
\fBValue:\fP
.PP
.nf
  do {                                    \
    mp_limb_t _qh, _ql, _r, _mask;                  \
    umul_ppmm (_qh, _ql, (nh), (di));                   \
    if (__builtin_constant_p (nl) && (nl) == 0)             \
      {                                 \
    _r = ~(_qh + (nh)) * (d);                   \
    _mask = -(mp_limb_t) (_r > _ql); /* both > and >= are OK */ \
    _r += _mask & (d);                      \
      }                                 \
    else                                \
      {                                 \
    add_ssaaaa (_qh, _ql, _qh, _ql, (nh) + 1, (nl));        \
    _r = (nl) - _qh * (d);                      \
    _mask = -(mp_limb_t) (_r > _ql); /* both > and >= are OK */ \
    _r += _mask & (d);                      \
    if (UNLIKELY (_r >= (d)))                   \
      _r -= (d);                            \
      }                                 \
    (r) = _r;                               \
  } while (0)
.fi
.SS "#define UINT_HIGHBIT   (UINT_MAX ^ ((unsigned) UINT_MAX >> 1))"

.SS "#define ULONG_HIGHBIT   (ULONG_MAX ^ ((unsigned long) ULONG_MAX >> 1))"

.SS "#define ULONG_PARITY(\fBp\fP, \fBn\fP)"
\fBValue:\fP
.PP
.nf
  do {                                  \
    unsigned long  __n = (n);                       \
    int  __p = 0;                           \
    do                                  \
      {                                 \
    __p ^= 0x96696996L >> (__n & 0x1F);             \
    __n >>= 5;                          \
      }                                 \
    while (__n != 0);                           \
                                    \
    (p) = __p & 1;                          \
  } while (0)
.fi
.SS "#define UNLIKELY(cond)   \fB__GMP_UNLIKELY\fP(cond)"

.SS "#define USE_LEADING_REGPARM   0"

.SS "#define USE_PREINV_DIVREM_1   1"

.SS "#define USHRT_HIGHBIT   (USHRT_MAX ^ ((unsigned short) USHRT_MAX >> 1))"

.SS "#define va_copy(dst, src)   do { memcpy (&(dst), &(src), sizeof (va_list)); } while (0)"

.SS "#define W_TYPE_SIZE   \fBGMP_LIMB_BITS\fP"

.SS "#define WANT_TMP_DEBUG   0"

.SH "Typedef Documentation"
.PP 
.SS "typedef unsigned int UDItype __attribute__((mode(DI)))"

.SS "typedef void gcd_subdiv_step_hook(void *, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, int)"

.SS "typedef int(* gmp_doscan_get_t) (void *)"

.SS "typedef int(* gmp_doscan_scan_t) (void *, \fBconst\fP char *,\&.\&.\&.)"

.SS "typedef void*(* gmp_doscan_step_t) (void *, int)"

.SS "typedef int(* gmp_doscan_unget_t) (int, void *)"

.SS "typedef intptr_t \fBgmp_intptr_t\fP"

.SS "typedef \fB__gmp_randstate_struct\fP* \fBgmp_randstate_ptr\fP"

.SS "typedef uint_least32_t \fBgmp_uint_least32_t\fP"

.SS "typedef struct \fBpowers\fP \fBpowers_t\fP"

.SS "typedef unsigned int \fBUHWtype\fP"

.SS "typedef \fBmp_limb_t\fP \fBUWtype\fP"

.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBtoom6_flags\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fItoom6_all_pos \fP\fP
.TP
\fB\fItoom6_vm1_neg \fP\fP
.TP
\fB\fItoom6_vm2_neg \fP\fP
.SS "enum \fBtoom7_flags\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fItoom7_w1_neg \fP\fP
.TP
\fB\fItoom7_w3_neg \fP\fP
.SH "Function Documentation"
.PP 
.SS "\fB__GMP_DECLSPEC\fP void __gmp_assert_fail (\fBconst\fP char *, int, \fBconst\fP char *)"

.SS "\fB__GMP_DECLSPEC\fP void __gmp_assert_header (\fBconst\fP char *, int)"

.SS "\fB__GMP_DECLSPEC\fP void* __gmp_default_allocate (size_t)"

.SS "\fB__GMP_DECLSPEC\fP void __gmp_default_free (void *, size_t)"

.SS "\fB__GMP_DECLSPEC\fP void* __gmp_default_reallocate (void *, size_t, size_t)"

.SS "\fB__GMP_DECLSPEC\fP void __gmp_divide_by_zero (void)"

.SS "\fB__GMP_DECLSPEC\fP void __gmp_exception (int)"

.SS "\fB__GMP_DECLSPEC\fP int __gmp_extract_double (\fBmp_ptr\fP, double)"

.SS "\fB__GMP_DECLSPEC\fP void __gmp_invalid_operation (void)"

.SS "\fB__GMP_DECLSPEC\fP void __gmp_randinit_mt_noseed (\fBgmp_randstate_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP void __gmp_sqrt_of_negative (void)"

.SS "\fB__GMP_DECLSPEC\fP void* __gmp_tmp_reentrant_alloc (struct \fBtmp_reentrant_t\fP **, size_t)"

.SS "\fB__GMP_DECLSPEC\fP void __gmp_tmp_reentrant_free (struct \fBtmp_reentrant_t\fP *)"

.SS "\fB__GMP_DECLSPEC\fP void __gmpn_cpuvec_init (void)"

.SS "\fB__GMP_DECLSPEC\fP void __gmpz_aorsmul_1 (\fBREGPARM_3_1\fP(\fBmpz_ptr\fP, \fBmpz_srcptr\fP, \fBmp_limb_t\fP, \fBmp_size_t\fP))"

.SS "\fB__GMP_DECLSPEC\fP void gmp_init_primesieve (\fBgmp_primesieve_t\fP *)"

.SS "\fB__GMP_DECLSPEC\fP unsigned long int gmp_nextprime (\fBgmp_primesieve_t\fP *)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP gmp_primesieve (\fBmp_ptr\fP, \fBmp_limb_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_add_err1_n (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_add_err2_n (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_add_err3_n (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_add_n_sub_n (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_add_n_sub_nc (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_add_nc (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_addaddmul_1msb0 (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP, \fBmp_limb_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_addlsh1_n (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_addlsh1_nc (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_addlsh2_n (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_addlsh2_nc (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_addlsh_n (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, unsigned int)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_addlsh_nc (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, unsigned int, \fBmp_limb_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_addmul_1c (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP, \fBmp_limb_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_addmul_2 (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_addmul_2s (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_addmul_3 (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_addmul_4 (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_addmul_5 (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_addmul_6 (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_addmul_7 (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_addmul_8 (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP void mpn_bc_mulmod_bnm1 (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_size_t\fP mpn_bc_set_str (\fBmp_ptr\fP, \fBconst\fP unsigned char *, size_t, int)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_bdiv_dbm1c (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP, \fBmp_limb_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP void mpn_bdiv_q (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_bdiv_q_1 (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_size_t\fP mpn_bdiv_q_itch (\fBmp_size_t\fP, \fBmp_size_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_bdiv_qr (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_size_t\fP mpn_bdiv_qr_itch (\fBmp_size_t\fP, \fBmp_size_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP void mpn_binvert (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_size_t\fP mpn_binvert_itch (\fBmp_size_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP void mpn_broot (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP void mpn_broot_invm1 (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP void mpn_brootinv (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP, \fBmp_ptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP void mpn_bsqrt (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_bitcnt_t\fP, \fBmp_ptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP int mpn_bsqrtinv (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_bitcnt_t\fP, \fBmp_ptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP void mpn_copyd (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP void mpn_copyi (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_size_t\fP mpn_dc_set_str (\fBmp_ptr\fP, \fBconst\fP unsigned char *, size_t, \fBconst\fP \fBpowers_t\fP *, \fBmp_ptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP void mpn_dcpi1_bdiv_q (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP void mpn_dcpi1_bdiv_q_n (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP, \fBmp_ptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_size_t\fP mpn_dcpi1_bdiv_q_n_itch (\fBmp_size_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_dcpi1_bdiv_qr (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_dcpi1_bdiv_qr_n (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP, \fBmp_ptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_size_t\fP mpn_dcpi1_bdiv_qr_n_itch (\fBmp_size_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_dcpi1_div_q (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBgmp_pi1_t\fP *)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_dcpi1_div_qr (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBgmp_pi1_t\fP *)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_dcpi1_div_qr_n (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBgmp_pi1_t\fP *, \fBmp_ptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_dcpi1_divappr_q (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBgmp_pi1_t\fP *)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_dcpi1_divappr_q_n (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBgmp_pi1_t\fP *, \fBmp_ptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP void mpn_div_q (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_div_qr_1n_pi1 (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP, \fBmp_limb_t\fP, \fBmp_limb_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_div_qr_2n_pi1 (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP, \fBmp_limb_t\fP, \fBmp_limb_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_div_qr_2u_pi1 (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP, \fBmp_limb_t\fP, int, \fBmp_limb_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP void mpn_divexact (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_size_t\fP mpn_divexact_itch (\fBmp_size_t\fP, \fBmp_size_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP int mpn_divisible_p (\fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_divrem_1c (\fBmp_ptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP, \fBmp_limb_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP void mpn_dump (\fBmp_srcptr\fP, \fBmp_size_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP int mpn_fft_best_k (\fBmp_size_t\fP, int)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_size_t\fP mpn_fft_next_size (\fBmp_size_t\fP, int)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_size_t\fP mpn_fib2_ui (\fBmp_ptr\fP, \fBmp_ptr\fP, unsigned long)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_size_t\fP mpn_gcd_subdiv_step (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_size_t\fP, \fBmp_size_t\fP, \fBgcd_subdiv_step_hook\fP *, void *, \fBmp_ptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_size_t\fP mpn_gcdext_lehmer_n (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_size_t\fP *, \fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP double mpn_get_d (\fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_size_t\fP, long)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_size_t\fP mpn_hgcd (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_size_t\fP, struct \fBhgcd_matrix\fP *, \fBmp_ptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP int mpn_hgcd2 (\fBmp_limb_t\fP, \fBmp_limb_t\fP, \fBmp_limb_t\fP, \fBmp_limb_t\fP, struct \fBhgcd_matrix1\fP *)"

.SS "\fB__GMP_DECLSPEC\fP int mpn_hgcd2_jacobi (\fBmp_limb_t\fP, \fBmp_limb_t\fP, \fBmp_limb_t\fP, \fBmp_limb_t\fP, struct \fBhgcd_matrix1\fP *, unsigned *)"

.SS "\fB__GMP_DECLSPEC\fP int mpn_hgcd_appr (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_size_t\fP, struct \fBhgcd_matrix\fP *, \fBmp_ptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_size_t\fP mpn_hgcd_appr_itch (\fBmp_size_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_size_t\fP mpn_hgcd_itch (\fBmp_size_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_size_t\fP mpn_hgcd_jacobi (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_size_t\fP, struct \fBhgcd_matrix\fP *, unsigned *, \fBmp_ptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_size_t\fP mpn_hgcd_matrix_adjust (\fBconst\fP struct \fBhgcd_matrix\fP *, \fBmp_size_t\fP, \fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP void mpn_hgcd_matrix_init (struct \fBhgcd_matrix\fP *, \fBmp_size_t\fP, \fBmp_ptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP void mpn_hgcd_matrix_mul (struct \fBhgcd_matrix\fP *, \fBconst\fP struct \fBhgcd_matrix\fP *, \fBmp_ptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP void mpn_hgcd_matrix_mul_1 (struct \fBhgcd_matrix\fP *, \fBconst\fP struct \fBhgcd_matrix1\fP *, \fBmp_ptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP void mpn_hgcd_matrix_update_q (struct \fBhgcd_matrix\fP *, \fBmp_srcptr\fP, \fBmp_size_t\fP, unsigned, \fBmp_ptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_size_t\fP mpn_hgcd_mul_matrix1_vector (\fBconst\fP struct \fBhgcd_matrix1\fP *, \fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_ptr\fP, \fBmp_size_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_size_t\fP mpn_hgcd_reduce (struct \fBhgcd_matrix\fP *, \fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_size_t\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_size_t\fP mpn_hgcd_reduce_itch (\fBmp_size_t\fP, \fBmp_size_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_size_t\fP mpn_hgcd_step (\fBmp_size_t\fP, \fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_size_t\fP, struct \fBhgcd_matrix\fP *, \fBmp_ptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP void mpn_invert (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_invert_limb (\fBmp_limb_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_invertappr (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP int mpn_jacobi_2 (\fBmp_srcptr\fP, \fBmp_srcptr\fP, unsigned)"

.SS "\fB__GMP_DECLSPEC\fP int mpn_jacobi_base (\fBmp_limb_t\fP, \fBmp_limb_t\fP, int)"

.SS "\fB__GMP_DECLSPEC\fP int mpn_jacobi_n (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_size_t\fP, unsigned)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_lshiftc (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, unsigned int)"

.SS "\fB__GMP_DECLSPEC\fP void mpn_matrix22_mul (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_size_t\fP mpn_matrix22_mul1_inverse_vector (\fBconst\fP struct \fBhgcd_matrix1\fP *, \fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_ptr\fP, \fBmp_size_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_size_t\fP mpn_matrix22_mul_itch (\fBmp_size_t\fP, \fBmp_size_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP void mpn_matrix22_mul_strassen (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_mod_1_1p (\fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP, \fBconst\fP mp_limb_t[4])"

.SS "\fB__GMP_DECLSPEC\fP void mpn_mod_1_1p_cps (\fBmp_limb_t\fP[4], \fBmp_limb_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_mod_1c (\fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP, \fBmp_limb_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_mod_1s_2p (\fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP, \fBconst\fP mp_limb_t[5])"

.SS "\fB__GMP_DECLSPEC\fP void mpn_mod_1s_2p_cps (\fBmp_limb_t\fP[5], \fBmp_limb_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_mod_1s_3p (\fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP, \fBconst\fP mp_limb_t[6])"

.SS "\fB__GMP_DECLSPEC\fP void mpn_mod_1s_3p_cps (\fBmp_limb_t\fP[6], \fBmp_limb_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_mod_1s_4p (\fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP, \fBconst\fP mp_limb_t[7])"

.SS "\fB__GMP_DECLSPEC\fP void mpn_mod_1s_4p_cps (\fBmp_limb_t\fP[7], \fBmp_limb_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_mod_34lsub1 (\fBmp_srcptr\fP, \fBmp_size_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_modexact_1_odd (\fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_modexact_1c_odd (\fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP, \fBmp_limb_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP void mpn_mu_bdiv_q (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_size_t\fP mpn_mu_bdiv_q_itch (\fBmp_size_t\fP, \fBmp_size_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_mu_bdiv_qr (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_size_t\fP mpn_mu_bdiv_qr_itch (\fBmp_size_t\fP, \fBmp_size_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_mu_div_q (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_size_t\fP mpn_mu_div_q_itch (\fBmp_size_t\fP, \fBmp_size_t\fP, int)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_mu_div_qr (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_size_t\fP mpn_mu_div_qr_choose_in (\fBmp_size_t\fP, \fBmp_size_t\fP, int)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_size_t\fP mpn_mu_div_qr_itch (\fBmp_size_t\fP, \fBmp_size_t\fP, int)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_mu_divappr_q (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_size_t\fP mpn_mu_divappr_q_choose_in (\fBmp_size_t\fP, \fBmp_size_t\fP, int)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_size_t\fP mpn_mu_divappr_q_itch (\fBmp_size_t\fP, \fBmp_size_t\fP, int)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_mul_1c (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP, \fBmp_limb_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_mul_2 (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_mul_3 (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_mul_4 (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_mul_5 (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_mul_6 (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP void mpn_mul_basecase (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_mul_fft (\fBmp_ptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, int)"

.SS "\fB__GMP_DECLSPEC\fP void mpn_mul_fft_full (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP void mpn_mullo_basecase (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP void mpn_mullo_n (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP void mpn_mulmid (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP void mpn_mulmid_basecase (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP void mpn_mulmid_n (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP void mpn_mulmod_bnm1 (\fBmp_ptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_size_t\fP mpn_mulmod_bnm1_next_size (\fBmp_size_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_ni_invertappr (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP void mpn_nussbaumer_mul (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_pi1_bdiv_q_1 (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP, \fBmp_limb_t\fP, int)"

.SS "\fB__GMP_DECLSPEC\fP void mpn_powlo (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP void mpn_powm (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_preinv_divrem_1 (\fBmp_ptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP, \fBmp_limb_t\fP, int)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_preinv_mu_div_qr (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_size_t\fP mpn_preinv_mu_div_qr_itch (\fBmp_size_t\fP, \fBmp_size_t\fP, \fBmp_size_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_preinv_mu_divappr_q (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_redc_1 (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_redc_2 (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP void mpn_redc_n (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_bitcnt_t\fP mpn_remove (\fBmp_ptr\fP, \fBmp_size_t\fP *, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_bitcnt_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_size_t\fP mpn_rootrem (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_signed_t\fP mpn_rsblsh1_n (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_signed_t\fP mpn_rsblsh1_nc (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_signed_t\fP mpn_rsblsh2_n (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_signed_t\fP mpn_rsblsh2_nc (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_signed_t\fP mpn_rsblsh_n (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, unsigned int)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_signed_t\fP mpn_rsblsh_nc (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, unsigned int, \fBmp_limb_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_rsh1add_n (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_rsh1add_nc (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_rsh1sub_n (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_rsh1sub_nc (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP void mpn_sbpi1_bdiv_q (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_sbpi1_bdiv_qr (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_sbpi1_div_q (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_sbpi1_div_qr (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_sbpi1_divappr_q (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_sec_pi1_div_qr (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP, \fBmp_ptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP void mpn_sec_pi1_div_r (\fBmp_ptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP, \fBmp_ptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP void mpn_set_str_compute_powtab (\fBpowers_t\fP *, \fBmp_ptr\fP, \fBmp_size_t\fP, int)"

.SS "\fB__GMP_DECLSPEC\fP void mpn_sqr_basecase (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP void mpn_sqr_diag_addlsh1 (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP void mpn_sqr_diagonal (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP void mpn_sqrlo (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP void mpn_sqrlo_basecase (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP void mpn_sqrmod_bnm1 (\fBmp_ptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_size_t\fP mpn_sqrmod_bnm1_next_size (\fBmp_size_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_sub_err1_n (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_sub_err2_n (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_sub_err3_n (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_sub_nc (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_sublsh1_n (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_sublsh1_nc (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_sublsh1_nc_ip1 (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_sublsh2_n (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_sublsh2_nc (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_sublsh2_nc_ip1 (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_sublsh_n (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, unsigned int)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_sublsh_n_ip1 (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, unsigned int)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_sublsh_nc_ip1 (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, unsigned int, \fBmp_limb_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_submul_1c (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_limb_t\fP, \fBmp_limb_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP void mpn_toom22_mul (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP void mpn_toom2_sqr (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP void mpn_toom32_mul (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP void mpn_toom33_mul (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP void mpn_toom3_sqr (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP void mpn_toom42_mul (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP void mpn_toom42_mulmid (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP void mpn_toom43_mul (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP void mpn_toom44_mul (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP void mpn_toom4_sqr (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP void mpn_toom52_mul (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP void mpn_toom53_mul (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP void mpn_toom54_mul (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP void mpn_toom62_mul (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP void mpn_toom63_mul (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP void mpn_toom6_sqr (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP void mpn_toom6h_mul (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP void mpn_toom8_sqr (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP void mpn_toom8h_mul (\fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP void mpn_toom_couple_handling (\fBmp_ptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP, int, \fBmp_size_t\fP, int, int)"

.SS "\fB__GMP_DECLSPEC\fP int mpn_toom_eval_dgr3_pm1 (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP int mpn_toom_eval_dgr3_pm2 (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP int mpn_toom_eval_pm1 (\fBmp_ptr\fP, \fBmp_ptr\fP, unsigned, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP int mpn_toom_eval_pm2 (\fBmp_ptr\fP, \fBmp_ptr\fP, unsigned, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP int mpn_toom_eval_pm2exp (\fBmp_ptr\fP, \fBmp_ptr\fP, unsigned, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_size_t\fP, unsigned, \fBmp_ptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP int mpn_toom_eval_pm2rexp (\fBmp_ptr\fP, \fBmp_ptr\fP, unsigned, \fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_size_t\fP, unsigned, \fBmp_ptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP void mpn_toom_interpolate_12pts (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_size_t\fP, \fBmp_size_t\fP, int, \fBmp_ptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP void mpn_toom_interpolate_16pts (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_size_t\fP, \fBmp_size_t\fP, int, \fBmp_ptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP void mpn_toom_interpolate_5pts (\fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_size_t\fP, \fBmp_size_t\fP, int, \fBmp_limb_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP void mpn_toom_interpolate_6pts (\fBmp_ptr\fP, \fBmp_size_t\fP, enum toom6_flags, \fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_size_t\fP)"

.SS "\fB__GMP_DECLSPEC\fP void mpn_toom_interpolate_7pts (\fBmp_ptr\fP, \fBmp_size_t\fP, enum toom7_flags, \fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP void mpn_toom_interpolate_8pts (\fBmp_ptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP, \fBmp_ptr\fP, \fBmp_size_t\fP, \fBmp_ptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP mpn_trialdiv (\fBmp_srcptr\fP, \fBmp_size_t\fP, \fBmp_size_t\fP, int *)"

.SS "\fB__GMP_DECLSPEC\fP void mpz_divexact_gcd (\fBmpz_ptr\fP, \fBmpz_srcptr\fP, \fBmpz_srcptr\fP)"

.SS "\fB__GMP_DECLSPEC\fP void mpz_n_pow_ui (\fBmpz_ptr\fP, \fBmp_srcptr\fP, \fBmp_size_t\fP, unsigned long)"

.SS "\fB__GMP_DECLSPEC\fP void mpz_oddfac_1 (\fBmpz_ptr\fP, \fBmp_limb_t\fP, unsigned)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_size_t\fP mpz_prodlimbs (\fBmpz_ptr\fP, \fBmp_ptr\fP, \fBmp_size_t\fP)"

.SH "Variable Documentation"
.PP 
.SS "\fBconst\fP \fB__GMP_DECLSPEC\fP int __gmp_0"

.SS "\fB__GMP_DECLSPEC\fP void*(* __gmp_allocate_func) (size_t)"

.SS "\fB__GMP_DECLSPEC\fP \fBmp_size_t\fP __gmp_default_fp_limb_precision"

.SS "\fBconst\fP \fB__GMP_DECLSPEC\fP unsigned char __gmp_digit_value_tab[]"

.SS "\fBconst\fP unsigned char __gmp_fac2cnt_table[]"

.SS "\fBconst\fP \fB__GMP_DECLSPEC\fP \fBmp_limb_t\fP __gmp_fib_table[]"

.SS "\fB__GMP_DECLSPEC\fP void(* __gmp_free_func) (void *, size_t)"

.SS "\fBconst\fP struct \fBgmp_doscan_funs_t\fP __gmp_fscanf_funs"

.SS "\fB__GMP_DECLSPEC\fP int __gmp_junk"

.SS "\fBconst\fP \fBmp_limb_t\fP __gmp_limbroots_table[]"

.SS "\fBconst\fP \fBmp_limb_t\fP __gmp_odd2fac_table[]"

.SS "\fBconst\fP \fBmp_limb_t\fP __gmp_oddfac_table[]"

.SS "\fB__GMP_DECLSPEC\fP \fBgmp_randstate_t\fP __gmp_rands"

.SS "\fB__GMP_DECLSPEC\fP char __gmp_rands_initialized"

.SS "\fB__GMP_DECLSPEC\fP void*(* __gmp_reallocate_func) (void *, size_t, size_t)"

.SS "\fBconst\fP struct \fBgmp_doscan_funs_t\fP __gmp_sscanf_funs"

.SS "\fBconst\fP \fB__GMP_DECLSPEC\fP unsigned char binvert_limb_table[128]"

.SS "\fBconst\fP typedef \fB__gmp_randstate_struct\fP* gmp_randstate_srcptr"

.SS "\fBconst\fP \fB__GMP_DECLSPEC\fP unsigned char jacobi_table[208]"

.SS "\fB__GMP_DECLSPEC\fP \fBconst\fP struct \fBbases\fP mp_bases[257]"

.SS "\fBgcd_subdiv_step_hook\fP mpn_gcdext_hook"

.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
