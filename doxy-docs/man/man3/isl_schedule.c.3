.TH "lib/isl/isl_schedule.c" 3 "Sun Jul 12 2020" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
lib/isl/isl_schedule.c
.SH SYNOPSIS
.br
.PP
\fC#include <isl/ctx\&.h>\fP
.br
\fC#include <isl_aff_private\&.h>\fP
.br
\fC#include <isl/map\&.h>\fP
.br
\fC#include <isl/set\&.h>\fP
.br
\fC#include <isl/schedule\&.h>\fP
.br
\fC#include <isl/schedule_node\&.h>\fP
.br
\fC#include <isl_sort\&.h>\fP
.br
\fC#include <isl_schedule_private\&.h>\fP
.br
\fC#include <isl_schedule_tree\&.h>\fP
.br
\fC#include <isl_schedule_node_private\&.h>\fP
.br
\fC#include <isl_band_private\&.h>\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBisl_pad_schedule_map_data\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fB__isl_give\fP \fBisl_schedule\fP * \fBisl_schedule_from_schedule_tree\fP (\fBisl_ctx\fP *ctx, \fB__isl_take\fP \fBisl_schedule_tree\fP *tree)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_schedule\fP * \fBisl_schedule_from_domain\fP (\fB__isl_take\fP \fBisl_union_set\fP *\fBdomain\fP)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_schedule\fP * \fBisl_schedule_empty\fP (\fB__isl_take\fP \fBisl_space\fP *space)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_schedule\fP * \fBisl_schedule_copy\fP (\fB__isl_keep\fP \fBisl_schedule\fP *sched)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_schedule\fP * \fBisl_schedule_cow\fP (\fB__isl_take\fP \fBisl_schedule\fP *schedule)"
.br
.ti -1c
.RI "\fB__isl_null\fP \fBisl_schedule\fP * \fBisl_schedule_free\fP (\fB__isl_take\fP \fBisl_schedule\fP *sched)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_schedule\fP * \fBisl_schedule_set_root\fP (\fB__isl_take\fP \fBisl_schedule\fP *schedule, \fB__isl_take\fP \fBisl_schedule_tree\fP *tree)"
.br
.ti -1c
.RI "\fBisl_ctx\fP * \fBisl_schedule_get_ctx\fP (\fB__isl_keep\fP \fBisl_schedule\fP *schedule)"
.br
.ti -1c
.RI "\fB__isl_keep\fP \fBisl_schedule_tree\fP * \fBisl_schedule_peek_leaf\fP (\fB__isl_keep\fP \fBisl_schedule\fP *schedule)"
.br
.ti -1c
.RI "\fBisl_bool\fP \fBisl_schedule_plain_is_equal\fP (\fB__isl_keep\fP \fBisl_schedule\fP *schedule1, \fB__isl_keep\fP \fBisl_schedule\fP *schedule2)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_space\fP * \fBisl_schedule_get_space\fP (\fB__isl_keep\fP \fBisl_schedule\fP *schedule)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_schedule_node\fP * \fBisl_schedule_get_root\fP (\fB__isl_keep\fP \fBisl_schedule\fP *schedule)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_union_set\fP * \fBisl_schedule_get_domain\fP (\fB__isl_keep\fP \fBisl_schedule\fP *schedule)"
.br
.ti -1c
.RI "\fBisl_stat\fP \fBisl_schedule_foreach_schedule_node_top_down\fP (\fB__isl_keep\fP \fBisl_schedule\fP *sched, \fBisl_bool\fP(*\fBfn\fP)(\fB__isl_keep\fP \fBisl_schedule_node\fP *node, void *\fBuser\fP), void *\fBuser\fP)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_schedule\fP * \fBisl_schedule_map_schedule_node_bottom_up\fP (\fB__isl_take\fP \fBisl_schedule\fP *schedule, \fB__isl_give\fP \fBisl_schedule_node\fP *(*\fBfn\fP)(\fB__isl_take\fP \fBisl_schedule_node\fP *node, void *\fBuser\fP), void *\fBuser\fP)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_schedule\fP * \fBisl_schedule_reset_user\fP (\fB__isl_take\fP \fBisl_schedule\fP *schedule)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_schedule\fP * \fBisl_schedule_align_params\fP (\fB__isl_take\fP \fBisl_schedule\fP *schedule, \fB__isl_take\fP \fBisl_space\fP *space)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_schedule\fP * \fBisl_schedule_pullback_union_pw_multi_aff\fP (\fB__isl_take\fP \fBisl_schedule\fP *schedule, \fB__isl_take\fP \fBisl_union_pw_multi_aff\fP *upma)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_schedule\fP * \fBisl_schedule_intersect_domain\fP (\fB__isl_take\fP \fBisl_schedule\fP *schedule, \fB__isl_take\fP \fBisl_union_set\fP *\fBdomain\fP)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_schedule\fP * \fBisl_schedule_gist_domain_params\fP (\fB__isl_take\fP \fBisl_schedule\fP *schedule, \fB__isl_take\fP \fBisl_set\fP *\fBcontext\fP)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_union_map\fP * \fBisl_schedule_get_map\fP (\fB__isl_keep\fP \fBisl_schedule\fP *sched)"
.br
.ti -1c
.RI "\fB__isl_give\fP isl_band_list * \fBisl_schedule_get_band_forest\fP (\fB__isl_keep\fP \fBisl_schedule\fP *schedule)"
.br
.ti -1c
.RI "int \fBisl_schedule_foreach_band\fP (\fB__isl_keep\fP \fBisl_schedule\fP *sched, int(*\fBfn\fP)(\fB__isl_keep\fP \fBisl_band\fP *band, void *\fBuser\fP), void *\fBuser\fP)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_schedule\fP * \fBisl_schedule_insert_partial_schedule\fP (\fB__isl_take\fP \fBisl_schedule\fP *schedule, \fB__isl_take\fP \fBisl_multi_union_pw_aff\fP *partial)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_schedule\fP * \fBisl_schedule_insert_context\fP (\fB__isl_take\fP \fBisl_schedule\fP *schedule, \fB__isl_take\fP \fBisl_set\fP *\fBcontext\fP)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_schedule\fP * \fBisl_schedule_insert_guard\fP (\fB__isl_take\fP \fBisl_schedule\fP *schedule, \fB__isl_take\fP \fBisl_set\fP *guard)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_schedule\fP * \fBisl_schedule_pair\fP (enum \fBisl_schedule_node_type\fP type, \fB__isl_take\fP \fBisl_schedule\fP *schedule1, \fB__isl_take\fP \fBisl_schedule\fP *schedule2)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_schedule\fP * \fBisl_schedule_sequence\fP (\fB__isl_take\fP \fBisl_schedule\fP *schedule1, \fB__isl_take\fP \fBisl_schedule\fP *schedule2)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_schedule\fP * \fBisl_schedule_set\fP (\fB__isl_take\fP \fBisl_schedule\fP *schedule1, \fB__isl_take\fP \fBisl_schedule\fP *schedule2)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_printer\fP * \fBisl_printer_print_schedule\fP (\fB__isl_take\fP \fBisl_printer\fP *\fBp\fP, \fB__isl_keep\fP \fBisl_schedule\fP *schedule)"
.br
.ti -1c
.RI "void \fBisl_schedule_dump\fP (\fB__isl_keep\fP \fBisl_schedule\fP *schedule)"
.br
.ti -1c
.RI "\fB__isl_give\fP char * \fBisl_schedule_to_str\fP (\fB__isl_keep\fP \fBisl_schedule\fP *schedule)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "\fB__isl_give\fP \fBisl_printer\fP* isl_printer_print_schedule (\fB__isl_take\fP \fBisl_printer\fP * p, \fB__isl_keep\fP \fBisl_schedule\fP * schedule)"

.SS "\fB__isl_give\fP \fBisl_schedule\fP* isl_schedule_align_params (\fB__isl_take\fP \fBisl_schedule\fP * schedule, \fB__isl_take\fP \fBisl_space\fP * space)"

.SS "\fB__isl_give\fP \fBisl_schedule\fP* isl_schedule_copy (\fB__isl_keep\fP \fBisl_schedule\fP * sched)"

.SS "\fB__isl_give\fP \fBisl_schedule\fP* isl_schedule_cow (\fB__isl_take\fP \fBisl_schedule\fP * schedule)"

.SS "void isl_schedule_dump (\fB__isl_keep\fP \fBisl_schedule\fP * schedule)"

.SS "\fB__isl_give\fP \fBisl_schedule\fP* isl_schedule_empty (\fB__isl_take\fP \fBisl_space\fP * space)"

.SS "int isl_schedule_foreach_band (\fB__isl_keep\fP \fBisl_schedule\fP * sched, int(*)(\fB__isl_keep\fP \fBisl_band\fP *band, void *\fBuser\fP) fn, void * user)"

.SS "\fBisl_stat\fP isl_schedule_foreach_schedule_node_top_down (\fB__isl_keep\fP \fBisl_schedule\fP * sched, \fBisl_bool\fP(*)(\fB__isl_keep\fP \fBisl_schedule_node\fP *node, void *\fBuser\fP) fn, void * user)"

.SS "\fB__isl_null\fP \fBisl_schedule\fP* isl_schedule_free (\fB__isl_take\fP \fBisl_schedule\fP * sched)"

.SS "\fB__isl_give\fP \fBisl_schedule\fP* isl_schedule_from_domain (\fB__isl_take\fP \fBisl_union_set\fP * domain)"

.SS "\fB__isl_give\fP \fBisl_schedule\fP* isl_schedule_from_schedule_tree (\fBisl_ctx\fP * ctx, \fB__isl_take\fP \fBisl_schedule_tree\fP * tree)"

.SS "\fB__isl_give\fP isl_band_list* isl_schedule_get_band_forest (\fB__isl_keep\fP \fBisl_schedule\fP * schedule)"

.SS "\fBisl_ctx\fP* isl_schedule_get_ctx (\fB__isl_keep\fP \fBisl_schedule\fP * schedule)"

.SS "\fB__isl_give\fP \fBisl_union_set\fP* isl_schedule_get_domain (\fB__isl_keep\fP \fBisl_schedule\fP * schedule)"

.SS "\fB__isl_give\fP \fBisl_union_map\fP* isl_schedule_get_map (\fB__isl_keep\fP \fBisl_schedule\fP * sched)"

.SS "\fB__isl_give\fP \fBisl_schedule_node\fP* isl_schedule_get_root (\fB__isl_keep\fP \fBisl_schedule\fP * schedule)"

.SS "\fB__isl_give\fP \fBisl_space\fP* isl_schedule_get_space (\fB__isl_keep\fP \fBisl_schedule\fP * schedule)"

.SS "\fB__isl_give\fP \fBisl_schedule\fP* isl_schedule_gist_domain_params (\fB__isl_take\fP \fBisl_schedule\fP * schedule, \fB__isl_take\fP \fBisl_set\fP * context)"

.SS "\fB__isl_give\fP \fBisl_schedule\fP* isl_schedule_insert_context (\fB__isl_take\fP \fBisl_schedule\fP * schedule, \fB__isl_take\fP \fBisl_set\fP * context)"

.SS "\fB__isl_give\fP \fBisl_schedule\fP* isl_schedule_insert_guard (\fB__isl_take\fP \fBisl_schedule\fP * schedule, \fB__isl_take\fP \fBisl_set\fP * guard)"

.SS "\fB__isl_give\fP \fBisl_schedule\fP* isl_schedule_insert_partial_schedule (\fB__isl_take\fP \fBisl_schedule\fP * schedule, \fB__isl_take\fP \fBisl_multi_union_pw_aff\fP * partial)"

.SS "\fB__isl_give\fP \fBisl_schedule\fP* isl_schedule_intersect_domain (\fB__isl_take\fP \fBisl_schedule\fP * schedule, \fB__isl_take\fP \fBisl_union_set\fP * domain)"

.SS "\fB__isl_give\fP \fBisl_schedule\fP* isl_schedule_map_schedule_node_bottom_up (\fB__isl_take\fP \fBisl_schedule\fP * schedule, \fB__isl_give\fP \fBisl_schedule_node\fP *(*)(\fB__isl_take\fP \fBisl_schedule_node\fP *node, void *\fBuser\fP) fn, void * user)"

.SS "\fB__isl_give\fP \fBisl_schedule\fP* isl_schedule_pair (enum \fBisl_schedule_node_type\fP type, \fB__isl_take\fP \fBisl_schedule\fP * schedule1, \fB__isl_take\fP \fBisl_schedule\fP * schedule2)"

.SS "\fB__isl_keep\fP \fBisl_schedule_tree\fP* isl_schedule_peek_leaf (\fB__isl_keep\fP \fBisl_schedule\fP * schedule)"

.SS "\fBisl_bool\fP isl_schedule_plain_is_equal (\fB__isl_keep\fP \fBisl_schedule\fP * schedule1, \fB__isl_keep\fP \fBisl_schedule\fP * schedule2)"

.SS "\fB__isl_give\fP \fBisl_schedule\fP* isl_schedule_pullback_union_pw_multi_aff (\fB__isl_take\fP \fBisl_schedule\fP * schedule, \fB__isl_take\fP \fBisl_union_pw_multi_aff\fP * upma)"

.SS "\fB__isl_give\fP \fBisl_schedule\fP* isl_schedule_reset_user (\fB__isl_take\fP \fBisl_schedule\fP * schedule)"

.SS "\fB__isl_give\fP \fBisl_schedule\fP* isl_schedule_sequence (\fB__isl_take\fP \fBisl_schedule\fP * schedule1, \fB__isl_take\fP \fBisl_schedule\fP * schedule2)"

.SS "\fB__isl_give\fP \fBisl_schedule\fP* isl_schedule_set (\fB__isl_take\fP \fBisl_schedule\fP * schedule1, \fB__isl_take\fP \fBisl_schedule\fP * schedule2)"

.SS "\fB__isl_give\fP \fBisl_schedule\fP* isl_schedule_set_root (\fB__isl_take\fP \fBisl_schedule\fP * schedule, \fB__isl_take\fP \fBisl_schedule_tree\fP * tree)"

.SS "\fB__isl_give\fP char* isl_schedule_to_str (\fB__isl_keep\fP \fBisl_schedule\fP * schedule)"

.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
