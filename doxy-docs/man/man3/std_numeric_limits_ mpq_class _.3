.TH "std::numeric_limits< mpq_class >" 3 "Sun Jul 12 2020" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
std::numeric_limits< mpq_class >
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <gmpxx\&.h>\fP
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBmpq_class\fP \fBmin\fP ()"
.br
.ti -1c
.RI "static \fBmpq_class\fP \fBmax\fP ()"
.br
.ti -1c
.RI "static \fBmpq_class\fP \fBlowest\fP ()"
.br
.ti -1c
.RI "static \fBmpq_class\fP \fBepsilon\fP ()"
.br
.ti -1c
.RI "static \fBmpq_class\fP \fBround_error\fP ()"
.br
.ti -1c
.RI "static \fBmpq_class\fP \fBinfinity\fP ()"
.br
.ti -1c
.RI "static \fBmpq_class\fP \fBquiet_NaN\fP ()"
.br
.ti -1c
.RI "static \fBmpq_class\fP \fBsignaling_NaN\fP ()"
.br
.ti -1c
.RI "static \fBmpq_class\fP \fBdenorm_min\fP ()"
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static \fBconst\fP bool \fBis_specialized\fP = true"
.br
.ti -1c
.RI "static \fBconst\fP int \fBdigits\fP = 0"
.br
.ti -1c
.RI "static \fBconst\fP int \fBdigits10\fP = 0"
.br
.ti -1c
.RI "static \fBconst\fP int \fBmax_digits10\fP = 0"
.br
.ti -1c
.RI "static \fBconst\fP bool \fBis_signed\fP = true"
.br
.ti -1c
.RI "static \fBconst\fP bool \fBis_integer\fP = false"
.br
.ti -1c
.RI "static \fBconst\fP bool \fBis_exact\fP = true"
.br
.ti -1c
.RI "static \fBconst\fP int \fBradix\fP = 2"
.br
.ti -1c
.RI "static \fBconst\fP int \fBmin_exponent\fP = 0"
.br
.ti -1c
.RI "static \fBconst\fP int \fBmin_exponent10\fP = 0"
.br
.ti -1c
.RI "static \fBconst\fP int \fBmax_exponent\fP = 0"
.br
.ti -1c
.RI "static \fBconst\fP int \fBmax_exponent10\fP = 0"
.br
.ti -1c
.RI "static \fBconst\fP bool \fBhas_infinity\fP = false"
.br
.ti -1c
.RI "static \fBconst\fP bool \fBhas_quiet_NaN\fP = false"
.br
.ti -1c
.RI "static \fBconst\fP bool \fBhas_signaling_NaN\fP = false"
.br
.ti -1c
.RI "static \fBconst\fP float_denorm_style \fBhas_denorm\fP = denorm_absent"
.br
.ti -1c
.RI "static \fBconst\fP bool \fBhas_denorm_loss\fP = false"
.br
.ti -1c
.RI "static \fBconst\fP bool \fBis_iec559\fP = false"
.br
.ti -1c
.RI "static \fBconst\fP bool \fBis_bounded\fP = false"
.br
.ti -1c
.RI "static \fBconst\fP bool \fBis_modulo\fP = false"
.br
.ti -1c
.RI "static \fBconst\fP bool \fBtraps\fP = false"
.br
.ti -1c
.RI "static \fBconst\fP bool \fBtinyness_before\fP = false"
.br
.ti -1c
.RI "static \fBconst\fP float_round_style \fBround_style\fP = round_toward_zero"
.br
.in -1c
.SH "Member Function Documentation"
.PP 
.SS "static \fBmpq_class\fP std::numeric_limits< \fBmpq_class\fP >::denorm_min ()\fC [inline]\fP, \fC [static]\fP"

.SS "static \fBmpq_class\fP std::numeric_limits< \fBmpq_class\fP >::epsilon ()\fC [inline]\fP, \fC [static]\fP"

.SS "static \fBmpq_class\fP std::numeric_limits< \fBmpq_class\fP >::infinity ()\fC [inline]\fP, \fC [static]\fP"

.SS "static \fBmpq_class\fP std::numeric_limits< \fBmpq_class\fP >::lowest ()\fC [inline]\fP, \fC [static]\fP"

.SS "static \fBmpq_class\fP std::numeric_limits< \fBmpq_class\fP >::max ()\fC [inline]\fP, \fC [static]\fP"

.SS "static \fBmpq_class\fP std::numeric_limits< \fBmpq_class\fP >::min ()\fC [inline]\fP, \fC [static]\fP"

.SS "static \fBmpq_class\fP std::numeric_limits< \fBmpq_class\fP >::quiet_NaN ()\fC [inline]\fP, \fC [static]\fP"

.SS "static \fBmpq_class\fP std::numeric_limits< \fBmpq_class\fP >::round_error ()\fC [inline]\fP, \fC [static]\fP"

.SS "static \fBmpq_class\fP std::numeric_limits< \fBmpq_class\fP >::signaling_NaN ()\fC [inline]\fP, \fC [static]\fP"

.SH "Member Data Documentation"
.PP 
.SS "\fBconst\fP int std::numeric_limits< \fBmpq_class\fP >::digits = 0\fC [static]\fP"

.SS "\fBconst\fP int std::numeric_limits< \fBmpq_class\fP >::digits10 = 0\fC [static]\fP"

.SS "\fBconst\fP float_denorm_style std::numeric_limits< \fBmpq_class\fP >::has_denorm = denorm_absent\fC [static]\fP"

.SS "\fBconst\fP bool std::numeric_limits< \fBmpq_class\fP >::has_denorm_loss = false\fC [static]\fP"

.SS "\fBconst\fP bool std::numeric_limits< \fBmpq_class\fP >::has_infinity = false\fC [static]\fP"

.SS "\fBconst\fP bool std::numeric_limits< \fBmpq_class\fP >::has_quiet_NaN = false\fC [static]\fP"

.SS "\fBconst\fP bool std::numeric_limits< \fBmpq_class\fP >::has_signaling_NaN = false\fC [static]\fP"

.SS "\fBconst\fP bool std::numeric_limits< \fBmpq_class\fP >::is_bounded = false\fC [static]\fP"

.SS "\fBconst\fP bool std::numeric_limits< \fBmpq_class\fP >::is_exact = true\fC [static]\fP"

.SS "\fBconst\fP bool std::numeric_limits< \fBmpq_class\fP >::is_iec559 = false\fC [static]\fP"

.SS "\fBconst\fP bool std::numeric_limits< \fBmpq_class\fP >::is_integer = false\fC [static]\fP"

.SS "\fBconst\fP bool std::numeric_limits< \fBmpq_class\fP >::is_modulo = false\fC [static]\fP"

.SS "\fBconst\fP bool std::numeric_limits< \fBmpq_class\fP >::is_signed = true\fC [static]\fP"

.SS "\fBconst\fP bool std::numeric_limits< \fBmpq_class\fP >::is_specialized = true\fC [static]\fP"

.SS "\fBconst\fP int std::numeric_limits< \fBmpq_class\fP >::max_digits10 = 0\fC [static]\fP"

.SS "\fBconst\fP int std::numeric_limits< \fBmpq_class\fP >::max_exponent = 0\fC [static]\fP"

.SS "\fBconst\fP int std::numeric_limits< \fBmpq_class\fP >::max_exponent10 = 0\fC [static]\fP"

.SS "\fBconst\fP int std::numeric_limits< \fBmpq_class\fP >::min_exponent = 0\fC [static]\fP"

.SS "\fBconst\fP int std::numeric_limits< \fBmpq_class\fP >::min_exponent10 = 0\fC [static]\fP"

.SS "\fBconst\fP int std::numeric_limits< \fBmpq_class\fP >::radix = 2\fC [static]\fP"

.SS "\fBconst\fP float_round_style std::numeric_limits< \fBmpq_class\fP >::round_style = round_toward_zero\fC [static]\fP"

.SS "\fBconst\fP bool std::numeric_limits< \fBmpq_class\fP >::tinyness_before = false\fC [static]\fP"

.SS "\fBconst\fP bool std::numeric_limits< \fBmpq_class\fP >::traps = false\fC [static]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
