.TH "lib/isl/include/isl/ast_build.h" 3 "Sun Jul 12 2020" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
lib/isl/include/isl/ast_build.h
.SH SYNOPSIS
.br
.PP
\fC#include <isl/ctx\&.h>\fP
.br
\fC#include <isl/set\&.h>\fP
.br
\fC#include <isl/ast\&.h>\fP
.br
\fC#include <isl/schedule\&.h>\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBISL_AST_BUILD_SEPARATION_BOUNDS_EXPLICIT\fP   0"
.br
.ti -1c
.RI "#define \fBISL_AST_BUILD_SEPARATION_BOUNDS_IMPLICIT\fP   1"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct \fBisl_ast_build\fP \fBisl_ast_build\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBisl_stat\fP \fBisl_options_set_ast_build_atomic_upper_bound\fP (\fBisl_ctx\fP *ctx, int \fBval\fP)"
.br
.ti -1c
.RI "int \fBisl_options_get_ast_build_atomic_upper_bound\fP (\fBisl_ctx\fP *ctx)"
.br
.ti -1c
.RI "\fBisl_stat\fP \fBisl_options_set_ast_build_prefer_pdiv\fP (\fBisl_ctx\fP *ctx, int \fBval\fP)"
.br
.ti -1c
.RI "int \fBisl_options_get_ast_build_prefer_pdiv\fP (\fBisl_ctx\fP *ctx)"
.br
.ti -1c
.RI "\fBisl_stat\fP \fBisl_options_set_ast_build_exploit_nested_bounds\fP (\fBisl_ctx\fP *ctx, int \fBval\fP)"
.br
.ti -1c
.RI "int \fBisl_options_get_ast_build_exploit_nested_bounds\fP (\fBisl_ctx\fP *ctx)"
.br
.ti -1c
.RI "\fBisl_stat\fP \fBisl_options_set_ast_build_group_coscheduled\fP (\fBisl_ctx\fP *ctx, int \fBval\fP)"
.br
.ti -1c
.RI "int \fBisl_options_get_ast_build_group_coscheduled\fP (\fBisl_ctx\fP *ctx)"
.br
.ti -1c
.RI "\fBisl_stat\fP \fBisl_options_set_ast_build_separation_bounds\fP (\fBisl_ctx\fP *ctx, int \fBval\fP)"
.br
.ti -1c
.RI "int \fBisl_options_get_ast_build_separation_bounds\fP (\fBisl_ctx\fP *ctx)"
.br
.ti -1c
.RI "\fBisl_stat\fP \fBisl_options_set_ast_build_scale_strides\fP (\fBisl_ctx\fP *ctx, int \fBval\fP)"
.br
.ti -1c
.RI "int \fBisl_options_get_ast_build_scale_strides\fP (\fBisl_ctx\fP *ctx)"
.br
.ti -1c
.RI "\fBisl_stat\fP \fBisl_options_set_ast_build_allow_else\fP (\fBisl_ctx\fP *ctx, int \fBval\fP)"
.br
.ti -1c
.RI "int \fBisl_options_get_ast_build_allow_else\fP (\fBisl_ctx\fP *ctx)"
.br
.ti -1c
.RI "\fBisl_stat\fP \fBisl_options_set_ast_build_allow_or\fP (\fBisl_ctx\fP *ctx, int \fBval\fP)"
.br
.ti -1c
.RI "int \fBisl_options_get_ast_build_allow_or\fP (\fBisl_ctx\fP *ctx)"
.br
.ti -1c
.RI "\fBisl_ctx\fP * \fBisl_ast_build_get_ctx\fP (\fB__isl_keep\fP \fBisl_ast_build\fP *build)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_ast_build\fP * \fBisl_ast_build_alloc\fP (\fBisl_ctx\fP *ctx)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_ast_build\fP * \fBisl_ast_build_from_context\fP (\fB__isl_take\fP \fBisl_set\fP *\fBset\fP)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_space\fP * \fBisl_ast_build_get_schedule_space\fP (\fB__isl_keep\fP \fBisl_ast_build\fP *build)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_union_map\fP * \fBisl_ast_build_get_schedule\fP (\fB__isl_keep\fP \fBisl_ast_build\fP *build)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_ast_build\fP * \fBisl_ast_build_restrict\fP (\fB__isl_take\fP \fBisl_ast_build\fP *build, \fB__isl_take\fP \fBisl_set\fP *\fBset\fP)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_ast_build\fP * \fBisl_ast_build_copy\fP (\fB__isl_keep\fP \fBisl_ast_build\fP *build)"
.br
.ti -1c
.RI "\fB__isl_null\fP \fBisl_ast_build\fP * \fBisl_ast_build_free\fP (\fB__isl_take\fP \fBisl_ast_build\fP *build)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_ast_build\fP * \fBisl_ast_build_set_options\fP (\fB__isl_take\fP \fBisl_ast_build\fP *build, \fB__isl_take\fP \fBisl_union_map\fP *\fBoptions\fP)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_ast_build\fP * \fBisl_ast_build_set_iterators\fP (\fB__isl_take\fP \fBisl_ast_build\fP *build, \fB__isl_take\fP isl_id_list *iterators)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_ast_build\fP * \fBisl_ast_build_set_at_each_domain\fP (\fB__isl_take\fP \fBisl_ast_build\fP *build, \fB__isl_give\fP \fBisl_ast_node\fP *(*\fBfn\fP)(\fB__isl_take\fP \fBisl_ast_node\fP *node, \fB__isl_keep\fP \fBisl_ast_build\fP *build, void *\fBuser\fP), void *\fBuser\fP)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_ast_build\fP * \fBisl_ast_build_set_before_each_for\fP (\fB__isl_take\fP \fBisl_ast_build\fP *build, \fB__isl_give\fP \fBisl_id\fP *(*\fBfn\fP)(\fB__isl_keep\fP \fBisl_ast_build\fP *build, void *\fBuser\fP), void *\fBuser\fP)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_ast_build\fP * \fBisl_ast_build_set_after_each_for\fP (\fB__isl_take\fP \fBisl_ast_build\fP *build, \fB__isl_give\fP \fBisl_ast_node\fP *(*\fBfn\fP)(\fB__isl_take\fP \fBisl_ast_node\fP *node, \fB__isl_keep\fP \fBisl_ast_build\fP *build, void *\fBuser\fP), void *\fBuser\fP)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_ast_build\fP * \fBisl_ast_build_set_before_each_mark\fP (\fB__isl_take\fP \fBisl_ast_build\fP *build, \fBisl_stat\fP(*\fBfn\fP)(\fB__isl_keep\fP \fBisl_id\fP *\fBmark\fP, \fB__isl_keep\fP \fBisl_ast_build\fP *build, void *\fBuser\fP), void *\fBuser\fP)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_ast_build\fP * \fBisl_ast_build_set_after_each_mark\fP (\fB__isl_take\fP \fBisl_ast_build\fP *build, \fB__isl_give\fP \fBisl_ast_node\fP *(*\fBfn\fP)(\fB__isl_take\fP \fBisl_ast_node\fP *node, \fB__isl_keep\fP \fBisl_ast_build\fP *build, void *\fBuser\fP), void *\fBuser\fP)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_ast_build\fP * \fBisl_ast_build_set_create_leaf\fP (\fB__isl_take\fP \fBisl_ast_build\fP *build, \fB__isl_give\fP \fBisl_ast_node\fP *(*\fBfn\fP)(\fB__isl_take\fP \fBisl_ast_build\fP *build, void *\fBuser\fP), void *\fBuser\fP)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_ast_expr\fP * \fBisl_ast_build_expr_from_set\fP (\fB__isl_keep\fP \fBisl_ast_build\fP *build, \fB__isl_take\fP \fBisl_set\fP *\fBset\fP)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_ast_expr\fP * \fBisl_ast_build_expr_from_pw_aff\fP (\fB__isl_keep\fP \fBisl_ast_build\fP *build, \fB__isl_take\fP \fBisl_pw_aff\fP *pa)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_ast_expr\fP * \fBisl_ast_build_access_from_pw_multi_aff\fP (\fB__isl_keep\fP \fBisl_ast_build\fP *build, \fB__isl_take\fP \fBisl_pw_multi_aff\fP *pma)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_ast_expr\fP * \fBisl_ast_build_access_from_multi_pw_aff\fP (\fB__isl_keep\fP \fBisl_ast_build\fP *build, \fB__isl_take\fP \fBisl_multi_pw_aff\fP *mpa)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_ast_expr\fP * \fBisl_ast_build_call_from_pw_multi_aff\fP (\fB__isl_keep\fP \fBisl_ast_build\fP *build, \fB__isl_take\fP \fBisl_pw_multi_aff\fP *pma)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_ast_expr\fP * \fBisl_ast_build_call_from_multi_pw_aff\fP (\fB__isl_keep\fP \fBisl_ast_build\fP *build, \fB__isl_take\fP \fBisl_multi_pw_aff\fP *mpa)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_ast_node\fP * \fBisl_ast_build_node_from_schedule\fP (\fB__isl_keep\fP \fBisl_ast_build\fP *build, \fB__isl_take\fP \fBisl_schedule\fP *schedule)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_ast_node\fP * \fBisl_ast_build_node_from_schedule_map\fP (\fB__isl_keep\fP \fBisl_ast_build\fP *build, \fB__isl_take\fP \fBisl_union_map\fP *schedule)"
.br
.ti -1c
.RI "\fB__isl_give\fP \fBisl_ast_node\fP * \fBisl_ast_build_ast_from_schedule\fP (\fB__isl_keep\fP \fBisl_ast_build\fP *build, \fB__isl_take\fP \fBisl_union_map\fP *schedule)"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define ISL_AST_BUILD_SEPARATION_BOUNDS_EXPLICIT   0"

.SS "#define ISL_AST_BUILD_SEPARATION_BOUNDS_IMPLICIT   1"

.SH "Typedef Documentation"
.PP 
.SS "typedef struct \fBisl_ast_build\fP \fBisl_ast_build\fP"

.SH "Function Documentation"
.PP 
.SS "\fB__isl_give\fP \fBisl_ast_expr\fP* isl_ast_build_access_from_multi_pw_aff (\fB__isl_keep\fP \fBisl_ast_build\fP * build, \fB__isl_take\fP \fBisl_multi_pw_aff\fP * mpa)"

.SS "\fB__isl_give\fP \fBisl_ast_expr\fP* isl_ast_build_access_from_pw_multi_aff (\fB__isl_keep\fP \fBisl_ast_build\fP * build, \fB__isl_take\fP \fBisl_pw_multi_aff\fP * pma)"

.SS "\fB__isl_give\fP \fBisl_ast_build\fP* isl_ast_build_alloc (\fBisl_ctx\fP * ctx)"

.SS "\fB__isl_give\fP \fBisl_ast_node\fP* isl_ast_build_ast_from_schedule (\fB__isl_keep\fP \fBisl_ast_build\fP * build, \fB__isl_take\fP \fBisl_union_map\fP * schedule)"

.SS "\fB__isl_give\fP \fBisl_ast_expr\fP* isl_ast_build_call_from_multi_pw_aff (\fB__isl_keep\fP \fBisl_ast_build\fP * build, \fB__isl_take\fP \fBisl_multi_pw_aff\fP * mpa)"

.SS "\fB__isl_give\fP \fBisl_ast_expr\fP* isl_ast_build_call_from_pw_multi_aff (\fB__isl_keep\fP \fBisl_ast_build\fP * build, \fB__isl_take\fP \fBisl_pw_multi_aff\fP * pma)"

.SS "\fB__isl_give\fP \fBisl_ast_build\fP* isl_ast_build_copy (\fB__isl_keep\fP \fBisl_ast_build\fP * build)"

.SS "\fB__isl_give\fP \fBisl_ast_expr\fP* isl_ast_build_expr_from_pw_aff (\fB__isl_keep\fP \fBisl_ast_build\fP * build, \fB__isl_take\fP \fBisl_pw_aff\fP * pa)"

.SS "\fB__isl_give\fP \fBisl_ast_expr\fP* isl_ast_build_expr_from_set (\fB__isl_keep\fP \fBisl_ast_build\fP * build, \fB__isl_take\fP \fBisl_set\fP * set)"

.SS "\fB__isl_null\fP \fBisl_ast_build\fP* isl_ast_build_free (\fB__isl_take\fP \fBisl_ast_build\fP * build)"

.SS "\fB__isl_give\fP \fBisl_ast_build\fP* isl_ast_build_from_context (\fB__isl_take\fP \fBisl_set\fP * set)"

.SS "\fBisl_ctx\fP* isl_ast_build_get_ctx (\fB__isl_keep\fP \fBisl_ast_build\fP * build)"

.SS "\fB__isl_give\fP \fBisl_union_map\fP* isl_ast_build_get_schedule (\fB__isl_keep\fP \fBisl_ast_build\fP * build)"

.SS "\fB__isl_give\fP \fBisl_space\fP* isl_ast_build_get_schedule_space (\fB__isl_keep\fP \fBisl_ast_build\fP * build)"

.SS "\fB__isl_give\fP \fBisl_ast_node\fP* isl_ast_build_node_from_schedule (\fB__isl_keep\fP \fBisl_ast_build\fP * build, \fB__isl_take\fP \fBisl_schedule\fP * schedule)"

.SS "\fB__isl_give\fP \fBisl_ast_node\fP* isl_ast_build_node_from_schedule_map (\fB__isl_keep\fP \fBisl_ast_build\fP * build, \fB__isl_take\fP \fBisl_union_map\fP * schedule)"

.SS "\fB__isl_give\fP \fBisl_ast_build\fP* isl_ast_build_restrict (\fB__isl_take\fP \fBisl_ast_build\fP * build, \fB__isl_take\fP \fBisl_set\fP * set)"

.SS "\fB__isl_give\fP \fBisl_ast_build\fP* isl_ast_build_set_after_each_for (\fB__isl_take\fP \fBisl_ast_build\fP * build, \fB__isl_give\fP \fBisl_ast_node\fP *(*)(\fB__isl_take\fP \fBisl_ast_node\fP *node, \fB__isl_keep\fP \fBisl_ast_build\fP *build, void *\fBuser\fP) fn, void * user)"

.SS "\fB__isl_give\fP \fBisl_ast_build\fP* isl_ast_build_set_after_each_mark (\fB__isl_take\fP \fBisl_ast_build\fP * build, \fB__isl_give\fP \fBisl_ast_node\fP *(*)(\fB__isl_take\fP \fBisl_ast_node\fP *node, \fB__isl_keep\fP \fBisl_ast_build\fP *build, void *\fBuser\fP) fn, void * user)"

.SS "\fB__isl_give\fP \fBisl_ast_build\fP* isl_ast_build_set_at_each_domain (\fB__isl_take\fP \fBisl_ast_build\fP * build, \fB__isl_give\fP \fBisl_ast_node\fP *(*)(\fB__isl_take\fP \fBisl_ast_node\fP *node, \fB__isl_keep\fP \fBisl_ast_build\fP *build, void *\fBuser\fP) fn, void * user)"

.SS "\fB__isl_give\fP \fBisl_ast_build\fP* isl_ast_build_set_before_each_for (\fB__isl_take\fP \fBisl_ast_build\fP * build, \fB__isl_give\fP \fBisl_id\fP *(*)(\fB__isl_keep\fP \fBisl_ast_build\fP *build, void *\fBuser\fP) fn, void * user)"

.SS "\fB__isl_give\fP \fBisl_ast_build\fP* isl_ast_build_set_before_each_mark (\fB__isl_take\fP \fBisl_ast_build\fP * build, \fBisl_stat\fP(*)(\fB__isl_keep\fP \fBisl_id\fP *\fBmark\fP, \fB__isl_keep\fP \fBisl_ast_build\fP *build, void *\fBuser\fP) fn, void * user)"

.SS "\fB__isl_give\fP \fBisl_ast_build\fP* isl_ast_build_set_create_leaf (\fB__isl_take\fP \fBisl_ast_build\fP * build, \fB__isl_give\fP \fBisl_ast_node\fP *(*)(\fB__isl_take\fP \fBisl_ast_build\fP *build, void *\fBuser\fP) fn, void * user)"

.SS "\fB__isl_give\fP \fBisl_ast_build\fP* isl_ast_build_set_iterators (\fB__isl_take\fP \fBisl_ast_build\fP * build, \fB__isl_take\fP isl_id_list * iterators)"

.SS "\fB__isl_give\fP \fBisl_ast_build\fP* isl_ast_build_set_options (\fB__isl_take\fP \fBisl_ast_build\fP * build, \fB__isl_take\fP \fBisl_union_map\fP * options)"

.SS "int isl_options_get_ast_build_allow_else (\fBisl_ctx\fP * ctx)"

.SS "int isl_options_get_ast_build_allow_or (\fBisl_ctx\fP * ctx)"

.SS "int isl_options_get_ast_build_atomic_upper_bound (\fBisl_ctx\fP * ctx)"

.SS "int isl_options_get_ast_build_exploit_nested_bounds (\fBisl_ctx\fP * ctx)"

.SS "int isl_options_get_ast_build_group_coscheduled (\fBisl_ctx\fP * ctx)"

.SS "int isl_options_get_ast_build_prefer_pdiv (\fBisl_ctx\fP * ctx)"

.SS "int isl_options_get_ast_build_scale_strides (\fBisl_ctx\fP * ctx)"

.SS "int isl_options_get_ast_build_separation_bounds (\fBisl_ctx\fP * ctx)"

.SS "\fBisl_stat\fP isl_options_set_ast_build_allow_else (\fBisl_ctx\fP * ctx, int val)"

.SS "\fBisl_stat\fP isl_options_set_ast_build_allow_or (\fBisl_ctx\fP * ctx, int val)"

.SS "\fBisl_stat\fP isl_options_set_ast_build_atomic_upper_bound (\fBisl_ctx\fP * ctx, int val)"

.SS "\fBisl_stat\fP isl_options_set_ast_build_exploit_nested_bounds (\fBisl_ctx\fP * ctx, int val)"

.SS "\fBisl_stat\fP isl_options_set_ast_build_group_coscheduled (\fBisl_ctx\fP * ctx, int val)"

.SS "\fBisl_stat\fP isl_options_set_ast_build_prefer_pdiv (\fBisl_ctx\fP * ctx, int val)"

.SS "\fBisl_stat\fP isl_options_set_ast_build_scale_strides (\fBisl_ctx\fP * ctx, int val)"

.SS "\fBisl_stat\fP isl_options_set_ast_build_separation_bounds (\fBisl_ctx\fP * ctx, int val)"

.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
