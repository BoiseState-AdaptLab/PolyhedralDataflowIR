.TH "lib/isl/isl_int_imath.h" 3 "Sun Jul 12 2020" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
lib/isl/isl_int_imath.h
.SH SYNOPSIS
.br
.PP
\fC#include 'isl_hide_deprecated\&.h'\fP
.br
\fC#include <isl_imath\&.h>\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBisl_int_init\fP(\fBi\fP)   \fBi\fP = \fBmp_int_alloc\fP()"
.br
.ti -1c
.RI "#define \fBisl_int_clear\fP(\fBi\fP)   \fBmp_int_free\fP(\fBi\fP)"
.br
.ti -1c
.RI "#define \fBisl_int_set\fP(r,  \fBi\fP)   impz_set(r,\fBi\fP)"
.br
.ti -1c
.RI "#define \fBisl_int_set_si\fP(r,  \fBi\fP)   impz_set_si(r,\fBi\fP)"
.br
.ti -1c
.RI "#define \fBisl_int_set_ui\fP(r,  \fBi\fP)   impz_set_ui(r,\fBi\fP)"
.br
.ti -1c
.RI "#define \fBisl_int_fits_slong\fP(r)   \fBisl_imath_fits_slong_p\fP(r)"
.br
.ti -1c
.RI "#define \fBisl_int_get_si\fP(r)   impz_get_si(r)"
.br
.ti -1c
.RI "#define \fBisl_int_fits_ulong\fP(r)   \fBisl_imath_fits_ulong_p\fP(r)"
.br
.ti -1c
.RI "#define \fBisl_int_get_ui\fP(r)   impz_get_ui(r)"
.br
.ti -1c
.RI "#define \fBisl_int_get_d\fP(r)   impz_get_si(r)"
.br
.ti -1c
.RI "#define \fBisl_int_get_str\fP(r)   impz_get_str(0, 10, r)"
.br
.ti -1c
.RI "#define \fBisl_int_abs\fP(r,  \fBi\fP)   impz_abs(r,\fBi\fP)"
.br
.ti -1c
.RI "#define \fBisl_int_neg\fP(r,  \fBi\fP)   impz_neg(r,\fBi\fP)"
.br
.ti -1c
.RI "#define \fBisl_int_swap\fP(\fBi\fP,  \fBj\fP)   impz_swap(\fBi\fP,\fBj\fP)"
.br
.ti -1c
.RI "#define \fBisl_int_swap_or_set\fP(\fBi\fP,  \fBj\fP)   impz_swap(\fBi\fP,\fBj\fP)"
.br
.ti -1c
.RI "#define \fBisl_int_add_ui\fP(r,  \fBi\fP,  \fBj\fP)   impz_add_ui(r,\fBi\fP,\fBj\fP)"
.br
.ti -1c
.RI "#define \fBisl_int_sub_ui\fP(r,  \fBi\fP,  \fBj\fP)   impz_sub_ui(r,\fBi\fP,\fBj\fP)"
.br
.ti -1c
.RI "#define \fBisl_int_add\fP(r,  \fBi\fP,  \fBj\fP)   impz_add(r,\fBi\fP,\fBj\fP)"
.br
.ti -1c
.RI "#define \fBisl_int_sub\fP(r,  \fBi\fP,  \fBj\fP)   impz_sub(r,\fBi\fP,\fBj\fP)"
.br
.ti -1c
.RI "#define \fBisl_int_mul\fP(r,  \fBi\fP,  \fBj\fP)   impz_mul(r,\fBi\fP,\fBj\fP)"
.br
.ti -1c
.RI "#define \fBisl_int_mul_2exp\fP(r,  \fBi\fP,  \fBj\fP)   impz_mul_2exp(r,\fBi\fP,\fBj\fP)"
.br
.ti -1c
.RI "#define \fBisl_int_mul_si\fP(r,  \fBi\fP,  \fBj\fP)   \fBmp_int_mul_value\fP(\fBi\fP,\fBj\fP,r)"
.br
.ti -1c
.RI "#define \fBisl_int_mul_ui\fP(r,  \fBi\fP,  \fBj\fP)   impz_mul_ui(r,\fBi\fP,\fBj\fP)"
.br
.ti -1c
.RI "#define \fBisl_int_pow_ui\fP(r,  \fBi\fP,  \fBj\fP)   impz_pow_ui(r,\fBi\fP,\fBj\fP)"
.br
.ti -1c
.RI "#define \fBisl_int_addmul\fP(r,  \fBi\fP,  \fBj\fP)   impz_addmul(r,\fBi\fP,\fBj\fP)"
.br
.ti -1c
.RI "#define \fBisl_int_addmul_ui\fP(r,  \fBi\fP,  \fBj\fP)   \fBisl_imath_addmul_ui\fP(r,\fBi\fP,\fBj\fP)"
.br
.ti -1c
.RI "#define \fBisl_int_submul\fP(r,  \fBi\fP,  \fBj\fP)   impz_submul(r,\fBi\fP,\fBj\fP)"
.br
.ti -1c
.RI "#define \fBisl_int_submul_ui\fP(r,  \fBi\fP,  \fBj\fP)   \fBisl_imath_submul_ui\fP(r,\fBi\fP,\fBj\fP)"
.br
.ti -1c
.RI "#define \fBisl_int_gcd\fP(r,  \fBi\fP,  \fBj\fP)   impz_gcd(r,\fBi\fP,\fBj\fP)"
.br
.ti -1c
.RI "#define \fBisl_int_lcm\fP(r,  \fBi\fP,  \fBj\fP)   impz_lcm(r,\fBi\fP,\fBj\fP)"
.br
.ti -1c
.RI "#define \fBisl_int_divexact\fP(r,  \fBi\fP,  \fBj\fP)   impz_divexact(r,\fBi\fP,\fBj\fP)"
.br
.ti -1c
.RI "#define \fBisl_int_divexact_ui\fP(r,  \fBi\fP,  \fBj\fP)   impz_divexact_ui(r,\fBi\fP,\fBj\fP)"
.br
.ti -1c
.RI "#define \fBisl_int_tdiv_q\fP(r,  \fBi\fP,  \fBj\fP)   impz_tdiv_q(r,\fBi\fP,\fBj\fP)"
.br
.ti -1c
.RI "#define \fBisl_int_cdiv_q\fP(r,  \fBi\fP,  \fBj\fP)   impz_cdiv_q(r,\fBi\fP,\fBj\fP)"
.br
.ti -1c
.RI "#define \fBisl_int_fdiv_q\fP(r,  \fBi\fP,  \fBj\fP)   impz_fdiv_q(r,\fBi\fP,\fBj\fP)"
.br
.ti -1c
.RI "#define \fBisl_int_fdiv_r\fP(r,  \fBi\fP,  \fBj\fP)   impz_fdiv_r(r,\fBi\fP,\fBj\fP)"
.br
.ti -1c
.RI "#define \fBisl_int_fdiv_q_ui\fP(r,  \fBi\fP,  \fBj\fP)   impz_fdiv_q_ui(r,\fBi\fP,\fBj\fP)"
.br
.ti -1c
.RI "#define \fBisl_int_read\fP(r,  s)   impz_set_str(r,s,10)"
.br
.ti -1c
.RI "#define \fBisl_int_sgn\fP(\fBi\fP)   impz_sgn(\fBi\fP)"
.br
.ti -1c
.RI "#define \fBisl_int_cmp\fP(\fBi\fP,  \fBj\fP)   impz_cmp(\fBi\fP,\fBj\fP)"
.br
.ti -1c
.RI "#define \fBisl_int_cmp_si\fP(\fBi\fP,  si)   impz_cmp_si(\fBi\fP,si)"
.br
.ti -1c
.RI "#define \fBisl_int_eq\fP(\fBi\fP,  \fBj\fP)   (impz_cmp(\fBi\fP,\fBj\fP) == 0)"
.br
.ti -1c
.RI "#define \fBisl_int_ne\fP(\fBi\fP,  \fBj\fP)   (impz_cmp(\fBi\fP,\fBj\fP) != 0)"
.br
.ti -1c
.RI "#define \fBisl_int_lt\fP(\fBi\fP,  \fBj\fP)   (impz_cmp(\fBi\fP,\fBj\fP) < 0)"
.br
.ti -1c
.RI "#define \fBisl_int_le\fP(\fBi\fP,  \fBj\fP)   (impz_cmp(\fBi\fP,\fBj\fP) <= 0)"
.br
.ti -1c
.RI "#define \fBisl_int_gt\fP(\fBi\fP,  \fBj\fP)   (impz_cmp(\fBi\fP,\fBj\fP) > 0)"
.br
.ti -1c
.RI "#define \fBisl_int_ge\fP(\fBi\fP,  \fBj\fP)   (impz_cmp(\fBi\fP,\fBj\fP) >= 0)"
.br
.ti -1c
.RI "#define \fBisl_int_abs_cmp\fP(\fBi\fP,  \fBj\fP)   impz_cmpabs(\fBi\fP,\fBj\fP)"
.br
.ti -1c
.RI "#define \fBisl_int_abs_eq\fP(\fBi\fP,  \fBj\fP)   (impz_cmpabs(\fBi\fP,\fBj\fP) == 0)"
.br
.ti -1c
.RI "#define \fBisl_int_abs_ne\fP(\fBi\fP,  \fBj\fP)   (impz_cmpabs(\fBi\fP,\fBj\fP) != 0)"
.br
.ti -1c
.RI "#define \fBisl_int_abs_lt\fP(\fBi\fP,  \fBj\fP)   (impz_cmpabs(\fBi\fP,\fBj\fP) < 0)"
.br
.ti -1c
.RI "#define \fBisl_int_abs_gt\fP(\fBi\fP,  \fBj\fP)   (impz_cmpabs(\fBi\fP,\fBj\fP) > 0)"
.br
.ti -1c
.RI "#define \fBisl_int_abs_ge\fP(\fBi\fP,  \fBj\fP)   (impz_cmpabs(\fBi\fP,\fBj\fP) >= 0)"
.br
.ti -1c
.RI "#define \fBisl_int_is_divisible_by\fP(\fBi\fP,  \fBj\fP)   impz_divisible_p(\fBi\fP,\fBj\fP)"
.br
.ti -1c
.RI "#define \fBisl_int_hash\fP(v,  h)   \fBisl_imath_hash\fP(v,h)"
.br
.ti -1c
.RI "#define \fBisl_int_free_str\fP(s)   \fBfree\fP(s)"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef \fBmp_int\fP \fBisl_int\fP"
.br
.ti -1c
.RI "typedef void(* \fBisl_int_print_mp_free_t\fP) (void *, size_t)"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "uint32_t \fBisl_imath_hash\fP (\fBmp_int\fP v, uint32_t hash)"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define isl_int_abs(r, \fBi\fP)   impz_abs(r,\fBi\fP)"

.SS "#define isl_int_abs_cmp(\fBi\fP, \fBj\fP)   impz_cmpabs(\fBi\fP,\fBj\fP)"

.SS "#define isl_int_abs_eq(\fBi\fP, \fBj\fP)   (impz_cmpabs(\fBi\fP,\fBj\fP) == 0)"

.SS "#define isl_int_abs_ge(\fBi\fP, \fBj\fP)   (impz_cmpabs(\fBi\fP,\fBj\fP) >= 0)"

.SS "#define isl_int_abs_gt(\fBi\fP, \fBj\fP)   (impz_cmpabs(\fBi\fP,\fBj\fP) > 0)"

.SS "#define isl_int_abs_lt(\fBi\fP, \fBj\fP)   (impz_cmpabs(\fBi\fP,\fBj\fP) < 0)"

.SS "#define isl_int_abs_ne(\fBi\fP, \fBj\fP)   (impz_cmpabs(\fBi\fP,\fBj\fP) != 0)"

.SS "#define isl_int_add(r, \fBi\fP, \fBj\fP)   impz_add(r,\fBi\fP,\fBj\fP)"

.SS "#define isl_int_add_ui(r, \fBi\fP, \fBj\fP)   impz_add_ui(r,\fBi\fP,\fBj\fP)"

.SS "#define isl_int_addmul(r, \fBi\fP, \fBj\fP)   impz_addmul(r,\fBi\fP,\fBj\fP)"

.SS "#define isl_int_addmul_ui(r, \fBi\fP, \fBj\fP)   \fBisl_imath_addmul_ui\fP(r,\fBi\fP,\fBj\fP)"

.SS "#define isl_int_cdiv_q(r, \fBi\fP, \fBj\fP)   impz_cdiv_q(r,\fBi\fP,\fBj\fP)"

.SS "#define isl_int_clear(\fBi\fP)   \fBmp_int_free\fP(\fBi\fP)"

.SS "#define isl_int_cmp(\fBi\fP, \fBj\fP)   impz_cmp(\fBi\fP,\fBj\fP)"

.SS "#define isl_int_cmp_si(\fBi\fP, si)   impz_cmp_si(\fBi\fP,si)"

.SS "#define isl_int_divexact(r, \fBi\fP, \fBj\fP)   impz_divexact(r,\fBi\fP,\fBj\fP)"

.SS "#define isl_int_divexact_ui(r, \fBi\fP, \fBj\fP)   impz_divexact_ui(r,\fBi\fP,\fBj\fP)"

.SS "#define isl_int_eq(\fBi\fP, \fBj\fP)   (impz_cmp(\fBi\fP,\fBj\fP) == 0)"

.SS "#define isl_int_fdiv_q(r, \fBi\fP, \fBj\fP)   impz_fdiv_q(r,\fBi\fP,\fBj\fP)"

.SS "#define isl_int_fdiv_q_ui(r, \fBi\fP, \fBj\fP)   impz_fdiv_q_ui(r,\fBi\fP,\fBj\fP)"

.SS "#define isl_int_fdiv_r(r, \fBi\fP, \fBj\fP)   impz_fdiv_r(r,\fBi\fP,\fBj\fP)"

.SS "#define isl_int_fits_slong(r)   \fBisl_imath_fits_slong_p\fP(r)"

.SS "#define isl_int_fits_ulong(r)   \fBisl_imath_fits_ulong_p\fP(r)"

.SS "#define isl_int_free_str(s)   \fBfree\fP(s)"

.SS "#define isl_int_gcd(r, \fBi\fP, \fBj\fP)   impz_gcd(r,\fBi\fP,\fBj\fP)"

.SS "#define isl_int_ge(\fBi\fP, \fBj\fP)   (impz_cmp(\fBi\fP,\fBj\fP) >= 0)"

.SS "#define isl_int_get_d(r)   impz_get_si(r)"

.SS "#define isl_int_get_si(r)   impz_get_si(r)"

.SS "#define isl_int_get_str(r)   impz_get_str(0, 10, r)"

.SS "#define isl_int_get_ui(r)   impz_get_ui(r)"

.SS "#define isl_int_gt(\fBi\fP, \fBj\fP)   (impz_cmp(\fBi\fP,\fBj\fP) > 0)"

.SS "#define isl_int_hash(v, h)   \fBisl_imath_hash\fP(v,h)"

.SS "#define isl_int_init(\fBi\fP)   \fBi\fP = \fBmp_int_alloc\fP()"

.SS "#define isl_int_is_divisible_by(\fBi\fP, \fBj\fP)   impz_divisible_p(\fBi\fP,\fBj\fP)"

.SS "#define isl_int_lcm(r, \fBi\fP, \fBj\fP)   impz_lcm(r,\fBi\fP,\fBj\fP)"

.SS "#define isl_int_le(\fBi\fP, \fBj\fP)   (impz_cmp(\fBi\fP,\fBj\fP) <= 0)"

.SS "#define isl_int_lt(\fBi\fP, \fBj\fP)   (impz_cmp(\fBi\fP,\fBj\fP) < 0)"

.SS "#define isl_int_mul(r, \fBi\fP, \fBj\fP)   impz_mul(r,\fBi\fP,\fBj\fP)"

.SS "#define isl_int_mul_2exp(r, \fBi\fP, \fBj\fP)   impz_mul_2exp(r,\fBi\fP,\fBj\fP)"

.SS "#define isl_int_mul_si(r, \fBi\fP, \fBj\fP)   \fBmp_int_mul_value\fP(\fBi\fP,\fBj\fP,r)"

.SS "#define isl_int_mul_ui(r, \fBi\fP, \fBj\fP)   impz_mul_ui(r,\fBi\fP,\fBj\fP)"

.SS "#define isl_int_ne(\fBi\fP, \fBj\fP)   (impz_cmp(\fBi\fP,\fBj\fP) != 0)"

.SS "#define isl_int_neg(r, \fBi\fP)   impz_neg(r,\fBi\fP)"

.SS "#define isl_int_pow_ui(r, \fBi\fP, \fBj\fP)   impz_pow_ui(r,\fBi\fP,\fBj\fP)"

.SS "#define isl_int_read(r, s)   impz_set_str(r,s,10)"

.SS "#define isl_int_set(r, \fBi\fP)   impz_set(r,\fBi\fP)"

.SS "#define isl_int_set_si(r, \fBi\fP)   impz_set_si(r,\fBi\fP)"

.SS "#define isl_int_set_ui(r, \fBi\fP)   impz_set_ui(r,\fBi\fP)"

.SS "#define isl_int_sgn(\fBi\fP)   impz_sgn(\fBi\fP)"

.SS "#define isl_int_sub(r, \fBi\fP, \fBj\fP)   impz_sub(r,\fBi\fP,\fBj\fP)"

.SS "#define isl_int_sub_ui(r, \fBi\fP, \fBj\fP)   impz_sub_ui(r,\fBi\fP,\fBj\fP)"

.SS "#define isl_int_submul(r, \fBi\fP, \fBj\fP)   impz_submul(r,\fBi\fP,\fBj\fP)"

.SS "#define isl_int_submul_ui(r, \fBi\fP, \fBj\fP)   \fBisl_imath_submul_ui\fP(r,\fBi\fP,\fBj\fP)"

.SS "#define isl_int_swap(\fBi\fP, \fBj\fP)   impz_swap(\fBi\fP,\fBj\fP)"

.SS "#define isl_int_swap_or_set(\fBi\fP, \fBj\fP)   impz_swap(\fBi\fP,\fBj\fP)"

.SS "#define isl_int_tdiv_q(r, \fBi\fP, \fBj\fP)   impz_tdiv_q(r,\fBi\fP,\fBj\fP)"

.SH "Typedef Documentation"
.PP 
.SS "typedef \fBmp_int\fP \fBisl_int\fP"

.SS "typedef void(* isl_int_print_mp_free_t) (void *, size_t)"

.SH "Function Documentation"
.PP 
.SS "uint32_t isl_imath_hash (\fBmp_int\fP v, uint32_t hash)"

.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
