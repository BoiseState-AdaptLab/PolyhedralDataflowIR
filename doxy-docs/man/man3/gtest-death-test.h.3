.TH "lib/gtest/include/gtest/gtest-death-test.h" 3 "Sun Jul 12 2020" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
lib/gtest/include/gtest/gtest-death-test.h
.SH SYNOPSIS
.br
.PP
\fC#include 'gtest/internal/gtest\-death\-test\-internal\&.h'\fP
.br

.SS "Namespaces"

.in +1c
.ti -1c
.RI " \fBtesting\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBGTEST_UNSUPPORTED_DEATH_TEST\fP(statement,  regex,  terminator)"
.br
.ti -1c
.RI "#define \fBEXPECT_DEATH_IF_SUPPORTED\fP(statement,  regex)   \fBGTEST_UNSUPPORTED_DEATH_TEST\fP(statement, regex, )"
.br
.ti -1c
.RI "#define \fBASSERT_DEATH_IF_SUPPORTED\fP(statement,  regex)   \fBGTEST_UNSUPPORTED_DEATH_TEST\fP(statement, regex, return)"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBtesting::GTEST_DECLARE_string_\fP (death_test_style)"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define ASSERT_DEATH_IF_SUPPORTED(statement, regex)   \fBGTEST_UNSUPPORTED_DEATH_TEST\fP(statement, regex, return)"

.SS "#define EXPECT_DEATH_IF_SUPPORTED(statement, regex)   \fBGTEST_UNSUPPORTED_DEATH_TEST\fP(statement, regex, )"

.SS "#define GTEST_UNSUPPORTED_DEATH_TEST(statement, regex, terminator)"
\fBValue:\fP
.PP
.nf
    GTEST_AMBIGUOUS_ELSE_BLOCKER_ \\
    if (::testing::internal::AlwaysTrue()) { \
      GTEST_LOG_(WARNING) \
          << "Death tests are not supported on this platform\&.\n" \
          << "Statement '" #statement "' cannot be verified\&."; \
    } else if (::testing::internal::AlwaysFalse()) { \\
      ::testing::internal::RE::PartialMatch("\&.*", (regex)); \
      GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_(statement); \
      terminator; \
    } else \
      ::testing::Message()
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
