.TH "iegenlib::UninterpFunc" 3 "Sun Jul 12 2020" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
iegenlib::UninterpFunc \- Contains info about uninterpreted function such as name, domain, range, whether bijective, and if has any monotonicity characteristic\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <UninterpFunc\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBUninterpFunc\fP (std::string \fBname\fP, \fBSet\fP *\fBdomain\fP, \fBSet\fP *range, bool \fBbijective\fP, \fBMonotonicType\fP monoType)"
.br
.ti -1c
.RI "\fB~UninterpFunc\fP ()"
.br
.ti -1c
.RI "\fBUninterpFunc\fP (\fBconst\fP \fBUninterpFunc\fP &other)"
.br
.RI "Copy constructor\&. "
.ti -1c
.RI "\fBUninterpFunc\fP & \fBoperator=\fP (\fBconst\fP \fBUninterpFunc\fP &other)"
.br
.RI "Assignment operator\&. "
.ti -1c
.RI "std::string \fBgetName\fP () \fBconst\fP"
.br
.RI "Return the function name\&. "
.ti -1c
.RI "\fBSet\fP * \fBgetDomain\fP () \fBconst\fP"
.br
.RI "Return the function domain\&. "
.ti -1c
.RI "\fBSet\fP * \fBgetRange\fP () \fBconst\fP"
.br
.RI "Return the function range\&. "
.ti -1c
.RI "bool \fBisBijective\fP () \fBconst\fP"
.br
.RI "Returns true if function is bijective, false otherwise\&. "
.ti -1c
.RI "\fBMonotonicType\fP \fBgetMonoType\fP () \fBconst\fP"
.br
.RI "Getter for the monotonicity type\&. "
.ti -1c
.RI "std::string \fBtoString\fP () \fBconst\fP"
.br
.RI "Creates a string with information about function\&. "
.in -1c
.SH "Detailed Description"
.PP 
Contains info about uninterpreted function such as name, domain, range, whether bijective, and if has any monotonicity characteristic\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "iegenlib::UninterpFunc::UninterpFunc (std::string name, \fBSet\fP * domain, \fBSet\fP * range, bool bijective, \fBMonotonicType\fP monoType)"

.SS "iegenlib::UninterpFunc::~UninterpFunc ()"

.SS "iegenlib::UninterpFunc::UninterpFunc (\fBconst\fP \fBUninterpFunc\fP & other)"

.PP
Copy constructor\&. 
.SH "Member Function Documentation"
.PP 
.SS "\fBSet\fP* iegenlib::UninterpFunc::getDomain () const\fC [inline]\fP"

.PP
Return the function domain\&. 
.SS "\fBMonotonicType\fP iegenlib::UninterpFunc::getMonoType () const\fC [inline]\fP"

.PP
Getter for the monotonicity type\&. 
.SS "std::string iegenlib::UninterpFunc::getName () const\fC [inline]\fP"

.PP
Return the function name\&. 
.SS "\fBSet\fP* iegenlib::UninterpFunc::getRange () const\fC [inline]\fP"

.PP
Return the function range\&. 
.SS "bool iegenlib::UninterpFunc::isBijective () const\fC [inline]\fP"

.PP
Returns true if function is bijective, false otherwise\&. 
.SS "\fBUninterpFunc\fP & iegenlib::UninterpFunc::operator= (\fBconst\fP \fBUninterpFunc\fP & other)"

.PP
Assignment operator\&. Assignment operator\&. Clones the domain and range sets\&. 
.SS "std::string iegenlib::UninterpFunc::toString () const"

.PP
Creates a string with information about function\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
